<library>
    <name>System.Base</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System">
            <name>System</name>
            <classes>
                <class id="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2">
                    <name>BinaryFun&lt;Argument1, Argument2, Result></name>
                    <groupName>BinaryFun</groupName>
                    <syntax>abstract public class BinaryFun&lt;Argument1, Argument2, Result>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699618">
                            <name>Argument1</name>
                        </templateParameter>
                        <templateParameter id="8699619">
                            <name>Argument2</name>
                        </templateParameter>
                        <templateParameter id="8699620">
                            <name>Result</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="8699618"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699619"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <typedefs>
                        <typedef id="typedef_FirstArgumentType_198527D4B0D376FD16E3123014752AF8EDDB0E8C">
                            <name>FirstArgumentType</name>
                            <syntax>public typedef Argument1 FirstArgumentType;</syntax>
                            <type ref="8699618"/>
                        </typedef>
                        <typedef id="typedef_ResultType_05D47BB7C8D4766237F109C7F20B84569662237F">
                            <name>ResultType</name>
                            <syntax>public typedef Result ResultType;</syntax>
                            <type ref="8699620"/>
                        </typedef>
                        <typedef id="typedef_SecondArgumentType_FD49857836103FCDE72FA41FF9B0635DEFDC9E06">
                            <name>SecondArgumentType</name>
                            <syntax>public typedef Argument2 SecondArgumentType;</syntax>
                            <type ref="8699619"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7">
                    <name>BinaryPred&lt;Argument1, Argument2></name>
                    <groupName>BinaryPred</groupName>
                    <syntax> public class BinaryPred&lt;Argument1, Argument2>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699638">
                            <name>Argument1</name>
                        </templateParameter>
                        <templateParameter id="8699639">
                            <name>Argument2</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_BinaryFun_Argument1_Argument2_bool_88A4A731266CCFEA56C0EF24FFEC409F274F46CC"/>
                    <constraint>
                        <type ref="8699638"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699639"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                </class>
                <class id="class_BitAnd_T_AC930DBF44CAD4AF5C16EEB91A5A85BD51AA5A95">
                    <name>BitAnd&lt;T></name>
                    <groupName>BitAnd</groupName>
                    <syntax> public class BitAnd&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699681">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                    <constraint>
                        <type ref="8699681"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_BitAnd_T_125FB1560925572FBE43BB149B29CC47A4F7636B">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.116"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.116"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699681"/>
                        </function>
                    </functions>
                </class>
                <class id="class_BitNot_T_763DFD1FCEE6B8C85B9786C16ED6A1B26736DFDF">
                    <name>BitNot&lt;T></name>
                    <groupName>BitNot</groupName>
                    <syntax> public class BitNot&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699687">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                    <constraint>
                        <type ref="8699687"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_BitNot_T_78C439136E97CAF9FC85DE5F98BD29CD48AE3C19">
                            <name>operator()(const T&amp; operand) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; operand) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>operand</name>
                                    <type ref="type.119"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699687"/>
                        </function>
                    </functions>
                </class>
                <class id="class_BitOr_T_4DDB2A2A49411F9C36A78E9B3E3C41E218EA45E5">
                    <name>BitOr&lt;T></name>
                    <groupName>BitOr</groupName>
                    <syntax> public class BitOr&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699683">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                    <constraint>
                        <type ref="8699683"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_BitOr_T_80EDE8BAF952389AD848DDF530B1E1CCB2F24F5C">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.117"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.117"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699683"/>
                        </function>
                    </functions>
                </class>
                <class id="class_BitXor_T_11BFC9FE73C9D8A61487930E54FA072FAFE53DA6">
                    <name>BitXor&lt;T></name>
                    <groupName>BitXor</groupName>
                    <syntax> public class BitXor&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699685">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                    <constraint>
                        <type ref="8699685"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_BitXor_T_E1EAEA558776E8E7E857541C7F9F476FA7E46902">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.118"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.118"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699685"/>
                        </function>
                    </functions>
                </class>
                <class id="class_Console_41891B146EC51CAB04451732257B28BD18CAE52B">
                    <name>Console</name>
                    <groupName>Console</groupName>
                    <syntax> public static class Console;</syntax>
                    <staticMemberFunctions>
                        <function id="member_function_Error_Console_FA91CE926D84335C436F3E0AFAED79CBAA558BB9">
                            <name>Error()</name>
                            <syntax>public static nothrow StreamWriter&amp; Error();</syntax>
                            <returnType ref="type.8699894"/>
                        </function>
                        <function id="member_function_In_Console_99F0CC971E516A7C8B1204914AB811B650CD22D2">
                            <name>In()</name>
                            <syntax>public static nothrow StreamReader&amp; In();</syntax>
                            <returnType ref="type.8699888"/>
                        </function>
                        <function id="member_function_Out_Console_A4BB5FFE2A3FD21817607224D4BC162094365AE1">
                            <name>Out()</name>
                            <syntax>public static nothrow StreamWriter&amp; Out();</syntax>
                            <returnType ref="type.8699894"/>
                        </function>
                        <function id="member_function_Read_Console_76EB25644F42D8E59761B24929E134ADA2024A59">
                            <name>Read()</name>
                            <syntax>public static int Read();</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_ReadLine_Console_535C3566554133A2844986D23CEC066926DC89F7">
                            <name>ReadLine()</name>
                            <syntax>public static String&lt;char> ReadLine();</syntax>
                            <returnType ref="type.8700206"/>
                        </function>
                        <function id="member_function_ReadToEnd_Console_EF6891B78CD6CF76217254D7CB283AB71878F3F2">
                            <name>ReadToEnd()</name>
                            <syntax>public static String&lt;char> ReadToEnd();</syntax>
                            <returnType ref="type.8700206"/>
                        </function>
                        <function id="member_function_SetError_Console_5694C700EAB7218C1D5668E0E77648667257FCCE">
                            <name>SetError(StreamWriter&amp;&amp; err_)</name>
                            <syntax>public static nothrow void SetError(StreamWriter&amp;&amp; err_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>err_</name>
                                    <type ref="type.8700396"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetIn_Console_144A81AD49A715FECC5B358CB64BA286FC86CBFE">
                            <name>SetIn(StreamReader&amp;&amp; in_)</name>
                            <syntax>public static nothrow void SetIn(StreamReader&amp;&amp; in_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>in_</name>
                                    <type ref="type.8700395"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetOut_Console_AE9F2E848ED88D529F4A92C0EA6B3C04AA43769A">
                            <name>SetOut(StreamWriter&amp;&amp; out_)</name>
                            <syntax>public static nothrow void SetOut(StreamWriter&amp;&amp; out_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>out_</name>
                                    <type ref="type.8700396"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_Write_D6CFFBB40B209994DCA32A1BCB61084F23E50180">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_Console_11EDDE987063090D382CACB65C77221E4A7F01C9">
                                    <name>Write(bool b)</name>
                                    <syntax>public static void Write(bool b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.8699065"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_97E5518784E55214AB6A648220A87EF9A3212793">
                                    <name>Write(byte b)</name>
                                    <syntax>public static void Write(byte b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.8699067"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_0FC0FA23F205FA36A775595F49EA7AEF0EDBBBB8">
                                    <name>Write(const Date&amp; date)</name>
                                    <syntax>public static void Write(const Date&amp; date);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>date</name>
                                            <type ref="type.8699946"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_F351F2A730DCD4D10620E930379F0288631B6522">
                                    <name>Write(const DateTime&amp; dateTime)</name>
                                    <syntax>public static void Write(const DateTime&amp; dateTime);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>dateTime</name>
                                            <type ref="type.8699952"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_04842A06479973B30F0B5598E8D6FBD3957C1FE2">
                                    <name>Write(const String&lt;char>&amp; s)</name>
                                    <syntax>public static void Write(const String&lt;char>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700211"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_E29C237F5B71BE086A058763314BABF0FB769D0D">
                                    <name>Write(const String&lt;uchar>&amp; s)</name>
                                    <syntax>public static void Write(const String&lt;uchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700299"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_1009597105157D581D3F7A25632FC3FF6AD3A5AB">
                                    <name>Write(const String&lt;wchar>&amp; s)</name>
                                    <syntax>public static void Write(const String&lt;wchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700254"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_F32844918C0076C3F4620FBFD28CDB4A4AFED9E7">
                                    <name>Write(const char* s)</name>
                                    <syntax>public static void Write(const char* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699214"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_5A827BCBFA0C8D7749A04194F5584212FF8E5101">
                                    <name>Write(const uchar* s)</name>
                                    <syntax>public static void Write(const uchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700301"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_A622FA3579F2EBDC9566A38B19AF29D11A0849E2">
                                    <name>Write(const wchar* s)</name>
                                    <syntax>public static void Write(const wchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700256"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_244D2AF19E6B576874CE8BA5CDB2EB5CA5B06CCC">
                                    <name>Write(double d)</name>
                                    <syntax>public static void Write(double d);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>d</name>
                                            <type ref="type.8699075"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_AB753AC902C081754CAAAF5EF69E2A9A70C4444E">
                                    <name>Write(float f)</name>
                                    <syntax>public static void Write(float f);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>f</name>
                                            <type ref="type.8699074"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_47B956DC8FCDC2FB8881CE75290F528433CA0992">
                                    <name>Write(int i)</name>
                                    <syntax>public static void Write(int i);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>i</name>
                                            <type ref="type.8699070"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_9934A22CB6E215489667AB287769BC8ABB3CC154">
                                    <name>Write(long l)</name>
                                    <syntax>public static void Write(long l);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>l</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_3100A0A058AFE0E6B9A9DFC9C6B9FD398FC591FB">
                                    <name>Write(sbyte s)</name>
                                    <syntax>public static void Write(sbyte s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699066"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_F49A9FA7AC1FA81C2021CAAE3024F2CD36FCF878">
                                    <name>Write(short s)</name>
                                    <syntax>public static void Write(short s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699068"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_714F7380CD4C63F6444B6D9A022622C29CAE0ADE">
                                    <name>Write(uint u)</name>
                                    <syntax>public static void Write(uint u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699071"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_A86AAF52F29921959347A9598430A3AA3059F634">
                                    <name>Write(ulong u)</name>
                                    <syntax>public static void Write(ulong u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699073"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_B08ED6A7A5289E232B87E43F7860136D9C08D6F7">
                                    <name>Write(ushort u)</name>
                                    <syntax>public static void Write(ushort u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699069"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_WriteLine_2F852D672D69C7BA9A46D8F682E4DDA11F8EEF5D">
                            <name>WriteLine</name>
                            <overloads>
                                <overload id="member_function_WriteLine_Console_5CBAB27B445440400BBC13DEF7F50F5B885EB1F1">
                                    <name>WriteLine()</name>
                                    <syntax>public static void WriteLine();</syntax>
                                </overload>
                                <overload id="member_function_WriteLine_Console_A7A3DDC20233C5298EC3BB88FC0DD323DCB2CC8E">
                                    <name>WriteLine(bool b)</name>
                                    <syntax>public static void WriteLine(bool b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.8699065"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_53EF58A683171B00F3266FA634078F5835397C0E">
                                    <name>WriteLine(byte b)</name>
                                    <syntax>public static void WriteLine(byte b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.8699067"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_C25BF46F13EBD93B14F96E8E6564B1F473DB9318">
                                    <name>WriteLine(const Date&amp; date)</name>
                                    <syntax>public static void WriteLine(const Date&amp; date);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>date</name>
                                            <type ref="type.8699946"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_2A0882A8E953EAB1ABCB3BA3B12DB0A50DFAF34D">
                                    <name>WriteLine(const DateTime&amp; dateTime)</name>
                                    <syntax>public static void WriteLine(const DateTime&amp; dateTime);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>dateTime</name>
                                            <type ref="type.8699952"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_9AFE70B5869360AF73603AA32F58F1860A016BBC">
                                    <name>WriteLine(const String&lt;char>&amp; s)</name>
                                    <syntax>public static void WriteLine(const String&lt;char>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700211"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_8E42026B566E7516D68F5231958D260275A09E17">
                                    <name>WriteLine(const String&lt;uchar>&amp; s)</name>
                                    <syntax>public static void WriteLine(const String&lt;uchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700299"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_088DDB55B189391D51E023AA5CD9AE5CFF24E38B">
                                    <name>WriteLine(const String&lt;wchar>&amp; s)</name>
                                    <syntax>public static void WriteLine(const String&lt;wchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700254"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_9FE02332C7669B128638EA7B0A2A2EE07C3A0A17">
                                    <name>WriteLine(const char* s)</name>
                                    <syntax>public static void WriteLine(const char* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699214"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_73C53B1E6656B22DFFA3FDE928E22845DCC312FB">
                                    <name>WriteLine(const uchar* s)</name>
                                    <syntax>public static void WriteLine(const uchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700301"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_BBAF19437A1C4FB1F855D4682FE7528B4C44FF19">
                                    <name>WriteLine(const wchar* s)</name>
                                    <syntax>public static void WriteLine(const wchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700256"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_141EB97A02623B00CF2C3BBF055D4526FF02D4F4">
                                    <name>WriteLine(double d)</name>
                                    <syntax>public static void WriteLine(double d);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>d</name>
                                            <type ref="type.8699075"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_B2269EC7526C0A25F1305503007FD658E053EEC5">
                                    <name>WriteLine(float f)</name>
                                    <syntax>public static void WriteLine(float f);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>f</name>
                                            <type ref="type.8699074"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_43E085D6DC0AFFDE3BD4BACCF1334A0C9F87CFD3">
                                    <name>WriteLine(int i)</name>
                                    <syntax>public static void WriteLine(int i);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>i</name>
                                            <type ref="type.8699070"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_065C2B868ECA4045FCA2029B4F254DBE8EB986F9">
                                    <name>WriteLine(long l)</name>
                                    <syntax>public static void WriteLine(long l);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>l</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_4DCE4F117C4DAA0F1997B9B88F9455F468C17C62">
                                    <name>WriteLine(sbyte s)</name>
                                    <syntax>public static void WriteLine(sbyte s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699066"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_891626425064CE042C02952826F876D6DBFF3427">
                                    <name>WriteLine(short s)</name>
                                    <syntax>public static void WriteLine(short s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699068"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_36CA5FEFB07132EFC11AB160F98AAC892DCFFEAD">
                                    <name>WriteLine(uint u)</name>
                                    <syntax>public static void WriteLine(uint u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699071"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_35F936231E4D660975446F174C1A49F2F3138A65">
                                    <name>WriteLine(ulong u)</name>
                                    <syntax>public static void WriteLine(ulong u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699073"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_3CB7B6C8B19F5D30328AC775D604D2CF6BA33D6C">
                                    <name>WriteLine(ushort u)</name>
                                    <syntax>public static void WriteLine(ushort u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699069"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B">
                    <name>ConversionException</name>
                    <groupName>ConversionException</groupName>
                    <syntax> public class ConversionException;</syntax>
                    <baseClass ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                    <constructors>
                        <constructor id="constructor_ConversionException_F5BEDF73523CC545C5360F370A9CADA8AA7A5BA2">
                            <name>ConversionException(const String&lt;char>&amp; message)</name>
                            <syntax>public nothrow ConversionException(const String&lt;char>&amp; message);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
                <class id="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30">
                    <name>Counter&lt;T></name>
                    <groupName>Counter</groupName>
                    <syntax> public class Counter&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699848">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="class_CounterBase_10B5255B4C6CEAF6663DDD03CCD6EFED9BFD9254"/>
                    <constructors>
                        <constructor id="constructor_Counter_T_1DD9BF161FCE194BF3B768CBED7228D7CAB0F1E5">
                            <name>Counter&lt;T>(T* ptr_)</name>
                            <syntax>public nothrow Counter&lt;T>(T* ptr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ptr_</name>
                                    <type ref="type.8702110"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Dispose_Counter_T_0732681700103D920179001B599DEF100A78C902">
                            <name>Dispose()</name>
                            <syntax>public nothrow override void Dispose();</syntax>
                        </function>
                    </functions>
                </class>
                <class id="class_CounterBase_10B5255B4C6CEAF6663DDD03CCD6EFED9BFD9254">
                    <name>CounterBase</name>
                    <groupName>CounterBase</groupName>
                    <syntax>abstract public class CounterBase;</syntax>
                    <constructors>
                        <constructor id="default_constructor_CounterBase_3E2348EBF298559D216B4D89C58BD19EE9F1B4AE">
                            <name>CounterBase()</name>
                            <syntax>public nothrow CounterBase();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AddReference_CounterBase_5CA4D3899E7AB33B7640A4C8D33A7BE1A0B7FE32">
                            <name>AddReference()</name>
                            <syntax>public nothrow inline void AddReference();</syntax>
                        </function>
                        <function id="member_function_Destruct_CounterBase_DD3CB9483C9E03B6B76A42591E661691B4B52E7A">
                            <name>Destruct()</name>
                            <syntax>public nothrow virtual void Destruct();</syntax>
                        </function>
                        <function id="member_function_Dispose_CounterBase_EC034F3D7908831288454107B10ABAE0BEEDB2C7">
                            <name>Dispose()</name>
                            <syntax>public nothrow abstract void Dispose();</syntax>
                        </function>
                        <function id="member_function_GetUseCount_CounterBase_EB32CD7EEB16646DC6CA7C690EDDAC3CF7260758">
                            <name>GetUseCount() const</name>
                            <syntax>public nothrow inline int GetUseCount() const;</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_Release_CounterBase_21BBEB926F383263A97B3B7C62D59999761E4C65">
                            <name>Release()</name>
                            <syntax>public nothrow inline void Release();</syntax>
                        </function>
                        <function id="member_function_WeakAddReference_CounterBase_DAD01AEA3D60E413202BD5A644A503EF980AD84A">
                            <name>WeakAddReference()</name>
                            <syntax>public nothrow inline void WeakAddReference();</syntax>
                        </function>
                        <function id="member_function_WeakRelease_CounterBase_996A340E4A965F927DC1CDCB94CDC1AFDB652639">
                            <name>WeakRelease()</name>
                            <syntax>public nothrow void WeakRelease();</syntax>
                        </function>
                    </functions>
                </class>
                <class id="class_Date_351EEEABF504E83A9336BC83CE10D3450072F1E8">
                    <name>Date</name>
                    <groupName>Date</groupName>
                    <syntax> public class Date;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Date_84517C0815201053028FDE58F0E36FF05A6290FD">
                            <name>Date()</name>
                            <syntax>public nothrow Date();</syntax>
                        </constructor>
                        <constructor id="constructor_Date_4E9FCA0DA7C214250BFFD343DE8FF27451938B86">
                            <name>Date(short year_, Month month_, sbyte day_)</name>
                            <syntax>public nothrow Date(short year_, Month month_, sbyte day_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>year_</name>
                                    <type ref="type.8699068"/>
                                </parameter>
                                <parameter>
                                    <name>month_</name>
                                    <type ref="enumerated_type_Month_7829D8A209CD9954EC457E7406A5269E99C4AA48"/>
                                </parameter>
                                <parameter>
                                    <name>day_</name>
                                    <type ref="type.8699066"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Day_Date_6D27B3F3D13A35635455D20B3116E5237EFA2D0F">
                            <name>Day() const</name>
                            <syntax>public nothrow inline sbyte Day() const;</syntax>
                            <returnType ref="type.8699066"/>
                        </function>
                        <function id="member_function_GetMonth_Date_49707BD468285D2A7E9BEAA167E31170A624020D">
                            <name>GetMonth() const</name>
                            <syntax>public nothrow inline Month GetMonth() const;</syntax>
                            <returnType ref="enumerated_type_Month_7829D8A209CD9954EC457E7406A5269E99C4AA48"/>
                        </function>
                        <function id="function_group_ToString_162B8D0DAE2EC69DB8D1062DDE30C4B08F54E1D7">
                            <name>ToString</name>
                            <overloads>
                                <overload id="member_function_ToString_Date_5F1268F68CA5FF5F15096E2DD9868270A4F1CCF3">
                                    <name>ToString() const</name>
                                    <syntax>public nothrow String&lt;char> ToString() const;</syntax>
                                    <returnType ref="type.8700206"/>
                                </overload>
                                <overload id="member_function_ToString_Date_D359CB96AA936278A98B40E8A39C40D2F9F6C65E">
                                    <name>ToString(bool omitDashes) const</name>
                                    <syntax>public nothrow String&lt;char> ToString(bool omitDashes) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>omitDashes</name>
                                            <type ref="type.8699065"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8700206"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Year_Date_F5CA5464B5BEBE2FD0F3FB502B0100676D984D64">
                            <name>Year() const</name>
                            <syntax>public nothrow inline short Year() const;</syntax>
                            <returnType ref="type.8699068"/>
                        </function>
                    </functions>
                </class>
                <class id="class_DateTime_1CCCF400289F734AAAB9BC0562E46C77468B398E">
                    <name>DateTime</name>
                    <groupName>DateTime</groupName>
                    <syntax> public class DateTime;</syntax>
                    <constructors>
                        <constructor id="default_constructor_DateTime_708E5923F612F011E7DDD1D15902CC95995162E7">
                            <name>DateTime()</name>
                            <syntax>public nothrow DateTime();</syntax>
                        </constructor>
                        <constructor id="constructor_DateTime_45352D4CF749A86882BA5EFCA870933F4A8575AE">
                            <name>DateTime(Date date_)</name>
                            <syntax>public nothrow DateTime(Date date_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>date_</name>
                                    <type ref="class_Date_351EEEABF504E83A9336BC83CE10D3450072F1E8"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_DateTime_5F0BCA5FFB28D88A4225F8D62A8451A87B16E6EE">
                            <name>DateTime(Date date_, int secs_)</name>
                            <syntax>public nothrow DateTime(Date date_, int secs_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>date_</name>
                                    <type ref="class_Date_351EEEABF504E83A9336BC83CE10D3450072F1E8"/>
                                </parameter>
                                <parameter>
                                    <name>secs_</name>
                                    <type ref="type.8699070"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_GetDate_DateTime_A6B28B2F2FC69D6C812228BC8DE885A1880F8E33">
                            <name>GetDate() const</name>
                            <syntax>public nothrow inline Date GetDate() const;</syntax>
                            <returnType ref="class_Date_351EEEABF504E83A9336BC83CE10D3450072F1E8"/>
                        </function>
                        <function id="member_function_Hours_DateTime_2C64ED0554C15FF013E4021AEF11FD23339588A6">
                            <name>Hours() const</name>
                            <syntax>public nothrow inline int Hours() const;</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_Minutes_DateTime_79624659102C75683257425AA5F264A5D55357BB">
                            <name>Minutes() const</name>
                            <syntax>public nothrow inline int Minutes() const;</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_Seconds_DateTime_DA6481BBB70D3685792313B7E31FF0464BCF22B7">
                            <name>Seconds() const</name>
                            <syntax>public nothrow inline int Seconds() const;</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="function_group_ToString_CB672EF613B7A2CDE89E8B47A6606CBA2010A3AD">
                            <name>ToString</name>
                            <overloads>
                                <overload id="member_function_ToString_DateTime_949D23212223E3E072A57CB10F9B0664108D72C2">
                                    <name>ToString()</name>
                                    <syntax>public nothrow String&lt;char> ToString();</syntax>
                                    <returnType ref="type.8700206"/>
                                </overload>
                                <overload id="member_function_ToString_DateTime_C0E565638830A0CB7BBEEE7DC4CFF7991A1BB463">
                                    <name>ToString(bool omitDashes, bool omitColons, bool omitMins, bool omitSecs)</name>
                                    <syntax>public nothrow String&lt;char> ToString(bool omitDashes, bool omitColons, bool omitMins, bool omitSecs);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>omitDashes</name>
                                            <type ref="type.8699065"/>
                                        </parameter>
                                        <parameter>
                                            <name>omitColons</name>
                                            <type ref="type.8699065"/>
                                        </parameter>
                                        <parameter>
                                            <name>omitMins</name>
                                            <type ref="type.8699065"/>
                                        </parameter>
                                        <parameter>
                                            <name>omitSecs</name>
                                            <type ref="type.8699065"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8700206"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_Divides_T_492CA08096256C1214EEE93541699563D4718ED6">
                    <name>Divides&lt;T></name>
                    <groupName>Divides</groupName>
                    <syntax> public class Divides&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699632">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                    <constraint>
                        <type ref="8699632"/>
                        <connector>is</connector>
                        <concept ref="concept_MultiplicativeGroup_157A1A41F23EF7E4F09D855F82CBFB2C95135E91"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Divides_T_9A5E78D0EAD1D68B1F4863A624BED8F056585C84">
                            <name>operator()(const T&amp; a, const T&amp; b) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; a, const T&amp; b) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>a</name>
                                    <type ref="type.95"/>
                                </parameter>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.95"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699632"/>
                        </function>
                    </functions>
                </class>
                <class id="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151">
                    <name>Duration</name>
                    <groupName>Duration</groupName>
                    <syntax> public class Duration;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Duration_33C696BF1F9C6AE6A9C6623E19B6FCA46411CAB0">
                            <name>Duration()</name>
                            <syntax>public nothrow Duration();</syntax>
                        </constructor>
                        <constructor id="constructor_Duration_507291FAB1C227B62F5AE81BA8311147F4A43561">
                            <name>Duration(long nanosecs_)</name>
                            <syntax>public nothrow explicit Duration(long nanosecs_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nanosecs_</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Hours_Duration_E26F87EFE41F32CD31337DF68A6E0FF7024DBC94">
                            <name>Hours() const</name>
                            <syntax>public nothrow long Hours() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_Microseconds_Duration_BFB7EE255E79014A32DD9B4649C3253427631B4D">
                            <name>Microseconds() const</name>
                            <syntax>public nothrow long Microseconds() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_Milliseconds_Duration_DF5A1E8D2F805A829F5A1C7EFB88B49B46D11B42">
                            <name>Milliseconds() const</name>
                            <syntax>public nothrow long Milliseconds() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_Minutes_Duration_E18CA6040D73B6E3CA00B5F83E9F2848A183994D">
                            <name>Minutes() const</name>
                            <syntax>public nothrow long Minutes() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_Nanoseconds_Duration_68E6B28CD3F60B3A35C4A2E9F7CDC298309E4006">
                            <name>Nanoseconds() const</name>
                            <syntax>public nothrow long Nanoseconds() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_Rep_Duration_AD31E0924B48E4E5A589970CC723EC9E76D06A53">
                            <name>Rep() const</name>
                            <syntax>public nothrow inline long Rep() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_Seconds_Duration_825FF8C104C04C426CC98FDC727C135D63510160">
                            <name>Seconds() const</name>
                            <syntax>public nothrow long Seconds() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_FromHours_Duration_721FA0087A51FFFDE42D3B4062DB1C490CFCA011">
                            <name>FromHours(long hours)</name>
                            <syntax>public static nothrow Duration FromHours(long hours);</syntax>
                            <parameters>
                                <parameter>
                                    <name>hours</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                        </function>
                        <function id="member_function_FromMicroseconds_Duration_FB6A8D0A6CC090D8518CCE494A880EACF0406636">
                            <name>FromMicroseconds(long microseconds)</name>
                            <syntax>public static nothrow Duration FromMicroseconds(long microseconds);</syntax>
                            <parameters>
                                <parameter>
                                    <name>microseconds</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                        </function>
                        <function id="member_function_FromMilliseconds_Duration_54BFF5BC1A910C530A18F6CB6728966DCDF9C9A5">
                            <name>FromMilliseconds(long milliseconds)</name>
                            <syntax>public static nothrow Duration FromMilliseconds(long milliseconds);</syntax>
                            <parameters>
                                <parameter>
                                    <name>milliseconds</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                        </function>
                        <function id="member_function_FromMinutes_Duration_AE291BE8A8816D20F0C603464221628B6C09859C">
                            <name>FromMinutes(long minutes)</name>
                            <syntax>public static nothrow Duration FromMinutes(long minutes);</syntax>
                            <parameters>
                                <parameter>
                                    <name>minutes</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                        </function>
                        <function id="member_function_FromNanoseconds_Duration_599802B032CBA8D94DF0A1CE82D062DA1BD59DB0">
                            <name>FromNanoseconds(long nanoseconds)</name>
                            <syntax>public static nothrow Duration FromNanoseconds(long nanoseconds);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nanoseconds</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                        </function>
                        <function id="member_function_FromSeconds_Duration_ED6D87A2F899BB1FD28C0293E6F4694CE2D31DFA">
                            <name>FromSeconds(long seconds)</name>
                            <syntax>public static nothrow Duration FromSeconds(long seconds);</syntax>
                            <parameters>
                                <parameter>
                                    <name>seconds</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_Endl_8E2537FC3949E4C290D6CAA3B15C71D5697AC895">
                    <name>Endl</name>
                    <groupName>Endl</groupName>
                    <syntax> public class Endl;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Endl_96F4DD51A48450AD9254E851984F02D02AEE28B2">
                            <name>Endl()</name>
                            <syntax>public nothrow inline Endl();</syntax>
                        </constructor>
                    </constructors>
                </class>
                <class id="class_EqualTo_T_U_14A2E50AADEF78C814505DAF8677BBAB6EA3F9EA">
                    <name>EqualTo&lt;T, U></name>
                    <groupName>EqualTo</groupName>
                    <syntax> public class EqualTo&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699647">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699648">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                    <constraint>
                        <concept ref="concept_EqualityComparable_DDA76B65E48DE418ED1651912DC91E6BCF9A6B60">
                            <params>
                                <type ref="8699647"/>
                                <type ref="8699648"/>
                            </params>
                        </concept>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_EqualTo_T_U_EF44BBEF6A2C549B5AC36029DFA484ECC680BB47">
                            <name>operator()(const T&amp; left, const U&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const U&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.99"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.100"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                    </functions>
                </class>
                <class id="class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E">
                    <name>EqualTo&lt;T></name>
                    <groupName>EqualTo</groupName>
                    <syntax> public class EqualTo&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699645">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                    <constraint>
                        <type ref="8699645"/>
                        <connector>is</connector>
                        <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_EqualTo_T_8C6C4E80167CF2288BCDC097EA03BB199CA69C76">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.98"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.98"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                    </functions>
                </class>
                <class id="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989">
                    <name>Exception</name>
                    <groupName>Exception</groupName>
                    <syntax> public class Exception;</syntax>
                    <constructors>
                        <constructor id="constructor_Exception_A65EEDA06AE7D97BE82E1650263EE003A2A82C65">
                            <name>Exception(const String&lt;char>&amp; message_)</name>
                            <syntax>public nothrow Exception(const String&lt;char>&amp; message_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Message_Exception_F05211DA566BD657837E945496D33235C0715BAB">
                            <name>Message() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Message() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                        <function id="member_function_StackTrace_Exception_4209F901AF311F49A160C2F34CFD4DD649B00408">
                            <name>StackTrace() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; StackTrace() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                        <function id="member_function_ToString_Exception_F53F4F0B0FFE04946D55DFAC8B39D2875E2B32DF">
                            <name>ToString() const</name>
                            <syntax>public nothrow virtual String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.8700206"/>
                        </function>
                    </functions>
                </class>
                <class id="class_ExceptionPtr_3E313CB08B225E0124692C11F3BF8F26E971600C">
                    <name>ExceptionPtr</name>
                    <groupName>ExceptionPtr</groupName>
                    <syntax> public class ExceptionPtr;</syntax>
                    <constructors>
                        <constructor id="default_constructor_ExceptionPtr_CDEB0EA5D60675496BE9C584111542C7BB6CF554">
                            <name>ExceptionPtr()</name>
                            <syntax>public nothrow ExceptionPtr();</syntax>
                        </constructor>
                        <constructor id="constructor_ExceptionPtr_2A2B294A6D2DA8E484B0C775E48F8D9BFC569B67">
                            <name>ExceptionPtr(void* exception_, ulong exceptionClassId_)</name>
                            <syntax>public nothrow ExceptionPtr(void* exception_, ulong exceptionClassId_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>exception_</name>
                                    <type ref="type.8699217"/>
                                </parameter>
                                <parameter>
                                    <name>exceptionClassId_</name>
                                    <type ref="type.8699073"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Exception_ExceptionPtr_7038D6AA666D0F81707FFD4675665ED8AAE66255">
                            <name>Exception() const</name>
                            <syntax>public nothrow inline void* Exception() const;</syntax>
                            <returnType ref="type.8699217"/>
                        </function>
                        <function id="member_function_ExceptionClassId_ExceptionPtr_0A169F2ACA949C55B7415DE78C31B6AECF1DC9E5">
                            <name>ExceptionClassId() const</name>
                            <syntax>public nothrow inline ulong ExceptionClassId() const;</syntax>
                            <returnType ref="type.8699073"/>
                        </function>
                    </functions>
                </class>
                <class id="class_Greater_T_U_8097A7A2BB5CBC62974405469E34F560A2A4561A">
                    <name>Greater&lt;T, U></name>
                    <groupName>Greater</groupName>
                    <syntax> public class Greater&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699662">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699663">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                    <constraint>
                        <concept ref="concept_LessThanComparable_1379E4E0FDC9326039B5F717F269D6FD46537B48">
                            <params>
                                <type ref="8699662"/>
                                <type ref="8699663"/>
                            </params>
                        </concept>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Greater_T_U_B2163A8CE91D5C10305059C0277F69C938C61C0B">
                            <name>operator()(const T&amp; left, const U&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const U&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.108"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.109"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                    </functions>
                </class>
                <class id="class_Greater_T_56F5515BC602FB40A9BE53A6DC993CBA68A6C7B3">
                    <name>Greater&lt;T></name>
                    <groupName>Greater</groupName>
                    <syntax> public class Greater&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699660">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                    <constraint>
                        <type ref="8699660"/>
                        <connector>is</connector>
                        <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Greater_T_959E41D9E1F9F0EEA007A88D1E3CA23189FE5CC7">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.107"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.107"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                    </functions>
                </class>
                <class id="class_GreaterOrEqualTo_T_U_14D473CB3BBA1A1EF7E93DE4077EE3698F3D35B2">
                    <name>GreaterOrEqualTo&lt;T, U></name>
                    <groupName>GreaterOrEqualTo</groupName>
                    <syntax> public class GreaterOrEqualTo&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699672">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699673">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                    <constraint>
                        <concept ref="concept_LessThanComparable_1379E4E0FDC9326039B5F717F269D6FD46537B48">
                            <params>
                                <type ref="8699672"/>
                                <type ref="8699673"/>
                            </params>
                        </concept>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_GreaterOrEqualTo_T_U_7E41B545B0A05D693DD4C13A529BC47F2135F299">
                            <name>operator()(const T&amp; left, const U&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const U&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.114"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.115"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                    </functions>
                </class>
                <class id="class_GreaterOrEqualTo_T_D83F542E1B6C6AB124B1053122D7FA664A7A913A">
                    <name>GreaterOrEqualTo&lt;T></name>
                    <groupName>GreaterOrEqualTo</groupName>
                    <syntax> public class GreaterOrEqualTo&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699670">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                    <constraint>
                        <type ref="8699670"/>
                        <connector>is</connector>
                        <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_GreaterOrEqualTo_T_97DD6B043962EF378CA20DAEE5909D139DD94022">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.113"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.113"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                    </functions>
                </class>
                <class id="class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09">
                    <name>Identity&lt;T></name>
                    <groupName>Identity</groupName>
                    <syntax> public class Identity&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699643">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                    <constraint>
                        <type ref="8699643"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Identity_T_42E164CADBD884CF0CD70FC93FE378A71150977F">
                            <name>operator()(const T&amp; x) const</name>
                            <syntax>public nothrow inline const T&amp; operator()(const T&amp; x) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.97"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.97"/>
                        </function>
                    </functions>
                </class>
                <class id="class_Less_T_U_22FB6450300AEAA1A9EC326C6610B50C250EE819">
                    <name>Less&lt;T, U></name>
                    <groupName>Less</groupName>
                    <syntax> public class Less&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699657">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699658">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                    <constraint>
                        <concept ref="concept_LessThanComparable_1379E4E0FDC9326039B5F717F269D6FD46537B48">
                            <params>
                                <type ref="8699657"/>
                                <type ref="8699658"/>
                            </params>
                        </concept>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Less_T_U_FCCCCFCB7B88CF34343E1D5982DE0CC35F7B59D0">
                            <name>operator()(const T&amp; left, const U&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const U&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.105"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.106"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                    </functions>
                </class>
                <class id="class_Less_T_F840BD6533DFD3706784C819E04FA4FE41C4F3D2">
                    <name>Less&lt;T></name>
                    <groupName>Less</groupName>
                    <syntax> public class Less&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699655">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                    <constraint>
                        <type ref="8699655"/>
                        <connector>is</connector>
                        <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Less_T_8C16DA6B5C03289B1ACDC73FA5A7BE72C2529F1F">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.104"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.104"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                    </functions>
                </class>
                <class id="class_LessOrEqualTo_T_U_6A014DB3656C60BE872B2EF7005C7C65535BC3FB">
                    <name>LessOrEqualTo&lt;T, U></name>
                    <groupName>LessOrEqualTo</groupName>
                    <syntax> public class LessOrEqualTo&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699667">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699668">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                    <constraint>
                        <concept ref="concept_LessThanComparable_1379E4E0FDC9326039B5F717F269D6FD46537B48">
                            <params>
                                <type ref="8699667"/>
                                <type ref="8699668"/>
                            </params>
                        </concept>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_LessOrEqualTo_T_U_B05EFBE7CEAD86451D6DF048B19DC7BB806B15C7">
                            <name>operator()(const T&amp; left, const U&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const U&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.111"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.112"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                    </functions>
                </class>
                <class id="class_LessOrEqualTo_T_251E3B4B29A8A84484BDE851F06605C1B3E70332">
                    <name>LessOrEqualTo&lt;T></name>
                    <groupName>LessOrEqualTo</groupName>
                    <syntax> public class LessOrEqualTo&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699665">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                    <constraint>
                        <type ref="8699665"/>
                        <connector>is</connector>
                        <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_LessOrEqualTo_T_CEA6B34FB7D9A3566721602B815DF0F8442DE2E2">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.110"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.110"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                    </functions>
                </class>
                <class id="class_LogicalAnd_T_E35A5C58E5FFDEFC94BC4F4A396B315039492654">
                    <name>LogicalAnd&lt;T></name>
                    <groupName>LogicalAnd</groupName>
                    <syntax> public class LogicalAnd&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699675">
                            <name>T</name>
                            <default>bool</default>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.8700854"/>
                    <functions>
                        <function id="member_function_op_apply_LogicalAnd_T_EF241E9479DA8E0319F6610A8FF97251F517A470">
                            <name>operator()(bool left, bool right) const</name>
                            <syntax>public nothrow inline bool operator()(bool left, bool right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                    </functions>
                </class>
                <class id="class_LogicalNot_T_8969C1691917DD5CA5D11CA01EF0BFCBDC2D486E">
                    <name>LogicalNot&lt;T></name>
                    <groupName>LogicalNot</groupName>
                    <syntax> public class LogicalNot&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699679">
                            <name>T</name>
                            <default>bool</default>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.8700872"/>
                    <functions>
                        <function id="member_function_op_apply_LogicalNot_T_7863084655A0BCE91E861E1919854031471C83ED">
                            <name>operator()(bool operand) const</name>
                            <syntax>public nothrow inline bool operator()(bool operand) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>operand</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                    </functions>
                </class>
                <class id="class_LogicalOr_T_7F2F87F001DF8F564ABE5F63CCA120661CE54294">
                    <name>LogicalOr&lt;T></name>
                    <groupName>LogicalOr</groupName>
                    <syntax> public class LogicalOr&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699677">
                            <name>T</name>
                            <default>bool</default>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.8700854"/>
                    <functions>
                        <function id="member_function_op_apply_LogicalOr_T_96E0D8CF97F7F38B2DF3EFDA2358E4C80E53D888">
                            <name>operator()(bool left, bool right) const</name>
                            <syntax>public nothrow inline bool operator()(bool left, bool right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                    </functions>
                </class>
                <class id="class_Minus_T_42FA343108F2183A5C120B0B9F768BE1A4618D2E">
                    <name>Minus&lt;T></name>
                    <groupName>Minus</groupName>
                    <syntax> public class Minus&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699627">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                    <constraint>
                        <type ref="8699627"/>
                        <connector>is</connector>
                        <concept ref="concept_AdditiveGroup_F97CD80E909011A4ADD1F7D285678312B63559D8"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Minus_T_EE33C25A5093AB70B79C5AC9C9F52DB39999762F">
                            <name>operator()(const T&amp; a, const T&amp; b) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; a, const T&amp; b) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>a</name>
                                    <type ref="type.93"/>
                                </parameter>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.93"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699627"/>
                        </function>
                    </functions>
                </class>
                <class id="class_Multiplies_T_B10569FE25E0D6EA8440D826A60699DA1E9E1D98">
                    <name>Multiplies&lt;T></name>
                    <groupName>Multiplies</groupName>
                    <syntax> public class Multiplies&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699629">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                    <constraint>
                        <type ref="8699629"/>
                        <connector>is</connector>
                        <concept ref="concept_MultiplicativeSemigroup_E0D9C06FDD3386C79EFB595ABA20C0B553593F5B"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Multiplies_T_DEBCDEB20BE65AD22C76E2C35B9969FA7E67F136">
                            <name>operator()(const T&amp; a, const T&amp; b) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; a, const T&amp; b) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>a</name>
                                    <type ref="type.94"/>
                                </parameter>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.94"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699629"/>
                        </function>
                    </functions>
                </class>
                <class id="class_Negate_T_2B93AADB99FFFDB5799415B556E03B1B6C1FA625">
                    <name>Negate&lt;T></name>
                    <groupName>Negate</groupName>
                    <syntax> public class Negate&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699625">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                    <constraint>
                        <type ref="8699625"/>
                        <connector>is</connector>
                        <concept ref="concept_AdditiveGroup_F97CD80E909011A4ADD1F7D285678312B63559D8"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Negate_T_A6657661CE7013CCD484CC3922D5A7CCAA8A8A02">
                            <name>operator()(const T&amp; a) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; a) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>a</name>
                                    <type ref="type.92"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699625"/>
                        </function>
                    </functions>
                </class>
                <class id="class_NotEqualTo_T_U_5BC868D78BD4259D374B69CB22FA044DD89F0C99">
                    <name>NotEqualTo&lt;T, U></name>
                    <groupName>NotEqualTo</groupName>
                    <syntax> public class NotEqualTo&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699652">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699653">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                    <constraint>
                        <concept ref="concept_EqualityComparable_DDA76B65E48DE418ED1651912DC91E6BCF9A6B60">
                            <params>
                                <type ref="8699652"/>
                                <type ref="8699653"/>
                            </params>
                        </concept>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_NotEqualTo_T_U_ED51C46A3641ACE39939742E4D86BEE8F6580F75">
                            <name>operator()(const T&amp; left, const U&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const U&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.102"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.103"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                    </functions>
                </class>
                <class id="class_NotEqualTo_T_3EE4DF15E49DBA0F6BBF345CD91378E1CCF64AF5">
                    <name>NotEqualTo&lt;T></name>
                    <groupName>NotEqualTo</groupName>
                    <syntax> public class NotEqualTo&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699650">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                    <constraint>
                        <type ref="8699650"/>
                        <connector>is</connector>
                        <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_NotEqualTo_T_33A58B99A662A88EB62E2EEF270DEB55BD84917E">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.101"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.101"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                    </functions>
                </class>
                <class id="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9">
                    <name>Pair&lt;T, U></name>
                    <groupName>Pair</groupName>
                    <syntax> public class Pair&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699770">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699771">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="8699770"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699771"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <constructors>
                        <constructor id="default_constructor_Pair_T_U_D7D7FFB0299D5D3DB78A8353ED735645A0EE5EC6">
                            <name>Pair&lt;T, U>()</name>
                            <syntax>public nothrow Pair&lt;T, U>();</syntax>
                        </constructor>
                        <constructor id="constructor_Pair_T_U_CEE157D4B032C6618F5ECE320EDA4038E929A794">
                            <name>Pair&lt;T, U>(const T&amp; first_, const U&amp; second_)</name>
                            <syntax>public Pair&lt;T, U>(const T&amp; first_, const U&amp; second_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>first_</name>
                                    <type ref="type.181"/>
                                </parameter>
                                <parameter>
                                    <name>second_</name>
                                    <type ref="type.182"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <memberVariables>
                        <memberVariable id="variable_first_22F5053A4BAE9EF643CF2A3EED3B0265315EA848">
                            <name>first</name>
                            <syntax>public T first;</syntax>
                            <type ref="8699770"/>
                        </memberVariable>
                        <memberVariable id="variable_second_A1FBA81A34559C5738A1495A9B4859E26164E232">
                            <name>second</name>
                            <syntax>public U second;</syntax>
                            <type ref="8699771"/>
                        </memberVariable>
                    </memberVariables>
                </class>
                <class id="class_Plus_T_A04F66A1C888E4BFBAF2F85FF94CD1A38D050A00">
                    <name>Plus&lt;T></name>
                    <groupName>Plus</groupName>
                    <syntax> public class Plus&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699622">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                    <constraint>
                        <type ref="8699622"/>
                        <connector>is</connector>
                        <concept ref="concept_AdditiveSemigroup_A6AEA5AA906561975AEB0E030818D6AB2DFEE63A"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Plus_T_F3A329DD0ACCC2FB307228498C72A0D6B6369528">
                            <name>operator()(const T&amp; a, const T&amp; b) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; a, const T&amp; b) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>a</name>
                                    <type ref="type.91"/>
                                </parameter>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.91"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699622"/>
                        </function>
                    </functions>
                </class>
                <class id="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484">
                    <name>RandomAccessIter&lt;T, R, P></name>
                    <groupName>RandomAccessIter</groupName>
                    <syntax> public class RandomAccessIter&lt;T, R, P>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699791">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699792">
                            <name>R</name>
                        </templateParameter>
                        <templateParameter id="8699793">
                            <name>P</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="default_constructor_RandomAccessIter_T_R_P_E9E6BFEBC130306D9DB95554313DDD489D1D1C09">
                            <name>RandomAccessIter&lt;T, R, P>()</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;T, R, P>();</syntax>
                        </constructor>
                        <constructor id="constructor_RandomAccessIter_T_R_P_C99E8789C360D0C5CF4AC6F005E703B94BA08B03">
                            <name>RandomAccessIter&lt;T, R, P>(P ptr_)</name>
                            <syntax>public nothrow inline explicit RandomAccessIter&lt;T, R, P>(P ptr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ptr_</name>
                                    <type ref="8699793"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Ptr_RandomAccessIter_T_R_P_D2545B599EB3DD0359D657513DE21B8CF84C1CB9">
                            <name>Ptr() const</name>
                            <syntax>public nothrow inline P Ptr() const;</syntax>
                            <returnType ref="8699793"/>
                        </function>
                        <function id="member_function_op_star_RandomAccessIter_T_R_P_E4A2A9B832DC03703065282772AAAA1492625471">
                            <name>operator*()</name>
                            <syntax>public nothrow inline R operator*();</syntax>
                            <returnType ref="8699792"/>
                        </function>
                        <function id="member_function_op_plusplus_RandomAccessIter_T_R_P_1F1D91C1D03369BB4E622234F491EB7F1D7E1140">
                            <name>operator++()</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;T, R, P>&amp; operator++();</syntax>
                            <returnType ref="type.8701807"/>
                        </function>
                        <function id="member_function_op_minusminus_RandomAccessIter_T_R_P_BC412447B992C9821663F715887007D54D6304D7">
                            <name>operator--()</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;T, R, P>&amp; operator--();</syntax>
                            <returnType ref="type.8701807"/>
                        </function>
                        <function id="member_function_op_arrow_RandomAccessIter_T_R_P_88A6DD201CC54B526099C7C37B02554BF6503AAB">
                            <name>operator->()</name>
                            <syntax>public nothrow inline P operator->();</syntax>
                            <returnType ref="8699793"/>
                        </function>
                        <function id="member_function_op_index_RandomAccessIter_T_R_P_935176423651EBBD6B8A9F2DF9AE06689F11FB8F">
                            <name>operator[](long index)</name>
                            <syntax>public nothrow inline R operator[](long index);</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699792"/>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_PointerType_4E87D629BA903C584EDE5690C4107BE3C8775FCF">
                            <name>PointerType</name>
                            <syntax>public typedef P PointerType;</syntax>
                            <type ref="8699793"/>
                        </typedef>
                        <typedef id="typedef_ReferenceType_BD25E752C01E4593A65C2CD6C4EA7159BD3E1E92">
                            <name>ReferenceType</name>
                            <syntax>public typedef R ReferenceType;</syntax>
                            <type ref="8699792"/>
                        </typedef>
                        <typedef id="typedef_ValueType_0FEB2649456ADA80D4AFA2D28FCA98803B47F33F">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="8699791"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071">
                    <name>Rel&lt;Argument></name>
                    <groupName>Rel</groupName>
                    <syntax> public class Rel&lt;Argument>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699641">
                            <name>Argument</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_BinaryPred_Argument_Argument_3B70D6E5573795215FFB8A4139EAC50AA19A895A"/>
                    <constraint>
                        <type ref="8699641"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <typedefs>
                        <typedef id="typedef_Domain_AA016DF8DEBE9C61C532847ED72CCD16081ECE8B">
                            <name>Domain</name>
                            <syntax>public typedef Argument Domain;</syntax>
                            <type ref="8699641"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_Remainder_T_FE01252D1C3D34D2A8358028C0C92616A4A54BE1">
                    <name>Remainder&lt;T></name>
                    <groupName>Remainder</groupName>
                    <syntax> public class Remainder&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699634">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                    <constraint>
                        <type ref="8699634"/>
                        <connector>is</connector>
                        <concept ref="concept_EuclideanSemiring_0963A0023F004A1F3DA33F82504C5F5A55402241"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Remainder_T_E4B5769D152D337977344B0963D56E46A5B9EE85">
                            <name>operator()(const T&amp; a, const T&amp; b) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; a, const T&amp; b) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>a</name>
                                    <type ref="type.96"/>
                                </parameter>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.96"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699634"/>
                        </function>
                    </functions>
                </class>
                <class id="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282">
                    <name>SelectFirst&lt;T, U></name>
                    <groupName>SelectFirst</groupName>
                    <syntax> public class SelectFirst&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699779">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699780">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_UnaryFun_Pair_T_U_T_6C06CE9A98778C3B50A77283B333E2C76F881D7D"/>
                    <constraint>
                        <type ref="8699779"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699780"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_SelectFirst_T_U_6E585742FFA14E0DBC2331BF947D8D1223508410">
                            <name>operator()(const Pair&lt;T, U>&amp; p) const</name>
                            <syntax>public nothrow inline const T&amp; operator()(const Pair&lt;T, U>&amp; p) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>p</name>
                                    <type ref="type.185"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.183"/>
                        </function>
                    </functions>
                </class>
                <class id="class_SelectSecond_T_U_6B42DA73E58D1044102625EF244FA1CB02A13170">
                    <name>SelectSecond&lt;T, U></name>
                    <groupName>SelectSecond</groupName>
                    <syntax> public class SelectSecond&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699782">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699783">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_UnaryFun_Pair_T_U_U_609C7CFCC40BF059FA8523A4C125711C279AE266"/>
                    <constraint>
                        <type ref="8699782"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699783"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_SelectSecond_T_U_38899BF9E4BB8BF266B0500E8282C1B7F3E14C51">
                            <name>operator()(const Pair&lt;T, U>&amp; p) const</name>
                            <syntax>public nothrow inline const U&amp; operator()(const Pair&lt;T, U>&amp; p) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>p</name>
                                    <type ref="type.188"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.187"/>
                        </function>
                    </functions>
                </class>
                <class id="class_ShareableFromThis_T_77C6ADA1F44650830C3217EE01FADA865F0D2818">
                    <name>ShareableFromThis&lt;T></name>
                    <groupName>ShareableFromThis</groupName>
                    <syntax> public class ShareableFromThis&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699868">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <functions>
                        <function id="member_function_GetSharedFromThis_ShareableFromThis_T_67A25BC7F974DDDFE5F015F1D2BD6C22FB14703A">
                            <name>GetSharedFromThis() const</name>
                            <syntax>public nothrow SharedPtr&lt;T> GetSharedFromThis() const;</syntax>
                            <returnType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                        </function>
                        <function id="member_function_GetWeakThis_ShareableFromThis_T_67A2CE6F8286470E92EA2EAF1F9D5FE6B4C83909">
                            <name>GetWeakThis()</name>
                            <syntax>public nothrow WeakPtr&lt;T>&amp; GetWeakThis();</syntax>
                            <returnType ref="type.8702544"/>
                        </function>
                    </functions>
                </class>
                <class id="class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076">
                    <name>SharedCount&lt;T></name>
                    <groupName>SharedCount</groupName>
                    <syntax> public class SharedCount&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699850">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="default_constructor_SharedCount_T_D71FE4FE74EBDA32E5BD9CC3DC04185780F9D794">
                            <name>SharedCount&lt;T>()</name>
                            <syntax>public nothrow SharedCount&lt;T>();</syntax>
                        </constructor>
                        <constructor id="constructor_SharedCount_T_AAE708B51DCAD00FF9897CED9FEB72D0FBF2763F">
                            <name>SharedCount&lt;T>(Counter&lt;T>* counter_)</name>
                            <syntax>public nothrow SharedCount&lt;T>(Counter&lt;T>* counter_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>counter_</name>
                                    <type ref="type.8702122"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="move_constructor_SharedCount_T_48221AAE06128AA3785A5AC0F07826B9D4717615">
                            <name>SharedCount&lt;T>(SharedCount&lt;T>&amp;&amp; that)</name>
                            <syntax>public nothrow SharedCount&lt;T>(SharedCount&lt;T>&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.225"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_SharedCount_T_F2519B5D5A19CCF9255C44C59B3ADE76F4EB211C">
                            <name>SharedCount&lt;T>(T* ptr_)</name>
                            <syntax>public nothrow SharedCount&lt;T>(T* ptr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ptr_</name>
                                    <type ref="type.8702124"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_SharedCount_T_EB7E8BFE7EEFD502F24F3607A976BBAA8C95135C">
                            <name>SharedCount&lt;T>(const SharedCount&lt;T>&amp; that)</name>
                            <syntax>public nothrow SharedCount&lt;T>(const SharedCount&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8702120"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_SharedCount_T_9E4F79DE76D065C338A00A2F04577CAF3759D7A4">
                            <name>SharedCount&lt;T>(const WeakCount&lt;T>&amp; that)</name>
                            <syntax>public nothrow SharedCount&lt;T>(const WeakCount&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8702135"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_GetCounter_SharedCount_T_51B68C7924D5B7EFD1238D4787AA6DBDC25EC332">
                            <name>GetCounter() const</name>
                            <syntax>public nothrow Counter&lt;T>* GetCounter() const;</syntax>
                            <returnType ref="type.8702122"/>
                        </function>
                        <function id="member_function_GetUseCount_SharedCount_T_7DDD2A21044DE00B4BC93E374D78F30C025B1040">
                            <name>GetUseCount() const</name>
                            <syntax>public nothrow int GetUseCount() const;</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_IsUnique_SharedCount_T_CA83B9DB28409070400A83CE85BE854545763F70">
                            <name>IsUnique() const</name>
                            <syntax>public nothrow bool IsUnique() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Swap_SharedCount_T_7930A8509C3E9FCE5B84B0C40E7AEE9076E5DC2E">
                            <name>Swap(SharedCount&lt;T>&amp; that)</name>
                            <syntax>public nothrow void Swap(SharedCount&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8702117"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_op_assign_651181D2AC9E62A62FB0FFAE6A67BD4E35FC3174">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_SharedCount_T_0F4B0BC7A160C9AF1021707DC92C2BFFBB079A1D">
                                    <name>operator=(SharedCount&lt;T>&amp;&amp; that)</name>
                                    <syntax>public nothrow void operator=(SharedCount&lt;T>&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.225"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_SharedCount_T_88747160D0204B4C91D01844FE7275D503122602">
                                    <name>operator=(const SharedCount&lt;T>&amp; that)</name>
                                    <syntax>public nothrow void operator=(const SharedCount&lt;T>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.8702120"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F">
                    <name>SharedPtr&lt;T></name>
                    <groupName>SharedPtr</groupName>
                    <syntax> public class SharedPtr&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699860">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="default_constructor_SharedPtr_T_C7296DC1B3B3F760CB8D14931DF7813A5AE392E1">
                            <name>SharedPtr&lt;T>()</name>
                            <syntax>public nothrow SharedPtr&lt;T>();</syntax>
                        </constructor>
                        <constructor id="move_constructor_SharedPtr_T_2C3720A640C6B82ABF952B9000560363394F4F45">
                            <name>SharedPtr&lt;T>(SharedPtr&lt;T>&amp;&amp; that)</name>
                            <syntax>public nothrow SharedPtr&lt;T>(SharedPtr&lt;T>&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.243"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_SharedPtr_T_5F67D75B136F9AF03B18A10E9127DE762EE728E8">
                            <name>SharedPtr&lt;T>(T* ptr_)</name>
                            <syntax>public nothrow explicit SharedPtr&lt;T>(T* ptr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ptr_</name>
                                    <type ref="type.8702306"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_SharedPtr_T_47C4D286A301D683F0B6882B61D3087EAA12FDD7">
                            <name>SharedPtr&lt;T>(T* ptr_, const SharedCount&lt;T>&amp; count_)</name>
                            <syntax>public nothrow SharedPtr&lt;T>(T* ptr_, const SharedCount&lt;T>&amp; count_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ptr_</name>
                                    <type ref="type.8702306"/>
                                </parameter>
                                <parameter>
                                    <name>count_</name>
                                    <type ref="type.8702302"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_SharedPtr_T_6074393EDA60499076BB80B2DCB1B20844901260">
                            <name>SharedPtr&lt;T>(const SharedPtr&lt;T>&amp; that)</name>
                            <syntax>public nothrow SharedPtr&lt;T>(const SharedPtr&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8702296"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_SharedPtr_T_FB15102A33C024C58CC0B7E56586301409C712E9">
                            <name>SharedPtr&lt;T>(const WeakPtr&lt;T>&amp; that)</name>
                            <syntax>public nothrow SharedPtr&lt;T>(const WeakPtr&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8702325"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Get_SharedPtr_T_C19CF589E05801DC9FB5B4790AFF4814F00289AE">
                            <name>Get() const</name>
                            <syntax>public nothrow inline T* Get() const;</syntax>
                            <returnType ref="type.8702306"/>
                        </function>
                        <function id="member_function_GetCount_SharedPtr_T_1AA7FAC4873B6F4B849663025924A8775B92416D">
                            <name>GetCount() const</name>
                            <syntax>public nothrow inline const SharedCount&lt;T>&amp; GetCount() const;</syntax>
                            <returnType ref="type.8702302"/>
                        </function>
                        <function id="member_function_GetPtr_SharedPtr_T_5F375696F2B3C2DB1D8F4A1D4B9199A2D2980331">
                            <name>GetPtr() const</name>
                            <syntax>public nothrow inline T* GetPtr() const;</syntax>
                            <returnType ref="type.8702306"/>
                        </function>
                        <function id="member_function_GetUseCount_SharedPtr_T_A0E7D257636DDC2CFD12312DE75977B90BF3FCEB">
                            <name>GetUseCount() const</name>
                            <syntax>public nothrow int GetUseCount() const;</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_IsNull_SharedPtr_T_EECEE294376F769DE15CAB82AD7B31B6B299B4B4">
                            <name>IsNull() const</name>
                            <syntax>public nothrow inline bool IsNull() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_IsUnique_SharedPtr_T_C23C84987C5BA54AF70296EF3316DAB1F9E44D54">
                            <name>IsUnique() const</name>
                            <syntax>public nothrow bool IsUnique() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="function_group_Reset_8B2B9FCFC988FB0F9B7824E0F656EA578066DA8E">
                            <name>Reset</name>
                            <overloads>
                                <overload id="member_function_Reset_SharedPtr_T_0C7BD5E7A6FC70AF9C8DB6B0C20E116FE55CDBEA">
                                    <name>Reset()</name>
                                    <syntax>public nothrow void Reset();</syntax>
                                </overload>
                                <overload id="member_function_Reset_SharedPtr_T_89EB9B504B6AF6E963EDD6AD8E9F40EBF4975421">
                                    <name>Reset(T* ptr_)</name>
                                    <syntax>public nothrow void Reset(T* ptr_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ptr_</name>
                                            <type ref="type.8702306"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Swap_SharedPtr_T_0975002498656FAAAAB1A4F27F81A327F88CCD6F">
                            <name>Swap(SharedPtr&lt;T>&amp; that)</name>
                            <syntax>public nothrow void Swap(SharedPtr&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8702293"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_op_star_SharedPtr_T_B499DD683163B35CB0D9550686B4045F11749767">
                            <name>operator*() const</name>
                            <syntax>public nothrow inline T&amp; operator*() const;</syntax>
                            <returnType ref="type.8702307"/>
                        </function>
                        <function id="member_function_op_arrow_SharedPtr_T_1ED839CE51A11AAD76D698B9CC1ADA9FBABAD121">
                            <name>operator->() const</name>
                            <syntax>public nothrow inline T* operator->() const;</syntax>
                            <returnType ref="type.8702306"/>
                        </function>
                        <function id="function_group_op_assign_911549BA40FE44686D4FAD019B0CBDCBCAD90C73">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_SharedPtr_T_8E740980098D13C584CD5D16D5F14DADA0FEA72B">
                                    <name>operator=(SharedPtr&lt;T>&amp;&amp; that)</name>
                                    <syntax>public nothrow void operator=(SharedPtr&lt;T>&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.243"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_SharedPtr_T_D25DA09AD6C865D2C6DC53EB417F00745614D78D">
                                    <name>operator=(const SharedPtr&lt;T>&amp; that)</name>
                                    <syntax>public nothrow void operator=(const SharedPtr&lt;T>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.8702296"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_ShiftLeft_T_DAB649CF57196205F80F4D84BB4327636B5ABCF0">
                    <name>ShiftLeft&lt;T></name>
                    <groupName>ShiftLeft</groupName>
                    <syntax> public class ShiftLeft&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699689">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                    <constraint>
                        <type ref="8699689"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_ShiftLeft_T_9D6EF7465ABAB41348B261A402E313E059EC11A6">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.120"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.120"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699689"/>
                        </function>
                    </functions>
                </class>
                <class id="class_ShiftRight_T_1954DF2ABCC6CB200031ECB8BB6DB1F536A47027">
                    <name>ShiftRight&lt;T></name>
                    <groupName>ShiftRight</groupName>
                    <syntax> public class ShiftRight&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699691">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                    <constraint>
                        <type ref="8699691"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_ShiftRight_T_F72DF4B7B74EC89C3F1BC7F65327469E61A9D43A">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.121"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.121"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699691"/>
                        </function>
                    </functions>
                </class>
                <class id="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC">
                    <name>String&lt;CharT></name>
                    <groupName>String</groupName>
                    <syntax> public class String&lt;CharT>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699896">
                            <name>CharT</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="default_constructor_String_CharT_29D461A5530B53DD4D61100F8616E6F0141822A3">
                            <name>String&lt;CharT>()</name>
                            <syntax>public nothrow inline String&lt;CharT>();</syntax>
                        </constructor>
                        <constructor id="constructor_String_CharT_C5C879FC612EE2D50EB1EE1684871AF4523337FA">
                            <name>String&lt;CharT>(CharT c)</name>
                            <syntax>public nothrow inline String&lt;CharT>(CharT c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="8699896"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_String_CharT_B6AC189665FCCEA4073A58F7E0B5EB3AE37756DD">
                            <name>String&lt;CharT>(CharT c, long n)</name>
                            <syntax>public nothrow String&lt;CharT>(CharT c, long n);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="8699896"/>
                                </parameter>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="move_constructor_String_CharT_E94770D2E43443AC7FFB599590E0F661FA7E8E48">
                            <name>String&lt;CharT>(String&lt;CharT>&amp;&amp; that)</name>
                            <syntax>public nothrow String&lt;CharT>(String&lt;CharT>&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.277"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_String_CharT_54CEC635B6DB59333F8CE1A430F61D69DC60C950">
                            <name>String&lt;CharT>(const CharT* begin, const CharT* end)</name>
                            <syntax>public nothrow inline String&lt;CharT>(const CharT* begin, const CharT* end);</syntax>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="type.8702676"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="type.8702676"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_String_CharT_2CA8BDACF505B472EBB66EA1FE959881B47C557B">
                            <name>String&lt;CharT>(const CharT* chars_)</name>
                            <syntax>public nothrow inline String&lt;CharT>(const CharT* chars_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>chars_</name>
                                    <type ref="type.8702676"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_String_CharT_81F1390E4DFBC7446385F4FBAD1D6A04D7D5454C">
                            <name>String&lt;CharT>(const CharT* chars_, long length_)</name>
                            <syntax>public nothrow inline String&lt;CharT>(const CharT* chars_, long length_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>chars_</name>
                                    <type ref="type.8702676"/>
                                </parameter>
                                <parameter>
                                    <name>length_</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_String_CharT_C24FB35F57832868D348468D7A10FD0B1D5DEACC">
                            <name>String&lt;CharT>(const String&lt;CharT>&amp; that)</name>
                            <syntax>public nothrow String&lt;CharT>(const String&lt;CharT>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8702674"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Append_3384F1786D16399F8000E0DDE0BD69BC7F1EDFD5">
                            <name>Append</name>
                            <overloads>
                                <overload id="member_function_Append_String_CharT_B01C1D93547372DB44E782859F4E6A44E528B92C">
                                    <name>Append(CharT c)</name>
                                    <syntax>public nothrow inline String&lt;CharT>&amp; Append(CharT c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="8699896"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8702671"/>
                                </overload>
                                <overload id="member_function_Append_String_CharT_4D9786F435FA6AB4F1D25BD022441BAD27001E07">
                                    <name>Append(CharT c, long count)</name>
                                    <syntax>public nothrow String&lt;CharT>&amp; Append(CharT c, long count);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="8699896"/>
                                        </parameter>
                                        <parameter>
                                            <name>count</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8702671"/>
                                </overload>
                                <overload id="member_function_Append_String_CharT_945B02DC7DD183AADA4D8824D22E409DB6D621C9">
                                    <name>Append(const CharT* that)</name>
                                    <syntax>public nothrow inline String&lt;CharT>&amp; Append(const CharT* that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.8702676"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8702671"/>
                                </overload>
                                <overload id="member_function_Append_String_CharT_4DE9A874DCD924B4554CF01ACD805D43F5B29243">
                                    <name>Append(const CharT* that, long count)</name>
                                    <syntax>public nothrow inline String&lt;CharT>&amp; Append(const CharT* that, long count);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.8702676"/>
                                        </parameter>
                                        <parameter>
                                            <name>count</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8702671"/>
                                </overload>
                                <overload id="member_function_Append_String_CharT_AF953C10EFCD2B4E0A06C4E60B009E06D526C70F">
                                    <name>Append(const String&lt;CharT>&amp; that)</name>
                                    <syntax>public nothrow inline String&lt;CharT>&amp; Append(const String&lt;CharT>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.8702674"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8702671"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Begin_B98DC3B4F443038D6BD2E554A73675CFA9803305">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_String_CharT_1C7434C5C1509FCB8273874A117A5F598D3CFF41">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline RandomAccessIter&lt;CharT, CharT&amp;, CharT*> Begin();</syntax>
                                    <returnType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                                </overload>
                                <overload id="member_function_Begin_String_CharT_E0456338F52474234FC4141ADEBF106AAC067EBC">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*> Begin() const;</syntax>
                                    <returnType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_String_CharT_806177B1DDE3BD1B90EF135EBA980FED4D4847E2">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*> CBegin() const;</syntax>
                            <returnType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                        </function>
                        <function id="member_function_CEnd_String_CharT_C4991ECD85C1097F0C6FE15EE33CA4715D7DF851">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*> CEnd() const;</syntax>
                            <returnType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                        </function>
                        <function id="member_function_Capacity_String_CharT_76ED7A77DBF553239117B6DB9A04ADF6E359EC5F">
                            <name>Capacity() const</name>
                            <syntax>public nothrow inline long Capacity() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_Chars_String_CharT_F23E248DC46A5AA9215CDB25B6779E94681FBAB6">
                            <name>Chars() const</name>
                            <syntax>public nothrow inline const CharT* Chars() const;</syntax>
                            <returnType ref="type.8702676"/>
                        </function>
                        <function id="member_function_Clear_String_CharT_555B7C51416BF9CB8DAFFD0D30A91B2B3C140EEA">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="function_group_End_719DE2F2551BE9D07997C1183D8FB03D35C4C789">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_String_CharT_7B9F5A2992AE503BB3BE810F9F18DFFE181EC279">
                                    <name>End()</name>
                                    <syntax>public nothrow inline RandomAccessIter&lt;CharT, CharT&amp;, CharT*> End();</syntax>
                                    <returnType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                                </overload>
                                <overload id="member_function_End_String_CharT_E6FD9A41937D7412DA86D5281CFDF75230C9B991">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*> End() const;</syntax>
                                    <returnType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_EndsWith_String_CharT_9AD74EFB156171E6E7D9A1F9F0BBCECD3BFB6768">
                            <name>EndsWith(const String&lt;CharT>&amp; suffix) const</name>
                            <syntax>public nothrow bool EndsWith(const String&lt;CharT>&amp; suffix) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>suffix</name>
                                    <type ref="type.8702674"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="function_group_Find_4B84A99C2D390EC22809407642D885E9FB71F039">
                            <name>Find</name>
                            <overloads>
                                <overload id="member_function_Find_String_CharT_B841E5EC43AA3BC57349C8F05C99ACCB1DCBE924">
                                    <name>Find(CharT x) const</name>
                                    <syntax>public nothrow inline long Find(CharT x) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="8699896"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699072"/>
                                </overload>
                                <overload id="member_function_Find_String_CharT_DAA3CEAF648C599B9E7F6EA97E51A6EB3D6EB692">
                                    <name>Find(CharT x, long start) const</name>
                                    <syntax>public nothrow inline long Find(CharT x, long start) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="8699896"/>
                                        </parameter>
                                        <parameter>
                                            <name>start</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699072"/>
                                </overload>
                                <overload id="member_function_Find_String_CharT_D3FA677990318357800CC8086E99ACEDFBC80592">
                                    <name>Find(const String&lt;CharT>&amp; s) const</name>
                                    <syntax>public nothrow inline long Find(const String&lt;CharT>&amp; s) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8702674"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699072"/>
                                </overload>
                                <overload id="member_function_Find_String_CharT_01FB92CBFE0DD605943DB57413C962DAE080E138">
                                    <name>Find(const String&lt;CharT>&amp; s, long start) const</name>
                                    <syntax>public nothrow long Find(const String&lt;CharT>&amp; s, long start) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8702674"/>
                                        </parameter>
                                        <parameter>
                                            <name>start</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699072"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_IsEmpty_String_CharT_EDEFC2684A6AD2925D2AACEE4DC82F21300E5F80">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Length_String_CharT_5DAD659AF865F217935177758B9A1E040AFCB58F">
                            <name>Length() const</name>
                            <syntax>public nothrow inline long Length() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="function_group_RFind_BACFEF7A7387DDC9E39403ADB72637B7C534D65B">
                            <name>RFind</name>
                            <overloads>
                                <overload id="member_function_RFind_String_CharT_501775BDD15C0720564A405C6EF819588108DA59">
                                    <name>RFind(CharT x) const</name>
                                    <syntax>public nothrow inline long RFind(CharT x) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="8699896"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699072"/>
                                </overload>
                                <overload id="member_function_RFind_String_CharT_2D089640FFDC7D86FD013DFF9D7072F59426072B">
                                    <name>RFind(CharT x, long start) const</name>
                                    <syntax>public nothrow inline long RFind(CharT x, long start) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="8699896"/>
                                        </parameter>
                                        <parameter>
                                            <name>start</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699072"/>
                                </overload>
                                <overload id="member_function_RFind_String_CharT_58B84AC6C40569DFDF021CC1C8C7F8F5F27EBCB4">
                                    <name>RFind(const String&lt;CharT>&amp; s) const</name>
                                    <syntax>public nothrow long RFind(const String&lt;CharT>&amp; s) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8702674"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699072"/>
                                </overload>
                                <overload id="member_function_RFind_String_CharT_587D6641177E9BD47CD43DF5E7DE4BE52057C69D">
                                    <name>RFind(const String&lt;CharT>&amp; s, long start) const</name>
                                    <syntax>public nothrow long RFind(const String&lt;CharT>&amp; s, long start) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8702674"/>
                                        </parameter>
                                        <parameter>
                                            <name>start</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699072"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Replace_String_CharT_325F62D7349D25B49FD18A0B817DFE37AE82ACC9">
                            <name>Replace(CharT oldChar, CharT newChar)</name>
                            <syntax>public nothrow void Replace(CharT oldChar, CharT newChar);</syntax>
                            <parameters>
                                <parameter>
                                    <name>oldChar</name>
                                    <type ref="8699896"/>
                                </parameter>
                                <parameter>
                                    <name>newChar</name>
                                    <type ref="8699896"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Reserve_String_CharT_7FDA55A0586C3FA2EE25F8AAEF303E7F7D7B91BD">
                            <name>Reserve(long minLen)</name>
                            <syntax>public nothrow void Reserve(long minLen);</syntax>
                            <parameters>
                                <parameter>
                                    <name>minLen</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Split_String_CharT_46D055873501619734E7B6570DE088B66B9E9E09">
                            <name>Split(CharT c)</name>
                            <syntax>public List&lt;String&lt;CharT>> Split(CharT c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="8699896"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8702695"/>
                        </function>
                        <function id="member_function_StartsWith_String_CharT_7D1AC2BA4ED593DFF9EC0D2527EA2BC1B6E4F55E">
                            <name>StartsWith(const String&lt;CharT>&amp; prefix) const</name>
                            <syntax>public nothrow bool StartsWith(const String&lt;CharT>&amp; prefix) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>prefix</name>
                                    <type ref="type.8702674"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="function_group_Substring_976CEF11C49F80197B71E45FC20642F4632852F5">
                            <name>Substring</name>
                            <overloads>
                                <overload id="member_function_Substring_String_CharT_4AED2BC96E1E901320F2BF6C86B5C85FD0FC2DE2">
                                    <name>Substring(long start) const</name>
                                    <syntax>public nothrow String&lt;CharT> Substring(long start) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>start</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                                </overload>
                                <overload id="member_function_Substring_String_CharT_752D88D116645EC0E27217EF5A6AA357FDD0EED9">
                                    <name>Substring(long start, long length) const</name>
                                    <syntax>public nothrow String&lt;CharT> Substring(long start, long length) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>start</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                        <parameter>
                                            <name>length</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_assign_1356B3AE4F4E47670036754E54B82BC70EA1B474">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_String_CharT_89252E277D79EF007E70C20EF909B651F7E70A1A">
                                    <name>operator=(String&lt;CharT>&amp;&amp; that)</name>
                                    <syntax>public nothrow inline void operator=(String&lt;CharT>&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.277"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_String_CharT_ADE27383DD8298C16CEE9196D89E8A00B028AC72">
                                    <name>operator=(const String&lt;CharT>&amp; that)</name>
                                    <syntax>public nothrow void operator=(const String&lt;CharT>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.8702674"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_index_FF0DC1C6F5497888CD78D46BC4C23547143573BC">
                            <name>operator[]</name>
                            <overloads>
                                <overload id="member_function_op_index_String_CharT_B93B2FD7AFA73DB078DF8D72CB2BAA9C0B764C9A">
                                    <name>operator[](long index)</name>
                                    <syntax>public nothrow inline CharT&amp; operator[](long index);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>index</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8702685"/>
                                </overload>
                                <overload id="member_function_op_index_String_CharT_FE1CC08D2926E284FE59EBAE679D64116E3597A6">
                                    <name>operator[](long index) const</name>
                                    <syntax>public nothrow inline CharT operator[](long index) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>index</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="8699896"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ConstIterator_FE780670FCE36D02CF204504FB1C7E61A6280F97">
                            <name>ConstIterator</name>
                            <syntax>public typedef RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*> ConstIterator;</syntax>
                            <type ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                        </typedef>
                        <typedef id="typedef_Iterator_D862C254B0415427201DBBCC0FFF06F2AE4EB964">
                            <name>Iterator</name>
                            <syntax>public typedef RandomAccessIter&lt;CharT, CharT&amp;, CharT*> Iterator;</syntax>
                            <type ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_TimePoint_BE09785FA47D4049B051C2D868BEEED92062875C">
                    <name>TimePoint</name>
                    <groupName>TimePoint</groupName>
                    <syntax> public class TimePoint;</syntax>
                    <constructors>
                        <constructor id="default_constructor_TimePoint_B60DE0C2F0B22F21D3A1B02BFB6B4A244F824E27">
                            <name>TimePoint()</name>
                            <syntax>public nothrow TimePoint();</syntax>
                        </constructor>
                        <constructor id="constructor_TimePoint_3E59DB962FFA92963CD17D701A005C510BCE9B16">
                            <name>TimePoint(long nanosecs_)</name>
                            <syntax>public nothrow explicit TimePoint(long nanosecs_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nanosecs_</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Rep_TimePoint_61D4486C917F669B00DF35DDB4BC2AFF07382F60">
                            <name>Rep() const</name>
                            <syntax>public nothrow inline long Rep() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                    </functions>
                </class>
                <class id="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646">
                    <name>UnaryFun&lt;Argument, Result></name>
                    <groupName>UnaryFun</groupName>
                    <syntax>abstract public class UnaryFun&lt;Argument, Result>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699615">
                            <name>Argument</name>
                        </templateParameter>
                        <templateParameter id="8699616">
                            <name>Result</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="8699615"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <typedefs>
                        <typedef id="typedef_ArgumentType_43EE83BEA312EF2F73DE967A7BB5FF423F6E344A">
                            <name>ArgumentType</name>
                            <syntax>public typedef Argument ArgumentType;</syntax>
                            <type ref="8699615"/>
                        </typedef>
                        <typedef id="typedef_ResultType_F6524AAC9844B81F930A040E6621E53472545B09">
                            <name>ResultType</name>
                            <syntax>public typedef Result ResultType;</syntax>
                            <type ref="8699616"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_UnaryPred_Argument_998EBBF0D75A93FF6E3871FF481847CF33A59C33">
                    <name>UnaryPred&lt;Argument></name>
                    <groupName>UnaryPred</groupName>
                    <syntax> public class UnaryPred&lt;Argument>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699636">
                            <name>Argument</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_UnaryFun_Argument_bool_4ABF8E4B6DF957D2063F0D3BDE00A838373AC968"/>
                    <constraint>
                        <type ref="8699636"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                </class>
                <class id="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009">
                    <name>UniquePtr&lt;T></name>
                    <groupName>UniquePtr</groupName>
                    <syntax> public class UniquePtr&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8700104">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="default_constructor_UniquePtr_T_E7EE1988EB13C505141511E876BBFEFE1C8D8707">
                            <name>UniquePtr&lt;T>()</name>
                            <syntax>public nothrow UniquePtr&lt;T>();</syntax>
                        </constructor>
                        <constructor id="constructor_UniquePtr_T_DD6D1101BC9A141DA69E2148ACA482C029FB9691">
                            <name>UniquePtr&lt;T>(T* ptr_)</name>
                            <syntax>public nothrow explicit UniquePtr&lt;T>(T* ptr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ptr_</name>
                                    <type ref="type.8705122"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="move_constructor_UniquePtr_T_B889669B1BA8F98EB4AD85B4B75D8289CCB57F41">
                            <name>UniquePtr&lt;T>(UniquePtr&lt;T>&amp;&amp; that)</name>
                            <syntax>public nothrow UniquePtr&lt;T>(UniquePtr&lt;T>&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.372"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Get_UniquePtr_T_84A185E63E772D34101667B639B5989D36F16FAA">
                            <name>Get()</name>
                            <syntax>public nothrow inline T* Get();</syntax>
                            <returnType ref="type.8705122"/>
                        </function>
                        <function id="member_function_GetPtr_UniquePtr_T_42DAFAEBA5656A072DE1F513EE2372B88C71080C">
                            <name>GetPtr()</name>
                            <syntax>public nothrow inline T* GetPtr();</syntax>
                            <returnType ref="type.8705122"/>
                        </function>
                        <function id="member_function_IsNull_UniquePtr_T_9E7249CE0E7032B785739C6557F172D7F52E3C8F">
                            <name>IsNull() const</name>
                            <syntax>public nothrow inline bool IsNull() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Release_UniquePtr_T_166BC946AE02C3D27B37EDA6E8A0210836F7EAC5">
                            <name>Release()</name>
                            <syntax>public nothrow inline T* Release();</syntax>
                            <returnType ref="type.8705122"/>
                        </function>
                        <function id="function_group_Reset_1FBE561AE572CA9B1667EC544A998329F832199A">
                            <name>Reset</name>
                            <overloads>
                                <overload id="member_function_Reset_UniquePtr_T_27D26FF67F60996009B7279F4ED499393E108A82">
                                    <name>Reset()</name>
                                    <syntax>public nothrow void Reset();</syntax>
                                </overload>
                                <overload id="member_function_Reset_UniquePtr_T_B14EB359947A7B75A2B762C644B937C1ED5E0BBF">
                                    <name>Reset(T* ptr_)</name>
                                    <syntax>public nothrow void Reset(T* ptr_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ptr_</name>
                                            <type ref="type.8705122"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Swap_UniquePtr_T_D1AE869CD75E2F3C1B3375D393F8BE3FB014D270">
                            <name>Swap(UniquePtr&lt;T>&amp; that)</name>
                            <syntax>public nothrow void Swap(UniquePtr&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8705118"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_op_star_AA575E87BD629F474DBF5A3F212DE29D2CE5C6DB">
                            <name>operator*</name>
                            <overloads>
                                <overload id="member_function_op_star_UniquePtr_T_6A12B4577A2DA3107BF707829BC7ED257CBC3891">
                                    <name>operator*()</name>
                                    <syntax>public nothrow inline T&amp; operator*();</syntax>
                                    <returnType ref="type.8705123"/>
                                </overload>
                                <overload id="member_function_op_star_UniquePtr_T_902AA20851FE1DF35F2439814ED48C18FFAAC5EB">
                                    <name>operator*() const</name>
                                    <syntax>public nothrow inline const T&amp; operator*() const;</syntax>
                                    <returnType ref="type.8705127"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_arrow_1AA165D4000489BF4D95084C086A2565790F8B78">
                            <name>operator-></name>
                            <overloads>
                                <overload id="member_function_op_arrow_UniquePtr_T_36F2F96D911351B4E2F710B5B03DF982A3EEC5D3">
                                    <name>operator->()</name>
                                    <syntax>public nothrow inline T* operator->();</syntax>
                                    <returnType ref="type.8705122"/>
                                </overload>
                                <overload id="member_function_op_arrow_UniquePtr_T_D011F2C483DB4DFC58F0671A00F0785034104F00">
                                    <name>operator->() const</name>
                                    <syntax>public nothrow inline const T* operator->() const;</syntax>
                                    <returnType ref="type.8705125"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_assign_8CE02042031D5FEB53FA4339B4AF86FB284A6844">
                            <name>operator=</name>
                            <overloads>
                                <overload id="member_function_op_assign_UniquePtr_T_33BBEEB14E9722CE08C99B1A4399584990E6E374">
                                    <name>operator=(T* ptr_)</name>
                                    <syntax>public nothrow void operator=(T* ptr_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ptr_</name>
                                            <type ref="type.8705122"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="move_assignment_op_assign_UniquePtr_T_181F63A292592308B7E9E272B87C17D6B2898852">
                                    <name>operator=(UniquePtr&lt;T>&amp;&amp; that)</name>
                                    <syntax>public nothrow void operator=(UniquePtr&lt;T>&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.372"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F">
                    <name>WeakCount&lt;T></name>
                    <groupName>WeakCount</groupName>
                    <syntax> public class WeakCount&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699856">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="default_constructor_WeakCount_T_261472352271908282CD683620E9FA4F835A6838">
                            <name>WeakCount&lt;T>()</name>
                            <syntax>public nothrow WeakCount&lt;T>();</syntax>
                        </constructor>
                        <constructor id="move_constructor_WeakCount_T_4C5717AC9E8DB3683CB2E08648A8A353A0B22864">
                            <name>WeakCount&lt;T>(WeakCount&lt;T>&amp;&amp; that)</name>
                            <syntax>public nothrow WeakCount&lt;T>(WeakCount&lt;T>&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.234"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_WeakCount_T_310C83065E9947B5A97B7A63476B8AB1A90DB762">
                            <name>WeakCount&lt;T>(const SharedCount&lt;T>&amp; that)</name>
                            <syntax>public nothrow WeakCount&lt;T>(const SharedCount&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8702245"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_WeakCount_T_A493026F01C1CBCED034441049D159FEB3239D73">
                            <name>WeakCount&lt;T>(const WeakCount&lt;T>&amp; that)</name>
                            <syntax>public nothrow WeakCount&lt;T>(const WeakCount&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8702230"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_GetCounter_WeakCount_T_CA88066E5D08A6DD3BBEF34C9685E18C054FF2B1">
                            <name>GetCounter() const</name>
                            <syntax>public nothrow Counter&lt;T>* GetCounter() const;</syntax>
                            <returnType ref="type.8702232"/>
                        </function>
                        <function id="member_function_GetUseCount_WeakCount_T_6C7A54B0EA4AA8253CDFB5FD833DB5B6775F8667">
                            <name>GetUseCount() const</name>
                            <syntax>public nothrow int GetUseCount() const;</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_Swap_WeakCount_T_AFB8119748E3C911090042ADEC3B654E4FB3513F">
                            <name>Swap(WeakCount&lt;T>&amp; that)</name>
                            <syntax>public nothrow void Swap(WeakCount&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8702227"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_op_assign_1FB511D1932535B15AD57B8C2826AADC4FCAB65B">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_WeakCount_T_C11C605220FC114F7EE5A2D52DFAB030C176F928">
                                    <name>operator=(WeakCount&lt;T>&amp;&amp; that)</name>
                                    <syntax>public nothrow void operator=(WeakCount&lt;T>&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.234"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_WeakCount_T_DB64D4FA7439A159EF93C4994FC2C551C9F9C889">
                                    <name>operator=(const SharedCount&lt;T>&amp; that)</name>
                                    <syntax>public nothrow void operator=(const SharedCount&lt;T>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.8702245"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_WeakCount_T_C3AEC5827E958B05104FDC454E3689373AF7E0CE">
                                    <name>operator=(const WeakCount&lt;T>&amp; that)</name>
                                    <syntax>public nothrow void operator=(const WeakCount&lt;T>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.8702230"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC">
                    <name>WeakPtr&lt;T></name>
                    <groupName>WeakPtr</groupName>
                    <syntax> public class WeakPtr&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699866">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="default_constructor_WeakPtr_T_2000B50087494D23EC19462C966F744868D4538A">
                            <name>WeakPtr&lt;T>()</name>
                            <syntax>public nothrow WeakPtr&lt;T>();</syntax>
                        </constructor>
                        <constructor id="constructor_WeakPtr_T_0D026ED166080C77195EF2EDC5B863DA00143A93">
                            <name>WeakPtr&lt;T>(const SharedPtr&lt;T>&amp; that)</name>
                            <syntax>public nothrow WeakPtr&lt;T>(const SharedPtr&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8702504"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_WeakPtr_T_BD9C621423165A2EE08FE567A988A6DE67985537">
                            <name>WeakPtr&lt;T>(const WeakPtr&lt;T>&amp; that)</name>
                            <syntax>public nothrow WeakPtr&lt;T>(const WeakPtr&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8702476"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Assign_WeakPtr_T_7A23AB577A4C9952D539E2C7BAD194E6732C7A1C">
                            <name>Assign(T* ptr_, const SharedCount&lt;T>&amp; count_)</name>
                            <syntax>public nothrow void Assign(T* ptr_, const SharedCount&lt;T>&amp; count_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ptr_</name>
                                    <type ref="type.8702486"/>
                                </parameter>
                                <parameter>
                                    <name>count_</name>
                                    <type ref="type.8702497"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Get_WeakPtr_T_ECE3A736F083F5F05A55C7008A5A465778A6E3FF">
                            <name>Get() const</name>
                            <syntax>public nothrow inline T* Get() const;</syntax>
                            <returnType ref="type.8702486"/>
                        </function>
                        <function id="member_function_GetCount_WeakPtr_T_656E3A387B0C9DB43CBE76C89CB983CF72F071D6">
                            <name>GetCount() const</name>
                            <syntax>public nothrow inline const WeakCount&lt;T>&amp; GetCount() const;</syntax>
                            <returnType ref="type.8702482"/>
                        </function>
                        <function id="member_function_GetPtr_WeakPtr_T_005E3567BF100002376B9F45958EB37D2B88BD6E">
                            <name>GetPtr() const</name>
                            <syntax>public nothrow inline T* GetPtr() const;</syntax>
                            <returnType ref="type.8702486"/>
                        </function>
                        <function id="member_function_GetUseCount_WeakPtr_T_328B254790078EABD0CAD3C0B2A4C2DEFCB3935B">
                            <name>GetUseCount() const</name>
                            <syntax>public nothrow int GetUseCount() const;</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_IsExpired_WeakPtr_T_5257FDC1CFBDFDA8EF42C525D01622FFB883D888">
                            <name>IsExpired() const</name>
                            <syntax>public nothrow bool IsExpired() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Lock_WeakPtr_T_1B5A4BA0D5F8DC87A8830C0E72829721DFB36D16">
                            <name>Lock() const</name>
                            <syntax>public nothrow SharedPtr&lt;T> Lock() const;</syntax>
                            <returnType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                        </function>
                        <function id="member_function_Reset_WeakPtr_T_DD7807AA0FB8822B22F2C93E53AD2202C149071C">
                            <name>Reset()</name>
                            <syntax>public nothrow void Reset();</syntax>
                        </function>
                        <function id="member_function_Swap_WeakPtr_T_10F693602314EC4B442856B882CBAD21B258537D">
                            <name>Swap(WeakPtr&lt;T>&amp; that)</name>
                            <syntax>public nothrow void Swap(WeakPtr&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8702473"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_op_assign_5AF1A33FF424FD79333FF5E59C35FF53ACBC106E">
                            <name>operator=</name>
                            <overloads>
                                <overload id="member_function_op_assign_WeakPtr_T_3F0D6AAE04E68B0DA9CACADFE89EC1DE0076CEAD">
                                    <name>operator=(const SharedPtr&lt;T>&amp; that)</name>
                                    <syntax>public nothrow void operator=(const SharedPtr&lt;T>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.8702504"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_WeakPtr_T_8F908C7BCDDA0B174133DEC0FC8AC98B9755CC62">
                                    <name>operator=(const WeakPtr&lt;T>&amp; that)</name>
                                    <syntax>public nothrow void operator=(const WeakPtr&lt;T>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.8702476"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_Abs_4D781CAB1B318E0101813BA8C1F7813FD23A9A9E">
                    <name>Abs&lt;T>(const T&amp; x)</name>
                    <syntax>public nothrow inline constexpr T Abs&lt;T>(const T&amp; x);</syntax>
                    <templateParameters>
                        <templateParameter id="8699378">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.8700150"/>
                        </parameter>
                    </parameters>
                    <returnType ref="8699378"/>
                    <constraint>
                        <type ref="8699378"/>
                        <connector>is</connector>
                        <concept ref="concept_OrderedAdditiveGroup_816E7DDE277944194F8E6A9829101ABF9F3D1A31"/>
                    </constraint>
                </function>
                <function id="function_Accumulate_BB80E68BF0A78DBF5698B13CB294C5DA5407261F">
                    <name>Accumulate&lt;I, T, Op>(I begin, I end, T init, Op op)</name>
                    <syntax>public nothrow T Accumulate&lt;I, T, Op>(I begin, I end, T init, Op op);</syntax>
                    <templateParameters>
                        <templateParameter id="8699313">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="8699314">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699315">
                            <name>Op</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="8699313"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="8699313"/>
                        </parameter>
                        <parameter>
                            <name>init</name>
                            <type ref="8699314"/>
                        </parameter>
                        <parameter>
                            <name>op</name>
                            <type ref="8699315"/>
                        </parameter>
                    </parameters>
                    <returnType ref="8699314"/>
                    <constraint>
                        <type ref="8699313"/>
                        <connector>is</connector>
                        <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                        <connector>and</connector>
                        <type ref="8699314"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699315"/>
                        <connector>is</connector>
                        <concept ref="concept_BinaryOperation_E7FA71F85EB4750A92189AC872008306AEFD4D01"/>
                        <connector>and</connector>
                        <type ref="8699315"/>
                        <dot>FirstArgumentType</dot>
                        <connector>is</connector>
                        <type ref="8699314"/>
                        <connector>and</connector>
                        <type ref="8699315"/>
                        <dot>SecondArgumentType</dot>
                        <connector>is</connector>
                        <type ref="8699313"/>
                        <dot>ValueType</dot>
                    </constraint>
                </function>
                <function id="function_Aliases_5A7C8DD8BFFBE9837141C98C3133610A8CBFEFF1">
                    <name>Aliases(uchar c)</name>
                    <syntax>public const List&lt;System.Unicode.Alias>&amp; Aliases(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8704940"/>
                </function>
                <function id="function_Align_FC412B3D156D5C57868A1FC3E8A5FCA78B2591E7">
                    <name>Align(long n, long alignment)</name>
                    <syntax>public nothrow inline constexpr long Align(long n, long alignment);</syntax>
                    <parameters>
                        <parameter>
                            <name>n</name>
                            <type ref="type.8699072"/>
                        </parameter>
                        <parameter>
                            <name>alignment</name>
                            <type ref="type.8699072"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699072"/>
                </function>
                <function id="function_CaptureCurrentException_2777DD986058C8D3A8C848141454281F049B3B45">
                    <name>CaptureCurrentException()</name>
                    <syntax>public nothrow ExceptionPtr CaptureCurrentException();</syntax>
                    <returnType ref="class_ExceptionPtr_3E313CB08B225E0124692C11F3BF8F26E971600C"/>
                </function>
                <function id="function_group_CharStr_74D2C6FFE63639D595738D9F3A3632EC83B47611">
                    <name>CharStr</name>
                    <overloads>
                        <overload id="function_CharStr_C3E17C940E667CCE431D6D81C6EBEDC4D9FF67E2">
                            <name>CharStr(char c)</name>
                            <syntax>public nothrow String&lt;char> CharStr(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699076"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_CharStr_53189AED9F991D0300F3AB5C4EEF58FABA69B83F">
                            <name>CharStr(uchar c)</name>
                            <syntax>public String&lt;uchar> CharStr(uchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699078"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700294"/>
                        </overload>
                        <overload id="function_CharStr_F4FA2B9A6FDE034B203C2567FF26E4D8DD0CF2CF">
                            <name>CharStr(wchar c)</name>
                            <syntax>public String&lt;wchar> CharStr(wchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699077"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700249"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_Copy_2FDF42F9858C4435492A3ADC7E9D14574E70B182">
                    <name>Copy&lt;I, O>(I begin, I end, O to)</name>
                    <syntax>public O Copy&lt;I, O>(I begin, I end, O to);</syntax>
                    <templateParameters>
                        <templateParameter id="8699266">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="8699267">
                            <name>O</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="8699266"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="8699266"/>
                        </parameter>
                        <parameter>
                            <name>to</name>
                            <type ref="8699267"/>
                        </parameter>
                    </parameters>
                    <returnType ref="8699267"/>
                    <constraint>
                        <type ref="8699266"/>
                        <connector>is</connector>
                        <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                        <connector>and</connector>
                        <type ref="8699267"/>
                        <connector>is</connector>
                        <concept ref="concept_OutputIterator_A454885B47A3648BC107033D34E4A3F5AF8202EC"/>
                        <connector>and</connector>
                        <concept ref="concept_CopyAssignable_C698EC74F187E27A402BB382B7AC4F26FE50056C">
                            <params>
                                <type ref="8699267"/>
                                <dot>ValueType</dot>
                                <type ref="8699266"/>
                                <dot>ValueType</dot>
                            </params>
                        </concept>
                    </constraint>
                </function>
                <function id="function_CopyBackward_EB0290E5DB7EA763712354965C66AA39F84C570D">
                    <name>CopyBackward&lt;I, O>(I begin, I end, O to)</name>
                    <syntax>public O CopyBackward&lt;I, O>(I begin, I end, O to);</syntax>
                    <templateParameters>
                        <templateParameter id="8699268">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="8699269">
                            <name>O</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="8699268"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="8699268"/>
                        </parameter>
                        <parameter>
                            <name>to</name>
                            <type ref="8699269"/>
                        </parameter>
                    </parameters>
                    <returnType ref="8699269"/>
                    <constraint>
                        <type ref="8699268"/>
                        <connector>is</connector>
                        <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                        <connector>and</connector>
                        <type ref="8699269"/>
                        <connector>is</connector>
                        <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                        <connector>and</connector>
                        <concept ref="concept_CopyAssignable_C698EC74F187E27A402BB382B7AC4F26FE50056C">
                            <params>
                                <type ref="8699269"/>
                                <dot>ValueType</dot>
                                <type ref="8699268"/>
                                <dot>ValueType</dot>
                            </params>
                        </concept>
                    </constraint>
                </function>
                <function id="function_group_Count_282978D9E78FF3687050BA193C733213FF42007C">
                    <name>Count</name>
                    <overloads>
                        <overload id="function_Count_7D55945C82E5AA39FA039581D51D0AAE6B123DB3">
                            <name>Count&lt;I, P>(I begin, I end, P p)</name>
                            <syntax>public nothrow constexpr long Count&lt;I, P>(I begin, I end, P p);</syntax>
                            <templateParameters>
                                <templateParameter id="8699299">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699300">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699299"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699299"/>
                                </parameter>
                                <parameter>
                                    <name>p</name>
                                    <type ref="8699300"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                            <constraint>
                                <type ref="8699299"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="8699300"/>
                                <connector>is</connector>
                                <concept ref="concept_UnaryPredicate_817CC9DCD26C0954E03389EC0C9357DB1879C53F"/>
                                <connector>and</connector>
                                <type ref="8699300"/>
                                <dot>ArgumentType</dot>
                                <connector>is</connector>
                                <type ref="8699299"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_Count_08F66D217F4632585CB662019A67F74880D5C3A6">
                            <name>Count&lt;I, T>(I begin, I end, const T&amp; value)</name>
                            <syntax>public nothrow constexpr long Count&lt;I, T>(I begin, I end, const T&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="8699297">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699298">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699297"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699297"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8700132"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                            <constraint>
                                <type ref="8699297"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="8699298"/>
                                <connector>is</connector>
                                <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                                <connector>and</connector>
                                <concept ref="concept_EqualityComparable_DDA76B65E48DE418ED1651912DC91E6BCF9A6B60">
                                    <params>
                                        <type ref="8699298"/>
                                        <type ref="8699297"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_Distance_B2E1B147CDAAC52D2E95B7152AE4B99AE8D89F48">
                    <name>Distance</name>
                    <overloads>
                        <overload id="function_Distance_8EB620B3D78F60C243069A144ACF7D62F7F4D7B7">
                            <name>Distance&lt;I>(I first, I last) where I is ForwardIterator</name>
                            <syntax>public nothrow constexpr long Distance&lt;I>(I first, I last);</syntax>
                            <templateParameters>
                                <templateParameter id="8699274">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="8699274"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="8699274"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                            <constraint>
                                <type ref="8699274"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                            </constraint>
                        </overload>
                        <overload id="function_Distance_1F39B34A1E26D3347AFEABE0D922BB3821FE34F8">
                            <name>Distance&lt;I>(I first, I last) where I is RandomAccessIterator</name>
                            <syntax>public nothrow inline constexpr long Distance&lt;I>(I first, I last);</syntax>
                            <templateParameters>
                                <templateParameter id="8699275">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="8699275"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="8699275"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                            <constraint>
                                <type ref="8699275"/>
                                <connector>is</connector>
                                <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_EmptyString_A007EA59C5405904E57FEAC91E8BD2E689CF8928">
                    <name>EmptyString</name>
                    <overloads>
                        <overload id="function_EmptyString_F52F8A0ED901A5DEF12A97135276DDDD55DFA899">
                            <name>EmptyString(char x)</name>
                            <syntax>public nothrow const char* EmptyString(char x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699076"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699214"/>
                        </overload>
                        <overload id="function_EmptyString_F81C7F5227303B7482365CE701552D8DFE8C01D4">
                            <name>EmptyString(uchar x)</name>
                            <syntax>public nothrow const uchar* EmptyString(uchar x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699078"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700301"/>
                        </overload>
                        <overload id="function_EmptyString_57D3009DD1B76C863457CE6708D966300BFA03BB">
                            <name>EmptyString(wchar x)</name>
                            <syntax>public nothrow const wchar* EmptyString(wchar x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699077"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700256"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_EnableSharedFromThis_F91CD37200F37E19E63377CC5F6FA3E83032551A">
                    <name>EnableSharedFromThis</name>
                    <overloads>
                        <overload id="function_EnableSharedFromThis_F14634A05F9BB24A86D70D3D1F617F81D0797F5A">
                            <name>EnableSharedFromThis&lt;T, U>(ShareableFromThis&lt;T>* left, U* right, const SharedCount&lt;U>&amp; count)</name>
                            <syntax>public nothrow void EnableSharedFromThis&lt;T, U>(ShareableFromThis&lt;T>* left, U* right, const SharedCount&lt;U>&amp; count);</syntax>
                            <templateParameters>
                                <templateParameter id="8699870">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699871">
                                    <name>U</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8702575"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8702613"/>
                                </parameter>
                                <parameter>
                                    <name>count</name>
                                    <type ref="type.8702620"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_EnableSharedFromThis_3E920D1FB644559E9466868E2C321253B0358D08">
                            <name>EnableSharedFromThis&lt;T>(void* @p0, void* @p1, const SharedCount&lt;T>&amp; @p2)</name>
                            <syntax>public nothrow inline void EnableSharedFromThis&lt;T>(void* @p0, void* @p1, const SharedCount&lt;T>&amp; @p2);</syntax>
                            <templateParameters>
                                <templateParameter id="8699869">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8699217"/>
                                </parameter>
                                <parameter>
                                    <name>@p1</name>
                                    <type ref="type.8699217"/>
                                </parameter>
                                <parameter>
                                    <name>@p2</name>
                                    <type ref="type.8702554"/>
                                </parameter>
                            </parameters>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_Equal_3550C4B0690E37F7A7F00C2FD7CACB847544738B">
                    <name>Equal</name>
                    <overloads>
                        <overload id="function_Equal_6EA6DAD75B77E266FCEFCFC9C070BD7B85F0EC91">
                            <name>Equal&lt;I1, I2, R>(I1 first1, I1 last1, I2 first2, I2 last2, R r)</name>
                            <syntax>public nothrow constexpr bool Equal&lt;I1, I2, R>(I1 first1, I1 last1, I2 first2, I2 last2, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="8699362">
                                    <name>I1</name>
                                </templateParameter>
                                <templateParameter id="8699363">
                                    <name>I2</name>
                                </templateParameter>
                                <templateParameter id="8699364">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first1</name>
                                    <type ref="8699362"/>
                                </parameter>
                                <parameter>
                                    <name>last1</name>
                                    <type ref="8699362"/>
                                </parameter>
                                <parameter>
                                    <name>first2</name>
                                    <type ref="8699363"/>
                                </parameter>
                                <parameter>
                                    <name>last2</name>
                                    <type ref="8699363"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="8699364"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699362"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="8699363"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <concept ref="concept_Relation_34B41129EB756D944983CCCA612EDAA19318537E">
                                    <params>
                                        <type ref="8699364"/>
                                        <type ref="8699362"/>
                                        <dot>ValueType</dot>
                                        <type ref="8699363"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                        <overload id="function_Equal_E2514B0CD37CE0C20641BBBC4F045D1CB677581A">
                            <name>Equal&lt;I1, I2>(I1 first1, I1 last1, I2 first2, I2 last2)</name>
                            <syntax>public nothrow inline constexpr bool Equal&lt;I1, I2>(I1 first1, I1 last1, I2 first2, I2 last2);</syntax>
                            <templateParameters>
                                <templateParameter id="8699365">
                                    <name>I1</name>
                                </templateParameter>
                                <templateParameter id="8699366">
                                    <name>I2</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first1</name>
                                    <type ref="8699365"/>
                                </parameter>
                                <parameter>
                                    <name>last1</name>
                                    <type ref="8699365"/>
                                </parameter>
                                <parameter>
                                    <name>first2</name>
                                    <type ref="8699366"/>
                                </parameter>
                                <parameter>
                                    <name>last2</name>
                                    <type ref="8699366"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699365"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="8699366"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <concept ref="concept_EqualityComparable_DDA76B65E48DE418ED1651912DC91E6BCF9A6B60">
                                    <params>
                                        <type ref="8699365"/>
                                        <dot>ValueType</dot>
                                        <type ref="8699366"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_EqualRange_D33FB9282176A4702317CFBA505FBC4DB2D09FF6">
                    <name>EqualRange</name>
                    <overloads>
                        <overload id="function_EqualRange_E9468332E6775558390998F6DA400098237947B1">
                            <name>EqualRange&lt;I, T, R>(I first, I last, const T&amp; value, R r)</name>
                            <syntax>public constexpr Pair&lt;I, I> EqualRange&lt;I, T, R>(I first, I last, const T&amp; value, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="8699290">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699291">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699292">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="8699290"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="8699290"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8700126"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="8699292"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.class_Pair_I_I_5D033C5BBBF2C4C78CF59858CFB85B4F03BBACA3"/>
                            <constraint>
                                <type ref="8699290"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <type ref="8699291"/>
                                <connector>is</connector>
                                <type ref="8699290"/>
                                <dot>ValueType</dot>
                                <connector>and</connector>
                                <type ref="8699292"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="8699292"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="8699290"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_EqualRange_F2C2B2398501E29F60E24CDDF8289D5EE3253906">
                            <name>EqualRange&lt;I, T>(I first, I last, const T&amp; value)</name>
                            <syntax>public constexpr Pair&lt;I, I> EqualRange&lt;I, T>(I first, I last, const T&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="8699288">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699289">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="8699288"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="8699288"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8700121"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.class_Pair_I_I_5D033C5BBBF2C4C78CF59858CFB85B4F03BBACA3"/>
                            <constraint>
                                <type ref="8699288"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <concept ref="concept_TotallyOrdered_40CD71CFED7B3E26AA555259C8C3A14D6CE666EC">
                                    <params>
                                        <type ref="8699289"/>
                                        <type ref="8699288"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_Factorial_AD660B4B2B7560EA03CE2B8C513330DC5C7667B8">
                    <name>Factorial&lt;U>(U n)</name>
                    <syntax>public nothrow constexpr U Factorial&lt;U>(U n);</syntax>
                    <templateParameters>
                        <templateParameter id="8699379">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>n</name>
                            <type ref="8699379"/>
                        </parameter>
                    </parameters>
                    <returnType ref="8699379"/>
                    <constraint>
                        <type ref="8699379"/>
                        <connector>is</connector>
                        <concept ref="concept_UnsignedInteger_FBFA16F1BC6E6222A9D123737D6648E8035C07E7"/>
                    </constraint>
                </function>
                <function id="function_Fill_C019CFA0AC3AE2FB952310AD09148A11E04BCEE0">
                    <name>Fill&lt;I, T>(I begin, I end, const T&amp; value)</name>
                    <syntax>public nothrow void Fill&lt;I, T>(I begin, I end, const T&amp; value);</syntax>
                    <templateParameters>
                        <templateParameter id="8699311">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="8699312">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="8699311"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="8699311"/>
                        </parameter>
                        <parameter>
                            <name>value</name>
                            <type ref="type.8700135"/>
                        </parameter>
                    </parameters>
                    <constraint>
                        <type ref="8699312"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699311"/>
                        <connector>is</connector>
                        <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                        <connector>and</connector>
                        <type ref="8699311"/>
                        <dot>ValueType</dot>
                        <connector>is</connector>
                        <type ref="8699312"/>
                    </constraint>
                </function>
                <function id="function_group_Find_00EA9FD2513F68653C81116871C96CD8DA28346F">
                    <name>Find</name>
                    <overloads>
                        <overload id="function_Find_0370A8F170904DFAB7793B3C62DFED9BE63B7411">
                            <name>Find&lt;I, P>(I begin, I end, P p)</name>
                            <syntax>public nothrow constexpr I Find&lt;I, P>(I begin, I end, P p);</syntax>
                            <templateParameters>
                                <templateParameter id="8699295">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699296">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699295"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699295"/>
                                </parameter>
                                <parameter>
                                    <name>p</name>
                                    <type ref="8699296"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699295"/>
                            <constraint>
                                <type ref="8699295"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="8699296"/>
                                <connector>is</connector>
                                <concept ref="concept_UnaryPredicate_817CC9DCD26C0954E03389EC0C9357DB1879C53F"/>
                                <connector>and</connector>
                                <type ref="8699296"/>
                                <dot>ArgumentType</dot>
                                <connector>is</connector>
                                <type ref="8699295"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_Find_6EFA1C2B6EB9D8CD99A08A544FE3E43FF4F86847">
                            <name>Find&lt;I, T>(I begin, I end, const T&amp; value)</name>
                            <syntax>public nothrow constexpr I Find&lt;I, T>(I begin, I end, const T&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="8699293">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699294">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699293"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699293"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8700131"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699293"/>
                            <constraint>
                                <type ref="8699293"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="8699294"/>
                                <connector>is</connector>
                                <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                                <connector>and</connector>
                                <concept ref="concept_EqualityComparable_DDA76B65E48DE418ED1651912DC91E6BCF9A6B60">
                                    <params>
                                        <type ref="8699294"/>
                                        <type ref="8699293"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_ForEach_EACA70EA4EB3536ECCC614962A10B7390E7EBB23">
                    <name>ForEach&lt;I, F>(I begin, I end, F f)</name>
                    <syntax>public constexpr F ForEach&lt;I, F>(I begin, I end, F f);</syntax>
                    <templateParameters>
                        <templateParameter id="8699316">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="8699317">
                            <name>F</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="8699316"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="8699316"/>
                        </parameter>
                        <parameter>
                            <name>f</name>
                            <type ref="8699317"/>
                        </parameter>
                    </parameters>
                    <returnType ref="8699317"/>
                    <constraint>
                        <type ref="8699316"/>
                        <connector>is</connector>
                        <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                        <connector>and</connector>
                        <type ref="8699317"/>
                        <connector>is</connector>
                        <concept ref="concept_UnaryFunction_DDD936ABC21BA268C3B3C9F4820F5DFE1ACAA344"/>
                        <connector>and</connector>
                        <type ref="8699317"/>
                        <dot>ArgumentType</dot>
                        <connector>is</connector>
                        <type ref="8699316"/>
                        <dot>ValueType</dot>
                    </constraint>
                </function>
                <function id="function_FullFolding_B3AC6BC4F4E8DFFC1502A274548675D9FF86E98D">
                    <name>FullFolding(uchar c)</name>
                    <syntax>public String&lt;uchar> FullFolding(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700294"/>
                </function>
                <function id="function_FullLower_3FBEEF110E8FC9D23FD43D3CE52156BC75E75576">
                    <name>FullLower(uchar c)</name>
                    <syntax>public String&lt;uchar> FullLower(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700294"/>
                </function>
                <function id="function_FullTitle_491702D94251FE5ECC7AF0A040984E00682926BF">
                    <name>FullTitle(uchar c)</name>
                    <syntax>public String&lt;uchar> FullTitle(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700294"/>
                </function>
                <function id="function_FullUpper_356BB77D6C1267F75356A0AC805E2C7A29FDA67B">
                    <name>FullUpper(uchar c)</name>
                    <syntax>public String&lt;uchar> FullUpper(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700294"/>
                </function>
                <function id="function_Gcd_18F3BF6B88B360BF2D3D9838D6AD6B0FF2F34CAC">
                    <name>Gcd&lt;T>(T a, T b)</name>
                    <syntax>public nothrow constexpr T Gcd&lt;T>(T a, T b);</syntax>
                    <templateParameters>
                        <templateParameter id="8699380">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>a</name>
                            <type ref="8699380"/>
                        </parameter>
                        <parameter>
                            <name>b</name>
                            <type ref="8699380"/>
                        </parameter>
                    </parameters>
                    <returnType ref="8699380"/>
                    <constraint>
                        <type ref="8699380"/>
                        <connector>is</connector>
                        <concept ref="concept_EuclideanSemiring_0963A0023F004A1F3DA33F82504C5F5A55402241"/>
                    </constraint>
                </function>
                <function id="function_GetBidiMirroringGlyph_C80825B9D99268D6C6DD0D870F9641656D1E981F">
                    <name>GetBidiMirroringGlyph(uchar c)</name>
                    <syntax>public uchar GetBidiMirroringGlyph(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699078"/>
                </function>
                <function id="function_GetBidiPairedBracket_F98DACC57B43CC7C10362AFCA888E663895FCBB0">
                    <name>GetBidiPairedBracket(uchar c)</name>
                    <syntax>public uchar GetBidiPairedBracket(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699078"/>
                </function>
                <function id="function_GetBidiPairedBracketType_1CCCD160D47143655D6D8168378FD2D3CBAB4884">
                    <name>GetBidiPairedBracketType(uchar c)</name>
                    <syntax>public BidiPairedBracketTypeId GetBidiPairedBracketType(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                </function>
                <function id="function_GetCharacterName_AB2939A118988EA73AA73CB49B5AE7CB82C74725">
                    <name>GetCharacterName(uchar c)</name>
                    <syntax>public String&lt;char> GetCharacterName(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700206"/>
                </function>
                <function id="function_GetCurrentDate_07308496C302034D25A4FD98C7FBB2AA3FBF4EF7">
                    <name>GetCurrentDate()</name>
                    <syntax>public nothrow Date GetCurrentDate();</syntax>
                    <returnType ref="class_Date_351EEEABF504E83A9336BC83CE10D3450072F1E8"/>
                </function>
                <function id="function_GetCurrentDateTime_8231E4F0B750169623A82E2B677FDE976369E086">
                    <name>GetCurrentDateTime()</name>
                    <syntax>public nothrow DateTime GetCurrentDateTime();</syntax>
                    <returnType ref="class_DateTime_1CCCF400289F734AAAB9BC0562E46C77468B398E"/>
                </function>
                <function id="function_GetNumericType_7450F88942E0C32255B8CABBB454E5241985AFFA">
                    <name>GetNumericType(uchar c)</name>
                    <syntax>public NumericTypeId GetNumericType(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                </function>
                <function id="function_GetNumericValue_CE2CEAA3800DA55D0742F41CB93F03EC6BDA8453">
                    <name>GetNumericValue(uchar c)</name>
                    <syntax>public String&lt;uchar> GetNumericValue(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700294"/>
                </function>
                <function id="function_GetUnicode1Name_01693B361778DEA381F1A77230EF5DE303C8735E">
                    <name>GetUnicode1Name(uchar c)</name>
                    <syntax>public String&lt;char> GetUnicode1Name(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700206"/>
                </function>
                <function id="function_HexChar_00DE6E80DF72D8B949F2BABA52F1B265AC259DE5">
                    <name>HexChar(byte nibble)</name>
                    <syntax>public nothrow inline char HexChar(byte nibble);</syntax>
                    <parameters>
                        <parameter>
                            <name>nibble</name>
                            <type ref="type.8699067"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699076"/>
                </function>
                <function id="function_group_HexEscape_F56A52A4316DC2F61FB5013CABF896852FDEE336">
                    <name>HexEscape</name>
                    <overloads>
                        <overload id="function_HexEscape_5BEA61854699D70405C9705964F36E50324F9F79">
                            <name>HexEscape(char c)</name>
                            <syntax>public nothrow String&lt;char> HexEscape(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699076"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_HexEscape_759AD947B3D1902E5D2C3B38EB89774294461521">
                            <name>HexEscape(uchar c)</name>
                            <syntax>public nothrow String&lt;char> HexEscape(uchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699078"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_HexEscape_B88895F4444BF5A29C654E21AFF376B05C625047">
                            <name>HexEscape(wchar c)</name>
                            <syntax>public nothrow String&lt;char> HexEscape(wchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699077"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_IdentityElement_64054A2AE1627DA8FB2AFC805AD46C54F686E8B6">
                    <name>IdentityElement</name>
                    <overloads>
                        <overload id="function_IdentityElement_195932E6859B059A3783365AEBD2B1F1F9ECFC72">
                            <name>IdentityElement&lt;T>(Multiplies&lt;T> @p0)</name>
                            <syntax>public nothrow inline T IdentityElement&lt;T>(Multiplies&lt;T> @p0);</syntax>
                            <templateParameters>
                                <templateParameter id="8699630">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.class_Multiplies_T_B10569FE25E0D6EA8440D826A60699DA1E9E1D98"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699630"/>
                            <constraint>
                                <type ref="8699630"/>
                                <connector>is</connector>
                                <concept ref="concept_MultiplicativeMonoid_2EC49957FA822229E3BB5F5014BA5E03C5EACC11"/>
                            </constraint>
                        </overload>
                        <overload id="function_IdentityElement_23689A4B2BEF9D589506E8CBC556B86C244DFBDC">
                            <name>IdentityElement&lt;T>(Plus&lt;T> @p0)</name>
                            <syntax>public nothrow inline T IdentityElement&lt;T>(Plus&lt;T> @p0);</syntax>
                            <templateParameters>
                                <templateParameter id="8699623">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.class_Plus_T_A04F66A1C888E4BFBAF2F85FF94CD1A38D050A00"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699623"/>
                            <constraint>
                                <type ref="8699623"/>
                                <connector>is</connector>
                                <concept ref="concept_AdditiveMonoid_8D82C7092F575679F72B0CA8C2989C67C1966F37"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_InitRand_FC91A0646CA9E897EC03AF41DE040C0B0315FBE4">
                    <name>InitRand(uint seed)</name>
                    <syntax>public nothrow inline void InitRand(uint seed);</syntax>
                    <parameters>
                        <parameter>
                            <name>seed</name>
                            <type ref="type.8699071"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_group_InsertionSort_48C7614915722ADAB75428F28D3D6EA6D5D795B2">
                    <name>InsertionSort</name>
                    <overloads>
                        <overload id="function_InsertionSort_CD54F75B9BB7C45C7E832874642F184C506F8608">
                            <name>InsertionSort&lt;I, R>(I begin, I end, R r)</name>
                            <syntax>public void InsertionSort&lt;I, R>(I begin, I end, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="8699348">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699349">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699348"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699348"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="8699349"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="8699348"/>
                                <connector>is</connector>
                                <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                                <connector>and</connector>
                                <type ref="8699349"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="8699349"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="8699348"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_InsertionSort_793612C36923A07D7EBF7E10CAF11B6401F01FCE">
                            <name>InsertionSort&lt;I>(I begin, I end)</name>
                            <syntax>public inline void InsertionSort&lt;I>(I begin, I end);</syntax>
                            <templateParameters>
                                <templateParameter id="8699350">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699350"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699350"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="8699350"/>
                                <connector>is</connector>
                                <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                                <connector>and</connector>
                                <type ref="8699350"/>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_IsAlpha_0B71A7646457C64DFC9CB8AFF548204F99A499FB">
                    <name>IsAlpha(char c)</name>
                    <syntax>public nothrow inline bool IsAlpha(char c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699076"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsAlphabetic_F64CD05EB4C461103DD6DBEB4369C5389C5C1265">
                    <name>IsAlphabetic(uchar c)</name>
                    <syntax>public bool IsAlphabetic(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsAlphanumeric_AA8A7F46423CD6A580B5F52AFC2C6E8B3FFF3CA6">
                    <name>IsAlphanumeric(char c)</name>
                    <syntax>public nothrow inline bool IsAlphanumeric(char c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699076"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsAsciiDigit_9E995EEEE001CBF74462DCD9B1D6E73B5E49C2E7">
                    <name>IsAsciiDigit(uchar c)</name>
                    <syntax>public bool IsAsciiDigit(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsAsciiHexDigit_772FECE363595975DBD3B1C81ECFC7A738D099EB">
                    <name>IsAsciiHexDigit(uchar c)</name>
                    <syntax>public bool IsAsciiHexDigit(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsBaseChar_5EDEA09F8E30780A517F43125AD579D24EADB318">
                    <name>IsBaseChar(uchar c)</name>
                    <syntax>public bool IsBaseChar(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsBidiControl_417FAB125D260EA3863C655999BE1622DC8A679E">
                    <name>IsBidiControl(uchar c)</name>
                    <syntax>public bool IsBidiControl(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsBidiMirrored_ADF7DEBBAD9481A62C19D988B9709E1A318EC6FC">
                    <name>IsBidiMirrored(uchar c)</name>
                    <syntax>public bool IsBidiMirrored(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsCasedLetter_BF452A6D685EE6C8F79ECA32525211B0F8698BE3">
                    <name>IsCasedLetter(uchar c)</name>
                    <syntax>public bool IsCasedLetter(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsClosePunctuation_E5140FBFA3D4F0AF742ADA2615EDFB05C1E14E14">
                    <name>IsClosePunctuation(uchar c)</name>
                    <syntax>public bool IsClosePunctuation(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsCombining_F7F8A56DB081875C8492D7777D9D283309A713F9">
                    <name>IsCombining(uchar c)</name>
                    <syntax>public bool IsCombining(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsConnectorPunctuation_2BA4F0EE6CCBCF22B725B43779E58A56017F492C">
                    <name>IsConnectorPunctuation(uchar c)</name>
                    <syntax>public bool IsConnectorPunctuation(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_group_IsControl_C8D5092C2FAA2A5994F68FD09D570049312AFADC">
                    <name>IsControl</name>
                    <overloads>
                        <overload id="function_IsControl_29E4C31B4D879D612DD5217F3C18ADB362CFC412">
                            <name>IsControl(char c)</name>
                            <syntax>public nothrow inline bool IsControl(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699076"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_IsControl_E6FAF69308E6ECE6E5CAD7FD7423DBE832206D4D">
                            <name>IsControl(uchar c)</name>
                            <syntax>public bool IsControl(uchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699078"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_IsCurrencySymbol_2F9C81FA51D86018AAF5AD9734B3B139ED613B6C">
                    <name>IsCurrencySymbol(uchar c)</name>
                    <syntax>public bool IsCurrencySymbol(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsDashPunctuation_6A80E052E89A720FF26912078684AE8014D20E93">
                    <name>IsDashPunctuation(uchar c)</name>
                    <syntax>public bool IsDashPunctuation(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsDecimalNumber_F6BEDEF77C5177E6CBE419F2BF1E7D4C9D4D1CA8">
                    <name>IsDecimalNumber(uchar c)</name>
                    <syntax>public bool IsDecimalNumber(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsDigit_23FA362FC1ABD0C59BC4A88A48A60EC097BDFDC6">
                    <name>IsDigit(char c)</name>
                    <syntax>public nothrow inline bool IsDigit(char c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699076"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsEnclosingMark_0558078E2C44A1735F197F5BE45871B9F405D6B2">
                    <name>IsEnclosingMark(uchar c)</name>
                    <syntax>public bool IsEnclosingMark(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsFinalPunctuation_2A9E3E022EB8B25D7899D33557EC8CC504FE5D00">
                    <name>IsFinalPunctuation(uchar c)</name>
                    <syntax>public bool IsFinalPunctuation(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsFormat_89D7771BCF9445D1B0C2028F5F760853DBBCB4F7">
                    <name>IsFormat(uchar c)</name>
                    <syntax>public bool IsFormat(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsGraphemeBase_BA0AA4070EB5768D55636654C4A2BB50B275E46D">
                    <name>IsGraphemeBase(uchar c)</name>
                    <syntax>public bool IsGraphemeBase(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsGraphemeExtender_59385B0A37736D5042F7B24E8A72761D2AD84F57">
                    <name>IsGraphemeExtender(uchar c)</name>
                    <syntax>public bool IsGraphemeExtender(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_group_IsGraphic_969227080C6627961411B3220A7A04361A4799E8">
                    <name>IsGraphic</name>
                    <overloads>
                        <overload id="function_IsGraphic_E4F3E4CB2C1AA3FE71ED03D48877078ED674C8D2">
                            <name>IsGraphic(char c)</name>
                            <syntax>public nothrow inline bool IsGraphic(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699076"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_IsGraphic_A1BD39BE4C705D6139021203834BBDF02D02E494">
                            <name>IsGraphic(uchar c)</name>
                            <syntax>public bool IsGraphic(uchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699078"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_IsHexDigit_F6752E330F68FC626E259001345CE74F4A13EA24">
                    <name>IsHexDigit(char c)</name>
                    <syntax>public nothrow inline bool IsHexDigit(char c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699076"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsIdCont_F2D82207F3D6D65FAECEDC8BE47A40E7A6F592E2">
                    <name>IsIdCont(uchar c)</name>
                    <syntax>public bool IsIdCont(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsIdStart_A3C012B1DABBB9DCD76D2EC13CF48AC32BDE38E0">
                    <name>IsIdStart(uchar c)</name>
                    <syntax>public bool IsIdStart(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsInitialPunctuation_73CF684CF3403B20DC2A3F65B2C877BFC4D1848A">
                    <name>IsInitialPunctuation(uchar c)</name>
                    <syntax>public bool IsInitialPunctuation(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsLetter_D5FF05E3ACF5CB448F06BD0226D27CCB3417E90B">
                    <name>IsLetter(uchar c)</name>
                    <syntax>public bool IsLetter(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsLetterNumber_F2FB830A88A852ED9B226AB91AA20F574844CF92">
                    <name>IsLetterNumber(uchar c)</name>
                    <syntax>public bool IsLetterNumber(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsLineSeparator_13BE0FAA2AAF31ADC477A99AC05D1F1CEE26682A">
                    <name>IsLineSeparator(uchar c)</name>
                    <syntax>public bool IsLineSeparator(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsLower_6BACD6BBD70ACCC951410C05D8E021E4B1EE6CD9">
                    <name>IsLower(char c)</name>
                    <syntax>public nothrow inline bool IsLower(char c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699076"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsLowerLetter_85ECB7E9B99B104EB1F8385CB4E79FB60E306EEB">
                    <name>IsLowerLetter(uchar c)</name>
                    <syntax>public bool IsLowerLetter(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsLowercase_7978AC240328DA99155675060C73D06CC1EB3636">
                    <name>IsLowercase(uchar c)</name>
                    <syntax>public bool IsLowercase(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsMark_5C1380F33BBFA40926A349394255803565C53470">
                    <name>IsMark(uchar c)</name>
                    <syntax>public bool IsMark(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsMathSymbol_03D3E392F1E09ACCC1687FBD14DAEDDAF4FF856C">
                    <name>IsMathSymbol(uchar c)</name>
                    <syntax>public bool IsMathSymbol(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsModifierLetter_C1BD0F030E6157E4D6C63F240E2CDC285EEEB4DC">
                    <name>IsModifierLetter(uchar c)</name>
                    <syntax>public bool IsModifierLetter(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsModifierSymbol_D5AD0512361F779ACC4326D08662A10F3C47B840">
                    <name>IsModifierSymbol(uchar c)</name>
                    <syntax>public bool IsModifierSymbol(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsNonspacingMark_8073B02660C6E5CAC4635B97CB8690D528EF4923">
                    <name>IsNonspacingMark(uchar c)</name>
                    <syntax>public bool IsNonspacingMark(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsNumber_21765366768967FCF91CB5655BCBD8D1B0016612">
                    <name>IsNumber(uchar c)</name>
                    <syntax>public bool IsNumber(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsOpenPunctuation_7B813083B2099F3EFCDF4B14D6CFDC446731350F">
                    <name>IsOpenPunctuation(uchar c)</name>
                    <syntax>public bool IsOpenPunctuation(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsOther_667AA37A6AA65F4631D5A49C2C0318D2FB14E8F2">
                    <name>IsOther(uchar c)</name>
                    <syntax>public bool IsOther(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsOtherLetter_CDDDD8602D154AEFB3E29FB9E01A3771CD4D8598">
                    <name>IsOtherLetter(uchar c)</name>
                    <syntax>public bool IsOtherLetter(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsOtherLower_3956A00063914634EF6A0813CABCA51654240A2A">
                    <name>IsOtherLower(uchar c)</name>
                    <syntax>public bool IsOtherLower(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsOtherNumber_39BC5513B1F87F0121A43ADBB8EF17AB2FCC26A6">
                    <name>IsOtherNumber(uchar c)</name>
                    <syntax>public bool IsOtherNumber(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsOtherPunctuation_01CAD183A81B08576F4F6DFA347ED18292598585">
                    <name>IsOtherPunctuation(uchar c)</name>
                    <syntax>public bool IsOtherPunctuation(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsOtherSymbol_D04A1E8F1927468B817F403029825B3E2F21EA3E">
                    <name>IsOtherSymbol(uchar c)</name>
                    <syntax>public bool IsOtherSymbol(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsOtherUpper_6B0D6AA2ED915806C77F028EF56A63E16E502A0C">
                    <name>IsOtherUpper(uchar c)</name>
                    <syntax>public bool IsOtherUpper(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsParagraphSeparator_12BE7D5F7A15FAFA85DE8A82AD592C871956BF90">
                    <name>IsParagraphSeparator(uchar c)</name>
                    <syntax>public bool IsParagraphSeparator(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsPrintable_6CF5A9529F688BC46AC41DB5AD1B8027DF21D055">
                    <name>IsPrintable(char c)</name>
                    <syntax>public nothrow inline bool IsPrintable(char c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699076"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsPrivateUse_4EA318F6A8E0FD9230AEE840BF2C4A2FCC75928A">
                    <name>IsPrivateUse(uchar c)</name>
                    <syntax>public bool IsPrivateUse(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_group_IsPunctuation_64A14B28D86ADA4B5DF2068E8FFAB2A06591DD74">
                    <name>IsPunctuation</name>
                    <overloads>
                        <overload id="function_IsPunctuation_57C48AFE29E6363BA112CFF6B3595EC687CF7850">
                            <name>IsPunctuation(char c)</name>
                            <syntax>public nothrow inline bool IsPunctuation(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699076"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_IsPunctuation_E8E9DC4B93CFC0D26F21D71ED3FC8468B625DB7A">
                            <name>IsPunctuation(uchar c)</name>
                            <syntax>public bool IsPunctuation(uchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699078"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_IsSeparator_A06CDDECA4B024E0407B53D984C3E2760B85BD62">
                    <name>IsSeparator(uchar c)</name>
                    <syntax>public bool IsSeparator(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsSpace_0F0528438DF3BD6B22C119CEDCD118CA859FF906">
                    <name>IsSpace(char c)</name>
                    <syntax>public nothrow inline bool IsSpace(char c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699076"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsSpaceSeparator_A5593DE69EF2EEFE0C1D597E035393ED54B7AA43">
                    <name>IsSpaceSeparator(uchar c)</name>
                    <syntax>public bool IsSpaceSeparator(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsSpacingMark_382F69792F96B14A25225CDD5358ED3A0F279684">
                    <name>IsSpacingMark(uchar c)</name>
                    <syntax>public bool IsSpacingMark(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsSurrogate_BA9581C3BE8A39B853F2382CFC7EE47FC7929483">
                    <name>IsSurrogate(uchar c)</name>
                    <syntax>public bool IsSurrogate(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsSymbol_2DE870E05451E073BC5BA44C09EA6962A55154C0">
                    <name>IsSymbol(uchar c)</name>
                    <syntax>public bool IsSymbol(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsTitleLetter_4CC00CE0AD9F0CEE4274754B5F104674C711E226">
                    <name>IsTitleLetter(uchar c)</name>
                    <syntax>public bool IsTitleLetter(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsUnassigned_7A9655FCD1C9E3C89581ACA6B30A3D3FC51D151C">
                    <name>IsUnassigned(uchar c)</name>
                    <syntax>public bool IsUnassigned(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsUpper_4E5CAE1559A89743591F42645063E797B6EC08DA">
                    <name>IsUpper(char c)</name>
                    <syntax>public nothrow inline bool IsUpper(char c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699076"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsUpperLetter_519164F2126C8F2C47F1CEB256A479ECDAA2683B">
                    <name>IsUpperLetter(uchar c)</name>
                    <syntax>public bool IsUpperLetter(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsUppercase_1D9AD3532E1AEAB4BFA2EDDAF41F7F5B94AEBD43">
                    <name>IsUppercase(uchar c)</name>
                    <syntax>public bool IsUppercase(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsWhiteSpace_307B86C58DC980235B9FD6ABAA558DDE38C73207">
                    <name>IsWhiteSpace(uchar c)</name>
                    <syntax>public bool IsWhiteSpace(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_LastComponentsEqual_A680294D46249F2F2A986CE8CF252E55918706A6">
                    <name>LastComponentsEqual&lt;CharT>(const String&lt;CharT>&amp; s0, const String&lt;CharT>&amp; s1, CharT componentSeparator)</name>
                    <syntax>public bool LastComponentsEqual&lt;CharT>(const String&lt;CharT>&amp; s0, const String&lt;CharT>&amp; s1, CharT componentSeparator);</syntax>
                    <templateParameters>
                        <templateParameter id="8699902">
                            <name>CharT</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>s0</name>
                            <type ref="type.8702956"/>
                        </parameter>
                        <parameter>
                            <name>s1</name>
                            <type ref="type.8702956"/>
                        </parameter>
                        <parameter>
                            <name>componentSeparator</name>
                            <type ref="8699902"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_group_LexicographicalCompare_DD4D017E1D8E3AA9BB7E7D0E4F0E9FC2BEA523CD">
                    <name>LexicographicalCompare</name>
                    <overloads>
                        <overload id="function_LexicographicalCompare_FFF6DCB7FC92DFB6759775D2FBBC38CF4AD35EEE">
                            <name>LexicographicalCompare&lt;I1, I2, R>(I1 first1, I1 last1, I2 first2, I2 last2, R r)</name>
                            <syntax>public nothrow constexpr bool LexicographicalCompare&lt;I1, I2, R>(I1 first1, I1 last1, I2 first2, I2 last2, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="8699367">
                                    <name>I1</name>
                                </templateParameter>
                                <templateParameter id="8699368">
                                    <name>I2</name>
                                </templateParameter>
                                <templateParameter id="8699369">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first1</name>
                                    <type ref="8699367"/>
                                </parameter>
                                <parameter>
                                    <name>last1</name>
                                    <type ref="8699367"/>
                                </parameter>
                                <parameter>
                                    <name>first2</name>
                                    <type ref="8699368"/>
                                </parameter>
                                <parameter>
                                    <name>last2</name>
                                    <type ref="8699368"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="8699369"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699367"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="8699368"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <concept ref="concept_Same_DBCFA3D7303B9F160493F695D4DCB6973FFF06E3">
                                    <params>
                                        <type ref="8699367"/>
                                        <dot>ValueType</dot>
                                        <type ref="8699368"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                                <connector>and</connector>
                                <concept ref="concept_Relation_34B41129EB756D944983CCCA612EDAA19318537E">
                                    <params>
                                        <type ref="8699369"/>
                                        <type ref="8699367"/>
                                        <dot>ValueType</dot>
                                        <type ref="8699368"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                                <connector>and</connector>
                                <concept ref="concept_Relation_34B41129EB756D944983CCCA612EDAA19318537E">
                                    <params>
                                        <type ref="8699369"/>
                                        <type ref="8699368"/>
                                        <dot>ValueType</dot>
                                        <type ref="8699367"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                        <overload id="function_LexicographicalCompare_42108CDE14078EB7642A03C7B3029349E95F614D">
                            <name>LexicographicalCompare&lt;I1, I2>(I1 first1, I1 last1, I2 first2, I2 last2)</name>
                            <syntax>public nothrow inline constexpr bool LexicographicalCompare&lt;I1, I2>(I1 first1, I1 last1, I2 first2, I2 last2);</syntax>
                            <templateParameters>
                                <templateParameter id="8699370">
                                    <name>I1</name>
                                </templateParameter>
                                <templateParameter id="8699371">
                                    <name>I2</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first1</name>
                                    <type ref="8699370"/>
                                </parameter>
                                <parameter>
                                    <name>last1</name>
                                    <type ref="8699370"/>
                                </parameter>
                                <parameter>
                                    <name>first2</name>
                                    <type ref="8699371"/>
                                </parameter>
                                <parameter>
                                    <name>last2</name>
                                    <type ref="8699371"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699370"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="8699371"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <concept ref="concept_LessThanComparable_1379E4E0FDC9326039B5F717F269D6FD46537B48">
                                    <params>
                                        <type ref="8699370"/>
                                        <dot>ValueType</dot>
                                        <type ref="8699371"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_LinearInsert_B3BEEF9AC2F8E728CA9FE3CD94FCAC62B1D21A7D">
                    <name>LinearInsert&lt;I, R>(I first, I last, R r)</name>
                    <syntax>public void LinearInsert&lt;I, R>(I first, I last, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="8699346">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="8699347">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>first</name>
                            <type ref="8699346"/>
                        </parameter>
                        <parameter>
                            <name>last</name>
                            <type ref="8699346"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="8699347"/>
                        </parameter>
                    </parameters>
                    <constraint>
                        <type ref="8699346"/>
                        <connector>is</connector>
                        <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                        <connector>and</connector>
                        <type ref="8699347"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="8699347"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="8699346"/>
                        <dot>ValueType</dot>
                    </constraint>
                </function>
                <function id="function_group_LowerBound_4E608FCCE72FB95B0FC5C14BAC36486D3EE255DA">
                    <name>LowerBound</name>
                    <overloads>
                        <overload id="function_LowerBound_33503B4F54B88B388DB6425087C7EE0EFA85F953">
                            <name>LowerBound&lt;I, T, R>(I first, I last, const T&amp; value, R r)</name>
                            <syntax>public nothrow constexpr I LowerBound&lt;I, T, R>(I first, I last, const T&amp; value, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="8699280">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699281">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699282">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="8699280"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="8699280"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8700118"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="8699282"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699280"/>
                            <constraint>
                                <type ref="8699280"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <type ref="8699281"/>
                                <connector>is</connector>
                                <type ref="8699280"/>
                                <dot>ValueType</dot>
                                <connector>and</connector>
                                <type ref="8699282"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="8699282"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="8699280"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_LowerBound_F00524471F29AAE9BD53050A0E5951A3CD946740">
                            <name>LowerBound&lt;I, T>(I first, I last, const T&amp; value)</name>
                            <syntax>public nothrow constexpr I LowerBound&lt;I, T>(I first, I last, const T&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="8699278">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699279">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="8699278"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="8699278"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8700117"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699278"/>
                            <constraint>
                                <type ref="8699278"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <concept ref="concept_TotallyOrdered_40CD71CFED7B3E26AA555259C8C3A14D6CE666EC">
                                    <params>
                                        <type ref="8699279"/>
                                        <type ref="8699278"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_MakeCharLiteral_F1BA7D855D42B3A9422870DC8C57E80AF15D39E5">
                    <name>MakeCharLiteral(char c)</name>
                    <syntax>public nothrow String&lt;char> MakeCharLiteral(char c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699076"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700206"/>
                </function>
                <function id="function_MakePair_091EE2C5D4B6ECC9E0FCE7A1DFD05AEA855F10DD">
                    <name>MakePair&lt;T, U>(const T&amp; first, const U&amp; second)</name>
                    <syntax>public Pair&lt;T, U> MakePair&lt;T, U>(const T&amp; first, const U&amp; second);</syntax>
                    <templateParameters>
                        <templateParameter id="8699776">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699777">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>first</name>
                            <type ref="type.8701734"/>
                        </parameter>
                        <parameter>
                            <name>second</name>
                            <type ref="type.8701735"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                    <constraint>
                        <type ref="8699776"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699777"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                </function>
                <function id="function_MakeStringLiteral_E9A11D27C4B9A51259238780159F42DF979F55F9">
                    <name>MakeStringLiteral(const String&lt;char>&amp; s)</name>
                    <syntax>public nothrow String&lt;char> MakeStringLiteral(const String&lt;char>&amp; s);</syntax>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700206"/>
                </function>
                <function id="function_Max_5B66F6DC093633E55C645B62418F87CFBD5A5305">
                    <name>Max&lt;T>(const T&amp; left, const T&amp; right)</name>
                    <syntax>public nothrow inline constexpr const T&amp; Max&lt;T>(const T&amp; left, const T&amp; right);</syntax>
                    <templateParameters>
                        <templateParameter id="8699260">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.8700111"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.8700111"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700111"/>
                    <constraint>
                        <type ref="8699260"/>
                        <connector>is</connector>
                        <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                    </constraint>
                </function>
                <function id="function_group_MaxElement_B18B87616B198D6C5C665E39BCF9776CFAFB1BE5">
                    <name>MaxElement</name>
                    <overloads>
                        <overload id="function_MaxElement_FF8CA1CF7A3D835CD4A0BCED3E0C62EEBF081FB6">
                            <name>MaxElement&lt;I, R>(I first, I last, R r)</name>
                            <syntax>public nothrow constexpr I MaxElement&lt;I, R>(I first, I last, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="8699376">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699377">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="8699376"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="8699376"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="8699377"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699376"/>
                            <constraint>
                                <type ref="8699376"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <type ref="8699377"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="8699377"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="8699376"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_MaxElement_5F4DB005FB70E8E06167130FA7CB6A117CDA4165">
                            <name>MaxElement&lt;I>(I first, I last)</name>
                            <syntax>public nothrow constexpr I MaxElement&lt;I>(I first, I last);</syntax>
                            <templateParameters>
                                <templateParameter id="8699375">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="8699375"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="8699375"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699375"/>
                            <constraint>
                                <type ref="8699375"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <type ref="8699375"/>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_MaxValue_C02F0D23AF4E75F5C72AE164E293C1CEEA6F5661">
                    <name>MaxValue</name>
                    <overloads>
                        <overload id="function_MaxValue_DE88DEFAA8AF050B58EC2513EFA576A111A844C1">
                            <name>MaxValue(byte @p0)</name>
                            <syntax>public nothrow inline constexpr byte MaxValue(byte @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8699067"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699067"/>
                        </overload>
                        <overload id="function_MaxValue_616347F5FAC086E75DFA9FF81B50B180003ED4A6">
                            <name>MaxValue(int @p0)</name>
                            <syntax>public nothrow inline constexpr int MaxValue(int @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8699070"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699070"/>
                        </overload>
                        <overload id="function_MaxValue_E369F2CA0F24D5D06CFFA3C50195A2174B479D81">
                            <name>MaxValue(long @p0)</name>
                            <syntax>public nothrow inline constexpr long MaxValue(long @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                        </overload>
                        <overload id="function_MaxValue_199C2DBC71B2BFEDF36F1656E1522CA6A8E8606E">
                            <name>MaxValue(sbyte @p0)</name>
                            <syntax>public nothrow inline constexpr sbyte MaxValue(sbyte @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8699066"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699066"/>
                        </overload>
                        <overload id="function_MaxValue_DC8C459E75C536CB848B3BA8FE4F186AE7FD7D38">
                            <name>MaxValue(short @p0)</name>
                            <syntax>public nothrow inline constexpr short MaxValue(short @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8699068"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699068"/>
                        </overload>
                        <overload id="function_MaxValue_CAABDDE04B4A8238707EF41859350E87642C3E87">
                            <name>MaxValue(uint @p0)</name>
                            <syntax>public nothrow inline constexpr uint MaxValue(uint @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8699071"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699071"/>
                        </overload>
                        <overload id="function_MaxValue_50B40BC4700F26407A141D932F04B6E7FD60E31F">
                            <name>MaxValue(ulong @p0)</name>
                            <syntax>public nothrow inline constexpr ulong MaxValue(ulong @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8699073"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_MaxValue_58C32894219915DE1594BBA6EDBD1E46667CC376">
                            <name>MaxValue(ushort @p0)</name>
                            <syntax>public nothrow inline constexpr ushort MaxValue(ushort @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8699069"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699069"/>
                        </overload>
                        <overload id="function_MaxValue_449A6F473F163201FBD565A7BE36D905EA0B8BA1">
                            <name>MaxValue&lt;I>()</name>
                            <syntax>public nothrow inline constexpr I MaxValue&lt;I>();</syntax>
                            <templateParameters>
                                <templateParameter id="8699728">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <returnType ref="8699728"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_Median_E3C49FEEE2E334F6677C40FEE29BE673069DAB94">
                    <name>Median</name>
                    <overloads>
                        <overload id="function_Median_3439D2C390416494892CC4F6B67DCCD4815C9B71">
                            <name>Median&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r)</name>
                            <syntax>public nothrow const T&amp; Median&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="8699337">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699338">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>a</name>
                                    <type ref="type.8700142"/>
                                </parameter>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.8700142"/>
                                </parameter>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8700142"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="8699338"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700142"/>
                            <constraint>
                                <type ref="8699337"/>
                                <connector>is</connector>
                                <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                                <connector>and</connector>
                                <type ref="8699338"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="8699338"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="8699337"/>
                            </constraint>
                        </overload>
                        <overload id="function_Median_09C3D002E4CA4B392F51A688106F04DDEAD37EC6">
                            <name>Median&lt;T>(const T&amp; a, const T&amp; b, const T&amp; c)</name>
                            <syntax>public nothrow const T&amp; Median&lt;T>(const T&amp; a, const T&amp; b, const T&amp; c);</syntax>
                            <templateParameters>
                                <templateParameter id="8699339">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>a</name>
                                    <type ref="type.8700143"/>
                                </parameter>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.8700143"/>
                                </parameter>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8700143"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700143"/>
                            <constraint>
                                <type ref="8699339"/>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_MemAlloc_36ED04A745CE2202B6B7DB8800F0042D750EDE8D">
                    <name>MemAlloc</name>
                    <overloads>
                        <overload id="function_MemAlloc_53E1570ADBDFA8991E7C46F22D888AEECC5F91F0">
                            <name>MemAlloc(long size)</name>
                            <syntax>public nothrow inline void* MemAlloc(long size);</syntax>
                            <parameters>
                                <parameter>
                                    <name>size</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699217"/>
                        </overload>
                        <overload id="function_MemAlloc_7450FACC9897EC02CFDCF5A0559CCEF3BF5F621C">
                            <name>MemAlloc(long size, const char* info)</name>
                            <syntax>public nothrow inline void* MemAlloc(long size, const char* info);</syntax>
                            <parameters>
                                <parameter>
                                    <name>size</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                                <parameter>
                                    <name>info</name>
                                    <type ref="type.8699214"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699217"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_MemFree_F42D6F4AE4429363EF26E0E6D82DABE4C092A340">
                    <name>MemFree(void* ptr)</name>
                    <syntax>public nothrow inline void MemFree(void* ptr);</syntax>
                    <parameters>
                        <parameter>
                            <name>ptr</name>
                            <type ref="type.8699217"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_MemGrow_FA58EDDC386D5CFBCBFE74FD5DF1995A285F502C">
                    <name>MemGrow(long size)</name>
                    <syntax>public nothrow inline long MemGrow(long size);</syntax>
                    <parameters>
                        <parameter>
                            <name>size</name>
                            <type ref="type.8699072"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699072"/>
                </function>
                <function id="function_Min_CBFBA4BF1C9AFF4708FC71F4031C929A1A8AE1FB">
                    <name>Min&lt;T>(const T&amp; left, const T&amp; right)</name>
                    <syntax>public nothrow inline constexpr const T&amp; Min&lt;T>(const T&amp; left, const T&amp; right);</syntax>
                    <templateParameters>
                        <templateParameter id="8699259">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.8700110"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.8700110"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700110"/>
                    <constraint>
                        <type ref="8699259"/>
                        <connector>is</connector>
                        <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                    </constraint>
                </function>
                <function id="function_group_MinElement_4CEA339A46E33298E351B648874ED60629D5014C">
                    <name>MinElement</name>
                    <overloads>
                        <overload id="function_MinElement_8D5B35DF41926CB53FAA9E9946E0DA1FEAD2C088">
                            <name>MinElement&lt;I, R>(I first, I last, R r)</name>
                            <syntax>public nothrow constexpr I MinElement&lt;I, R>(I first, I last, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="8699373">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699374">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="8699373"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="8699373"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="8699374"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699373"/>
                            <constraint>
                                <type ref="8699373"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <type ref="8699374"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="8699374"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="8699373"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_MinElement_0FE98C24F81445FACEB736E09F4C742FDB78FA62">
                            <name>MinElement&lt;I>(I first, I last)</name>
                            <syntax>public nothrow constexpr I MinElement&lt;I>(I first, I last);</syntax>
                            <templateParameters>
                                <templateParameter id="8699372">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="8699372"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="8699372"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699372"/>
                            <constraint>
                                <type ref="8699372"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <type ref="8699372"/>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_MinValue_496E80AC37CDA6B4BDBE753807CAB1F66A49C220">
                    <name>MinValue</name>
                    <overloads>
                        <overload id="function_MinValue_64F62E69F2C758B6A3C721F42F13E6C9C060F155">
                            <name>MinValue(byte @p0)</name>
                            <syntax>public nothrow inline constexpr byte MinValue(byte @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8699067"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699067"/>
                        </overload>
                        <overload id="function_MinValue_68691FC9F554C578D2EDB1441CECD0C2314D3B4C">
                            <name>MinValue(int @p0)</name>
                            <syntax>public nothrow inline constexpr int MinValue(int @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8699070"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699070"/>
                        </overload>
                        <overload id="function_MinValue_5037BB423CB996FD21BAB499A02478DA77FA6167">
                            <name>MinValue(long @p0)</name>
                            <syntax>public nothrow inline constexpr long MinValue(long @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                        </overload>
                        <overload id="function_MinValue_6C4059FF84B8A33E9B200695D34ED10F98D70324">
                            <name>MinValue(sbyte @p0)</name>
                            <syntax>public nothrow inline constexpr sbyte MinValue(sbyte @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8699066"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699066"/>
                        </overload>
                        <overload id="function_MinValue_1B5F77FD55ADEB0E8929CF4C57D427C69A2F96E2">
                            <name>MinValue(short @p0)</name>
                            <syntax>public nothrow inline constexpr short MinValue(short @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8699068"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699068"/>
                        </overload>
                        <overload id="function_MinValue_B946BF3D8688955F7F11F17DDC3B12C3552D2368">
                            <name>MinValue(uint @p0)</name>
                            <syntax>public nothrow inline constexpr uint MinValue(uint @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8699071"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699071"/>
                        </overload>
                        <overload id="function_MinValue_96AFDE92990D759401BB4D3C3300CE1DA50B1115">
                            <name>MinValue(ulong @p0)</name>
                            <syntax>public nothrow inline constexpr ulong MinValue(ulong @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8699073"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_MinValue_8AB6697EE020A2752DA1A641980E9ED04D1C19B9">
                            <name>MinValue(ushort @p0)</name>
                            <syntax>public nothrow inline constexpr ushort MinValue(ushort @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8699069"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699069"/>
                        </overload>
                        <overload id="function_MinValue_17D0FE1FF0B5336B80C55AD145120284E7464697">
                            <name>MinValue&lt;I>()</name>
                            <syntax>public nothrow inline constexpr I MinValue&lt;I>();</syntax>
                            <templateParameters>
                                <templateParameter id="8699727">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <returnType ref="8699727"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_Move_B45B0CB721AA583827DCF8FAC44011D6ACED05DE">
                    <name>Move&lt;I, O>(I begin, I end, O to)</name>
                    <syntax>public O Move&lt;I, O>(I begin, I end, O to);</syntax>
                    <templateParameters>
                        <templateParameter id="8699270">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="8699271">
                            <name>O</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="8699270"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="8699270"/>
                        </parameter>
                        <parameter>
                            <name>to</name>
                            <type ref="8699271"/>
                        </parameter>
                    </parameters>
                    <returnType ref="8699271"/>
                    <constraint>
                        <type ref="8699270"/>
                        <connector>is</connector>
                        <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                        <connector>and</connector>
                        <type ref="8699271"/>
                        <connector>is</connector>
                        <concept ref="concept_OutputIterator_A454885B47A3648BC107033D34E4A3F5AF8202EC"/>
                        <connector>and</connector>
                        <type ref="8699271"/>
                        <dot>ValueType</dot>
                        <connector>is</connector>
                        <type ref="8699270"/>
                        <dot>ValueType</dot>
                        <connector>and</connector>
                        <type ref="8699270"/>
                        <dot>ValueType</dot>
                        <connector>is</connector>
                        <concept ref="concept_MoveAssignable_DF00F01AE5185608C8DBD5AB4BF79B2C07558F59"/>
                    </constraint>
                </function>
                <function id="function_MoveBackward_059B97D0C776DC209D710E5193DAB43DCCC133BB">
                    <name>MoveBackward&lt;I, O>(I begin, I end, O to)</name>
                    <syntax>public O MoveBackward&lt;I, O>(I begin, I end, O to);</syntax>
                    <templateParameters>
                        <templateParameter id="8699272">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="8699273">
                            <name>O</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="8699272"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="8699272"/>
                        </parameter>
                        <parameter>
                            <name>to</name>
                            <type ref="8699273"/>
                        </parameter>
                    </parameters>
                    <returnType ref="8699273"/>
                    <constraint>
                        <type ref="8699272"/>
                        <connector>is</connector>
                        <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                        <connector>and</connector>
                        <type ref="8699273"/>
                        <connector>is</connector>
                        <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                        <connector>and</connector>
                        <type ref="8699273"/>
                        <dot>ValueType</dot>
                        <connector>is</connector>
                        <type ref="8699272"/>
                        <dot>ValueType</dot>
                        <connector>and</connector>
                        <type ref="8699272"/>
                        <dot>ValueType</dot>
                        <connector>is</connector>
                        <concept ref="concept_MoveAssignable_DF00F01AE5185608C8DBD5AB4BF79B2C07558F59"/>
                    </constraint>
                </function>
                <function id="function_group_Next_3F376F15397ED19B4B36DC08482D988F68581D43">
                    <name>Next</name>
                    <overloads>
                        <overload id="function_Next_F02FC54A148D17AAF00ACBAA87EAE3B08F372D91">
                            <name>Next&lt;I>(I i, long n) where I is ForwardIterator</name>
                            <syntax>public nothrow constexpr I Next&lt;I>(I i, long n);</syntax>
                            <templateParameters>
                                <templateParameter id="8699276">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>i</name>
                                    <type ref="8699276"/>
                                </parameter>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699276"/>
                            <constraint>
                                <type ref="8699276"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                            </constraint>
                        </overload>
                        <overload id="function_Next_B70B42B80A13F841E59174EC64542D930276DB0C">
                            <name>Next&lt;I>(I i, long n) where I is RandomAccessIterator</name>
                            <syntax>public nothrow inline constexpr I Next&lt;I>(I i, long n);</syntax>
                            <templateParameters>
                                <templateParameter id="8699277">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>i</name>
                                    <type ref="8699277"/>
                                </parameter>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699277"/>
                            <constraint>
                                <type ref="8699277"/>
                                <connector>is</connector>
                                <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_NextPermutation_97923842316AFBCC61B8AFD5FFCFD4DBBA4074EE">
                    <name>NextPermutation</name>
                    <overloads>
                        <overload id="function_NextPermutation_A720BCA204B7AEDAABB9330A5AEF26BA14560D68">
                            <name>NextPermutation&lt;I, R>(I begin, I end, R r)</name>
                            <syntax>public nothrow bool NextPermutation&lt;I, R>(I begin, I end, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="8699382">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699383">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699382"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699382"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="8699383"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699382"/>
                                <connector>is</connector>
                                <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                                <connector>and</connector>
                                <type ref="8699383"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="8699383"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="8699382"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_NextPermutation_B07C3C3E53608A63421A37FD8CF4ECAF26BB4FEA">
                            <name>NextPermutation&lt;I>(I begin, I end)</name>
                            <syntax>public nothrow bool NextPermutation&lt;I>(I begin, I end);</syntax>
                            <templateParameters>
                                <templateParameter id="8699381">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699381"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699381"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699381"/>
                                <connector>is</connector>
                                <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                                <connector>and</connector>
                                <type ref="8699381"/>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_Now_C86A8B49C661A4DB4D3A6B547D79A737589642E7">
                    <name>Now()</name>
                    <syntax>public nothrow TimePoint Now();</syntax>
                    <returnType ref="class_TimePoint_BE09785FA47D4049B051C2D868BEEED92062875C"/>
                </function>
                <function id="function_group_ParseBool_084FAB887C93F5262A7707B426AE525BB276B61C">
                    <name>ParseBool</name>
                    <overloads>
                        <overload id="function_ParseBool_C078D6115B776EA195D349AEE10222716B917B37">
                            <name>ParseBool(const String&lt;char>&amp; s)</name>
                            <syntax>public bool ParseBool(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_ParseBool_F9642D0DAC76E3990906B113448266EA3C3F5CCE">
                            <name>ParseBool(const String&lt;char>&amp; s, bool&amp; x)</name>
                            <syntax>public nothrow bool ParseBool(const String&lt;char>&amp; s, bool&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699082"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseByte_53D5A6C7806BE112830E1BBEED293F023766B583">
                    <name>ParseByte</name>
                    <overloads>
                        <overload id="function_ParseByte_5291A4C705FDBE9B740FF16BC02AC364BDF4C804">
                            <name>ParseByte(const String&lt;char>&amp; s)</name>
                            <syntax>public byte ParseByte(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699067"/>
                        </overload>
                        <overload id="function_ParseByte_F35CB8343805B37AD1C818861549696565670EA1">
                            <name>ParseByte(const String&lt;char>&amp; s, byte&amp; x)</name>
                            <syntax>public nothrow bool ParseByte(const String&lt;char>&amp; s, byte&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699088"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseDate_2F3BED6623110355F19E617A17559FC78902D5A5">
                    <name>ParseDate</name>
                    <overloads>
                        <overload id="function_ParseDate_433998A786A57D87C1AE8D46DC71E3292DBB4811">
                            <name>ParseDate(const String&lt;char>&amp; dateStr, Date&amp; date)</name>
                            <syntax>public nothrow bool ParseDate(const String&lt;char>&amp; dateStr, Date&amp; date);</syntax>
                            <parameters>
                                <parameter>
                                    <name>dateStr</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>date</name>
                                    <type ref="type.8699943"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_ParseDate_B01B44F597CD23B4074D957A10FD0D04679A2F22">
                            <name>ParseDate(const String&lt;char>&amp; dateStr, Date&amp; date, int&amp; dateEnd)</name>
                            <syntax>public nothrow bool ParseDate(const String&lt;char>&amp; dateStr, Date&amp; date, int&amp; dateEnd);</syntax>
                            <parameters>
                                <parameter>
                                    <name>dateStr</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>date</name>
                                    <type ref="type.8699943"/>
                                </parameter>
                                <parameter>
                                    <name>dateEnd</name>
                                    <type ref="type.8699097"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_ParseDate_CC4704624DC09FB715890C5E5DE6AD6D63454B7B">
                            <name>ParseDate(const String&lt;char>&amp; s)</name>
                            <syntax>public Date ParseDate(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_Date_351EEEABF504E83A9336BC83CE10D3450072F1E8"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseDateTime_9F9D0626306E4765B2DFC3770756FDCB62B338A5">
                    <name>ParseDateTime</name>
                    <overloads>
                        <overload id="function_ParseDateTime_9551947042AB8A378F1736D4773FA41B96CBF050">
                            <name>ParseDateTime(const String&lt;char>&amp; dateTimeStr, DateTime&amp; dateTime)</name>
                            <syntax>public bool ParseDateTime(const String&lt;char>&amp; dateTimeStr, DateTime&amp; dateTime);</syntax>
                            <parameters>
                                <parameter>
                                    <name>dateTimeStr</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>dateTime</name>
                                    <type ref="type.8699949"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_ParseDateTime_544D549054D568822B68A83FF50889205A7A3BF9">
                            <name>ParseDateTime(const String&lt;char>&amp; s)</name>
                            <syntax>public DateTime ParseDateTime(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_DateTime_1CCCF400289F734AAAB9BC0562E46C77468B398E"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseDouble_A0D77F9140BDCC734DC4E9B3719FB6CBDE7F003B">
                    <name>ParseDouble</name>
                    <overloads>
                        <overload id="function_ParseDouble_C29284DDF88680172C6C268F70C1BB57D9FB95F7">
                            <name>ParseDouble(const String&lt;char>&amp; s)</name>
                            <syntax>public double ParseDouble(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699075"/>
                        </overload>
                        <overload id="function_ParseDouble_C665D27C368E4AD34AB32A9DC06AC81A8C798E72">
                            <name>ParseDouble(const String&lt;char>&amp; s, double&amp; x)</name>
                            <syntax>public nothrow bool ParseDouble(const String&lt;char>&amp; s, double&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699112"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseFloat_6E4B68B6C8F960661F802B46DED1F329A72C544F">
                    <name>ParseFloat</name>
                    <overloads>
                        <overload id="function_ParseFloat_153BDC4F9F2B64BB382DC8CE32C6F6AFB46F6E9B">
                            <name>ParseFloat(const String&lt;char>&amp; s)</name>
                            <syntax>public float ParseFloat(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699074"/>
                        </overload>
                        <overload id="function_ParseFloat_45D8DF64FEE8A76A2A3CAFA93197A95C6F214022">
                            <name>ParseFloat(const String&lt;char>&amp; s, float&amp; x)</name>
                            <syntax>public nothrow bool ParseFloat(const String&lt;char>&amp; s, float&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699109"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_ParseFloating_21F94125CF078531EAB76A75E712776EE113C1E6">
                    <name>ParseFloating&lt;T>(const String&lt;char>&amp; s, T&amp; x)</name>
                    <syntax>public nothrow bool ParseFloating&lt;T>(const String&lt;char>&amp; s, T&amp; x);</syntax>
                    <templateParameters>
                        <templateParameter id="8699559">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.8700211"/>
                        </parameter>
                        <parameter>
                            <name>x</name>
                            <type ref="type.8700405"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_ParseHex_6C4BE1AE346F6C18AA453B857B3A84994F9F448F">
                    <name>ParseHex&lt;T>(const String&lt;char>&amp; s, T&amp; x)</name>
                    <syntax>public nothrow bool ParseHex&lt;T>(const String&lt;char>&amp; s, T&amp; x);</syntax>
                    <templateParameters>
                        <templateParameter id="8699558">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.8700211"/>
                        </parameter>
                        <parameter>
                            <name>x</name>
                            <type ref="type.8700404"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                    <constraint>
                        <type ref="8699558"/>
                        <connector>is</connector>
                        <concept ref="concept_UnsignedInteger_FBFA16F1BC6E6222A9D123737D6648E8035C07E7"/>
                    </constraint>
                </function>
                <function id="function_group_ParseHexByte_FB8435F4632FFAFD45E4085C30096F3D88B338E3">
                    <name>ParseHexByte</name>
                    <overloads>
                        <overload id="function_ParseHexByte_FCFB93CBDEF609AFA68F41845F374808CDFFC0B8">
                            <name>ParseHexByte(const String&lt;char>&amp; s)</name>
                            <syntax>public byte ParseHexByte(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699067"/>
                        </overload>
                        <overload id="function_ParseHexByte_95968EF84AA0A823E0BE75B2EEDBA350E052AC02">
                            <name>ParseHexByte(const String&lt;char>&amp; s, byte&amp; x)</name>
                            <syntax>public nothrow bool ParseHexByte(const String&lt;char>&amp; s, byte&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699088"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseHexUInt_5224B815E2FBB6DE9D192B153CA43631C17AE965">
                    <name>ParseHexUInt</name>
                    <overloads>
                        <overload id="function_ParseHexUInt_993E50F29C6ADF022F6E6B249326E3B43D97577D">
                            <name>ParseHexUInt(const String&lt;char>&amp; s)</name>
                            <syntax>public uint ParseHexUInt(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699071"/>
                        </overload>
                        <overload id="function_ParseHexUInt_6FE70E09FD2F8E1339532C5A50FA0F5CED446D25">
                            <name>ParseHexUInt(const String&lt;char>&amp; s, uint&amp; x)</name>
                            <syntax>public nothrow bool ParseHexUInt(const String&lt;char>&amp; s, uint&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699100"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseHexULong_E66BB49C69ADECC9869F38AA84237B6B30F0D7F8">
                    <name>ParseHexULong</name>
                    <overloads>
                        <overload id="function_ParseHexULong_0BDB52019D55DCD511629017293B8CB7F70E0D19">
                            <name>ParseHexULong(const String&lt;char>&amp; s)</name>
                            <syntax>public ulong ParseHexULong(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_ParseHexULong_29E61A2A1B071F3CC953147AE6A31E37F3D60C45">
                            <name>ParseHexULong(const String&lt;char>&amp; s, ulong&amp; x)</name>
                            <syntax>public nothrow bool ParseHexULong(const String&lt;char>&amp; s, ulong&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699106"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseHexUShort_51396E9BB2196400F45ED2DAAE849AAD78C536F2">
                    <name>ParseHexUShort</name>
                    <overloads>
                        <overload id="function_ParseHexUShort_457A3D5F0FCADAEA072C464C9064D1320F8E70E5">
                            <name>ParseHexUShort(const String&lt;char>&amp; s)</name>
                            <syntax>public ushort ParseHexUShort(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699069"/>
                        </overload>
                        <overload id="function_ParseHexUShort_35220636645F0C2E4FAD8C8B55E183B76D9254AA">
                            <name>ParseHexUShort(const String&lt;char>&amp; s, ushort&amp; x)</name>
                            <syntax>public nothrow bool ParseHexUShort(const String&lt;char>&amp; s, ushort&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699094"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseInt_B67AAFE777622136FA7F24CB5C46C2F7246E5F17">
                    <name>ParseInt</name>
                    <overloads>
                        <overload id="function_ParseInt_A8EDABE83FFE7F67EFC550AB3628C92F7F371F0A">
                            <name>ParseInt(const String&lt;char>&amp; s)</name>
                            <syntax>public int ParseInt(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699070"/>
                        </overload>
                        <overload id="function_ParseInt_6D978B62D09C06382D7E544FE2218FBBCE8F7261">
                            <name>ParseInt(const String&lt;char>&amp; s, int&amp; x)</name>
                            <syntax>public nothrow bool ParseInt(const String&lt;char>&amp; s, int&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699097"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseLong_414BBD4BF45B247D40BC5890EAF950198CB547B0">
                    <name>ParseLong</name>
                    <overloads>
                        <overload id="function_ParseLong_5E110253D66A2BBBA2C69FCD0F22949923981EB9">
                            <name>ParseLong(const String&lt;char>&amp; s)</name>
                            <syntax>public long ParseLong(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                        </overload>
                        <overload id="function_ParseLong_AD8AA85AF58FE793B5101DF87591A99AFD91DE67">
                            <name>ParseLong(const String&lt;char>&amp; s, long&amp; x)</name>
                            <syntax>public nothrow bool ParseLong(const String&lt;char>&amp; s, long&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699103"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseSByte_DE90B5647191510542CC02946169FF98F0B2510D">
                    <name>ParseSByte</name>
                    <overloads>
                        <overload id="function_ParseSByte_FD3D0B7FDD31AE69F79D4EA9AC22D44ED24FFC21">
                            <name>ParseSByte(const String&lt;char>&amp; s)</name>
                            <syntax>public sbyte ParseSByte(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699066"/>
                        </overload>
                        <overload id="function_ParseSByte_0A9C2C9AF6AEFC0E33CCD69C8C1B40D28195C061">
                            <name>ParseSByte(const String&lt;char>&amp; s, sbyte&amp; x)</name>
                            <syntax>public nothrow bool ParseSByte(const String&lt;char>&amp; s, sbyte&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699085"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseShort_208F98B2168A7F3453DAFE73C8B85ED6798EF186">
                    <name>ParseShort</name>
                    <overloads>
                        <overload id="function_ParseShort_942B8342150A0AFA155C29C9893DD75918BD655E">
                            <name>ParseShort(const String&lt;char>&amp; s)</name>
                            <syntax>public short ParseShort(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699068"/>
                        </overload>
                        <overload id="function_ParseShort_60EAE1977EEE791A57C6D4778010B65C2F8A7E17">
                            <name>ParseShort(const String&lt;char>&amp; s, short&amp; x)</name>
                            <syntax>public nothrow bool ParseShort(const String&lt;char>&amp; s, short&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699091"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_ParseSigned_2490A3F4C73025AC01798591B3D20BC46F9F19B9">
                    <name>ParseSigned&lt;T>(const String&lt;char>&amp; s, T&amp; x)</name>
                    <syntax>public nothrow bool ParseSigned&lt;T>(const String&lt;char>&amp; s, T&amp; x);</syntax>
                    <templateParameters>
                        <templateParameter id="8699556">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.8700211"/>
                        </parameter>
                        <parameter>
                            <name>x</name>
                            <type ref="type.8700402"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                    <constraint>
                        <type ref="8699556"/>
                        <connector>is</connector>
                        <concept ref="concept_SignedInteger_1433E09EDE31E4C6382A074E0B77CDD99D989804"/>
                    </constraint>
                </function>
                <function id="function_group_ParseUInt_A8D0FE3965D91CF54D51392367B065035814250D">
                    <name>ParseUInt</name>
                    <overloads>
                        <overload id="function_ParseUInt_31A2141A803D936F6D4B8B4E9270289DD11C4BB3">
                            <name>ParseUInt(const String&lt;char>&amp; s)</name>
                            <syntax>public uint ParseUInt(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699071"/>
                        </overload>
                        <overload id="function_ParseUInt_62461AA7F4715A2DEFBDE12F55DEB0C448C8CF7A">
                            <name>ParseUInt(const String&lt;char>&amp; s, uint&amp; x)</name>
                            <syntax>public nothrow bool ParseUInt(const String&lt;char>&amp; s, uint&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699100"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseULong_CBC5121B802127CBE19978397EAD31C21A2E1CFD">
                    <name>ParseULong</name>
                    <overloads>
                        <overload id="function_ParseULong_471B902ADE6210B8E5D22BD6BC5B7F4DCAF2A9ED">
                            <name>ParseULong(const String&lt;char>&amp; s)</name>
                            <syntax>public ulong ParseULong(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_ParseULong_B3721C6787BFD1367888E30DEBB46BB342F61C66">
                            <name>ParseULong(const String&lt;char>&amp; s, ulong&amp; x)</name>
                            <syntax>public nothrow bool ParseULong(const String&lt;char>&amp; s, ulong&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699106"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseUShort_9204BED9FC8BE72D8FBA2ABE82B1A7D447FB3AF2">
                    <name>ParseUShort</name>
                    <overloads>
                        <overload id="function_ParseUShort_2FD0E081EDC2805377A8C46DABD538F1FA94E6BB">
                            <name>ParseUShort(const String&lt;char>&amp; s)</name>
                            <syntax>public ushort ParseUShort(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699069"/>
                        </overload>
                        <overload id="function_ParseUShort_F719D5612C94F65BC3ECD7D4BFB053458C024FFF">
                            <name>ParseUShort(const String&lt;char>&amp; s, ushort&amp; x)</name>
                            <syntax>public nothrow bool ParseUShort(const String&lt;char>&amp; s, ushort&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699094"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_ParseUnsigned_4822463994BF0C74C8399CEB7844AC3FA1271D12">
                    <name>ParseUnsigned&lt;T>(const String&lt;char>&amp; s, T&amp; x)</name>
                    <syntax>public nothrow bool ParseUnsigned&lt;T>(const String&lt;char>&amp; s, T&amp; x);</syntax>
                    <templateParameters>
                        <templateParameter id="8699557">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.8700211"/>
                        </parameter>
                        <parameter>
                            <name>x</name>
                            <type ref="type.8700403"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                    <constraint>
                        <type ref="8699557"/>
                        <connector>is</connector>
                        <concept ref="concept_UnsignedInteger_FBFA16F1BC6E6222A9D123737D6648E8035C07E7"/>
                    </constraint>
                </function>
                <function id="function_PartialQuickSort_CD08D85AD8BFA6CD4F88EAB3E3394655FE0A2209">
                    <name>PartialQuickSort&lt;I, R>(I begin, I end, R r)</name>
                    <syntax>public void PartialQuickSort&lt;I, R>(I begin, I end, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="8699351">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="8699352">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="8699351"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="8699351"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="8699352"/>
                        </parameter>
                    </parameters>
                    <constraint>
                        <type ref="8699351"/>
                        <connector>is</connector>
                        <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                        <connector>and</connector>
                        <type ref="8699352"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="8699352"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="8699351"/>
                        <dot>ValueType</dot>
                    </constraint>
                </function>
                <function id="function_group_PrevPermutation_AC7B564692052D2EFD5D3856B697C1E3DB064645">
                    <name>PrevPermutation</name>
                    <overloads>
                        <overload id="function_PrevPermutation_486D89502402A6AA9B303AF0AFCBE48309DA6F4D">
                            <name>PrevPermutation&lt;I, R>(I begin, I end, R r)</name>
                            <syntax>public nothrow bool PrevPermutation&lt;I, R>(I begin, I end, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="8699385">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699386">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699385"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699385"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="8699386"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699385"/>
                                <connector>is</connector>
                                <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                                <connector>and</connector>
                                <type ref="8699386"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="8699386"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="8699385"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_PrevPermutation_9C00D39EEB47A9289ACE2A58D6AA815E6398E678">
                            <name>PrevPermutation&lt;I>(I begin, I end)</name>
                            <syntax>public nothrow bool PrevPermutation&lt;I>(I begin, I end);</syntax>
                            <templateParameters>
                                <templateParameter id="8699384">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699384"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699384"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699384"/>
                                <connector>is</connector>
                                <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                                <connector>and</connector>
                                <type ref="8699384"/>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_PtrCast_EC9E0D5091C1C3FE953362928E0F6EBB61DC7EA1">
                    <name>PtrCast&lt;U, T>(const SharedPtr&lt;T>&amp; from)</name>
                    <syntax>public nothrow SharedPtr&lt;U> PtrCast&lt;U, T>(const SharedPtr&lt;T>&amp; from);</syntax>
                    <templateParameters>
                        <templateParameter id="8699863">
                            <name>U</name>
                        </templateParameter>
                        <templateParameter id="8699864">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>from</name>
                            <type ref="type.8702404"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.class_SharedPtr_U_19F1777EF4935F63CFF924FFE6F2925770367C61"/>
                </function>
                <function id="function_Random_9AE0308FDE26EB03E6FD7F87B12F37592F2456B1">
                    <name>Random()</name>
                    <syntax>public nothrow inline uint Random();</syntax>
                    <returnType ref="type.8699071"/>
                </function>
                <function id="function_Random64_9DEEEE38C35C0DA11DF1CF903C8F222BED1CD6AC">
                    <name>Random64()</name>
                    <syntax>public nothrow inline ulong Random64();</syntax>
                    <returnType ref="type.8699073"/>
                </function>
                <function id="function_RandomNumber_72C28929E70B8FC171085189AB53F10692D84ACC">
                    <name>RandomNumber(uint n)</name>
                    <syntax>public nothrow inline uint RandomNumber(uint n);</syntax>
                    <parameters>
                        <parameter>
                            <name>n</name>
                            <type ref="type.8699071"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699071"/>
                </function>
                <function id="function_RandomShuffle_C9DE93DB019045CDC0CC68B63177CDC839BABB80">
                    <name>RandomShuffle&lt;I>(I begin, I end)</name>
                    <syntax>public nothrow void RandomShuffle&lt;I>(I begin, I end);</syntax>
                    <templateParameters>
                        <templateParameter id="8699387">
                            <name>I</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="8699387"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="8699387"/>
                        </parameter>
                    </parameters>
                    <constraint>
                        <type ref="8699387"/>
                        <connector>is</connector>
                        <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                    </constraint>
                </function>
                <function id="function_group_Remove_1BC9862FFDA24820D39C204DC95CA88EA05A563D">
                    <name>Remove</name>
                    <overloads>
                        <overload id="function_Remove_BA66775F823B29B9D05B8445FDCE58BCE060D721">
                            <name>Remove&lt;I, P>(I begin, I end, P p)</name>
                            <syntax>public nothrow I Remove&lt;I, P>(I begin, I end, P p);</syntax>
                            <templateParameters>
                                <templateParameter id="8699304">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699305">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699304"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699304"/>
                                </parameter>
                                <parameter>
                                    <name>p</name>
                                    <type ref="8699305"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699304"/>
                            <constraint>
                                <type ref="8699304"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <type ref="8699305"/>
                                <connector>is</connector>
                                <concept ref="concept_UnaryPredicate_817CC9DCD26C0954E03389EC0C9357DB1879C53F"/>
                                <connector>and</connector>
                                <type ref="8699305"/>
                                <dot>ArgumentType</dot>
                                <connector>is</connector>
                                <type ref="8699304"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_Remove_2826AC31B923913DC76A5ECA16BA39022D6C004C">
                            <name>Remove&lt;I, T>(I begin, I end, const T&amp; value)</name>
                            <syntax>public nothrow I Remove&lt;I, T>(I begin, I end, const T&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="8699309">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699310">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699309"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699309"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8700134"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699309"/>
                            <constraint>
                                <type ref="8699309"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <type ref="8699310"/>
                                <connector>is</connector>
                                <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                                <connector>and</connector>
                                <concept ref="concept_EqualityComparable_DDA76B65E48DE418ED1651912DC91E6BCF9A6B60">
                                    <params>
                                        <type ref="8699310"/>
                                        <type ref="8699309"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_RemoveCopy_3FAC2AEC123843A3D4367D4BB708697AA20A0383">
                    <name>RemoveCopy</name>
                    <overloads>
                        <overload id="function_RemoveCopy_CD72CDADD442AB3A060120D1A9517F4A3767DE1C">
                            <name>RemoveCopy&lt;I, O, P>(I begin, I end, O result, P p)</name>
                            <syntax>public nothrow O RemoveCopy&lt;I, O, P>(I begin, I end, O result, P p);</syntax>
                            <templateParameters>
                                <templateParameter id="8699301">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699302">
                                    <name>O</name>
                                </templateParameter>
                                <templateParameter id="8699303">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699301"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699301"/>
                                </parameter>
                                <parameter>
                                    <name>result</name>
                                    <type ref="8699302"/>
                                </parameter>
                                <parameter>
                                    <name>p</name>
                                    <type ref="8699303"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699302"/>
                            <constraint>
                                <type ref="8699301"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="8699302"/>
                                <connector>is</connector>
                                <concept ref="concept_OutputIterator_A454885B47A3648BC107033D34E4A3F5AF8202EC"/>
                                <connector>and</connector>
                                <type ref="8699302"/>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <type ref="8699301"/>
                                <dot>ValueType</dot>
                                <connector>and</connector>
                                <type ref="8699303"/>
                                <connector>is</connector>
                                <concept ref="concept_UnaryPredicate_817CC9DCD26C0954E03389EC0C9357DB1879C53F"/>
                                <connector>and</connector>
                                <type ref="8699303"/>
                                <dot>ArgumentType</dot>
                                <connector>is</connector>
                                <type ref="8699301"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_RemoveCopy_4EEF4D4EBC3B9ED87B8DF406A01D7C555E39647B">
                            <name>RemoveCopy&lt;I, O, T>(I begin, I end, O result, const T&amp; value)</name>
                            <syntax>public nothrow O RemoveCopy&lt;I, O, T>(I begin, I end, O result, const T&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="8699306">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699307">
                                    <name>O</name>
                                </templateParameter>
                                <templateParameter id="8699308">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699306"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699306"/>
                                </parameter>
                                <parameter>
                                    <name>result</name>
                                    <type ref="8699307"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8700133"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699307"/>
                            <constraint>
                                <type ref="8699308"/>
                                <connector>is</connector>
                                <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                                <connector>and</connector>
                                <type ref="8699306"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="8699307"/>
                                <connector>is</connector>
                                <concept ref="concept_OutputIterator_A454885B47A3648BC107033D34E4A3F5AF8202EC"/>
                                <connector>and</connector>
                                <type ref="8699307"/>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <type ref="8699306"/>
                                <dot>ValueType</dot>
                                <connector>and</connector>
                                <concept ref="concept_EqualityComparable_DDA76B65E48DE418ED1651912DC91E6BCF9A6B60">
                                    <params>
                                        <type ref="8699308"/>
                                        <type ref="8699306"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_Reverse_7F57E0F3F6001094CA8E3BF3A6402B2E9F830D46">
                    <name>Reverse</name>
                    <overloads>
                        <overload id="function_Reverse_E6E171FDAD50190ABB8921E3EC7B5C5600AA82DA">
                            <name>Reverse&lt;I>(I begin, I end) where I is BidirectionalIterator</name>
                            <syntax>public nothrow void Reverse&lt;I>(I begin, I end);</syntax>
                            <templateParameters>
                                <templateParameter id="8699263">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699263"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699263"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="8699263"/>
                                <connector>is</connector>
                                <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                            </constraint>
                        </overload>
                        <overload id="function_Reverse_3EFD6CD34716708D7307FA8DB00DE0F87C0B36D2">
                            <name>Reverse&lt;I>(I begin, I end) where I is RandomAccessIterator</name>
                            <syntax>public nothrow void Reverse&lt;I>(I begin, I end);</syntax>
                            <templateParameters>
                                <templateParameter id="8699262">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699262"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699262"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="8699262"/>
                                <connector>is</connector>
                                <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_ReverseUntil_5817FFEA70B9AF39C1CB1F7D7FDD7A22F200808E">
                    <name>ReverseUntil&lt;I>(I first, I middle, I last)</name>
                    <syntax>public Pair&lt;I, I> ReverseUntil&lt;I>(I first, I middle, I last);</syntax>
                    <templateParameters>
                        <templateParameter id="8699264">
                            <name>I</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>first</name>
                            <type ref="8699264"/>
                        </parameter>
                        <parameter>
                            <name>middle</name>
                            <type ref="8699264"/>
                        </parameter>
                        <parameter>
                            <name>last</name>
                            <type ref="8699264"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.class_Pair_I_I_5D033C5BBBF2C4C78CF59858CFB85B4F03BBACA3"/>
                    <constraint>
                        <type ref="8699264"/>
                        <connector>is</connector>
                        <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                    </constraint>
                </function>
                <function id="function_Rotate_00AE246D7967AA4F38BB1BDC01E9C600E6332F56">
                    <name>Rotate&lt;I>(I first, I middle, I last)</name>
                    <syntax>public I Rotate&lt;I>(I first, I middle, I last);</syntax>
                    <templateParameters>
                        <templateParameter id="8699265">
                            <name>I</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>first</name>
                            <type ref="8699265"/>
                        </parameter>
                        <parameter>
                            <name>middle</name>
                            <type ref="8699265"/>
                        </parameter>
                        <parameter>
                            <name>last</name>
                            <type ref="8699265"/>
                        </parameter>
                    </parameters>
                    <returnType ref="8699265"/>
                    <constraint>
                        <type ref="8699265"/>
                        <connector>is</connector>
                        <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                    </constraint>
                </function>
                <function id="function_Rvalue_FC16F1187C8C3CF8D9182A63AC59041EF4474FA2">
                    <name>Rvalue&lt;T>(T&amp;&amp; x)</name>
                    <syntax>public nothrow inline T&amp;&amp; Rvalue&lt;T>(T&amp;&amp; x);</syntax>
                    <templateParameters>
                        <templateParameter id="8699833">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.8701935"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8701935"/>
                </function>
                <function id="function_Select_0_2_DC76CC660DCD753B37546DD00A13EF09D7FCD1F5">
                    <name>Select_0_2&lt;T, R>(const T&amp; a, const T&amp; b, R r)</name>
                    <syntax>public nothrow inline const T&amp; Select_0_2&lt;T, R>(const T&amp; a, const T&amp; b, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="8699325">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699326">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>a</name>
                            <type ref="type.8700136"/>
                        </parameter>
                        <parameter>
                            <name>b</name>
                            <type ref="type.8700136"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="8699326"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700136"/>
                    <constraint>
                        <type ref="8699325"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699326"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="8699326"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="8699325"/>
                    </constraint>
                </function>
                <function id="function_Select_0_3_00EF075749C2485FA077E81651DED5C90B6551C6">
                    <name>Select_0_3&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r)</name>
                    <syntax>public nothrow inline const T&amp; Select_0_3&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="8699329">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699330">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>a</name>
                            <type ref="type.8700138"/>
                        </parameter>
                        <parameter>
                            <name>b</name>
                            <type ref="type.8700138"/>
                        </parameter>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8700138"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="8699330"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700138"/>
                    <constraint>
                        <type ref="8699329"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699330"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="8699330"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="8699329"/>
                    </constraint>
                </function>
                <function id="function_Select_1_2_4CE085251881D0CBBBD4C3DE0FF97DBE5443EC1B">
                    <name>Select_1_2&lt;T, R>(const T&amp; a, const T&amp; b, R r)</name>
                    <syntax>public nothrow inline const T&amp; Select_1_2&lt;T, R>(const T&amp; a, const T&amp; b, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="8699327">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699328">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>a</name>
                            <type ref="type.8700137"/>
                        </parameter>
                        <parameter>
                            <name>b</name>
                            <type ref="type.8700137"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="8699328"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700137"/>
                    <constraint>
                        <type ref="8699327"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699328"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="8699328"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="8699327"/>
                    </constraint>
                </function>
                <function id="function_Select_1_3_3B6D7DAFF9FB8945872BC97360C3725193A0D9CA">
                    <name>Select_1_3&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r)</name>
                    <syntax>public nothrow inline const T&amp; Select_1_3&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="8699335">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699336">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>a</name>
                            <type ref="type.8700141"/>
                        </parameter>
                        <parameter>
                            <name>b</name>
                            <type ref="type.8700141"/>
                        </parameter>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8700141"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="8699336"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700141"/>
                    <constraint>
                        <type ref="8699335"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699336"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="8699336"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="8699335"/>
                    </constraint>
                </function>
                <function id="function_Select_1_3_ab_3B925B31046BCB0718956B668E58A7177C08043F">
                    <name>Select_1_3_ab&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r)</name>
                    <syntax>public nothrow inline const T&amp; Select_1_3_ab&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="8699333">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699334">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>a</name>
                            <type ref="type.8700140"/>
                        </parameter>
                        <parameter>
                            <name>b</name>
                            <type ref="type.8700140"/>
                        </parameter>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8700140"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="8699334"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700140"/>
                    <constraint>
                        <type ref="8699333"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699334"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="8699334"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="8699333"/>
                    </constraint>
                </function>
                <function id="function_Select_2_3_3BA0295A2EE46DDC610E48F03D013A05EC9AC364">
                    <name>Select_2_3&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r)</name>
                    <syntax>public nothrow inline const T&amp; Select_2_3&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="8699331">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699332">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>a</name>
                            <type ref="type.8700139"/>
                        </parameter>
                        <parameter>
                            <name>b</name>
                            <type ref="type.8700139"/>
                        </parameter>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8700139"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="8699332"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700139"/>
                    <constraint>
                        <type ref="8699331"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699332"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="8699332"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="8699331"/>
                    </constraint>
                </function>
                <function id="function_Sleep_07C5C31F0A435CAC593645778FED88F47045D732">
                    <name>Sleep(const Duration&amp; duration)</name>
                    <syntax>public nothrow void Sleep(const Duration&amp; duration);</syntax>
                    <parameters>
                        <parameter>
                            <name>duration</name>
                            <type ref="type.8699939"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_group_Sort_7666CEBAFF90A9B75A2B7090E958EFBB89DD350D">
                    <name>Sort</name>
                    <overloads>
                        <overload id="function_Sort_4BAFE4D9B66A3B662F11730926180EEE44FACBEA">
                            <name>Sort&lt;C, R>(C&amp; c, R r) where C is ForwardContainer and R is Relation and R.Domain is C.Iterator.ValueType</name>
                            <syntax>public void Sort&lt;C, R>(C&amp; c, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="8699360">
                                    <name>C</name>
                                </templateParameter>
                                <templateParameter id="8699361">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8700149"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="8699361"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="8699360"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardContainer_98A0A5CEE1E1C33CCABCFC2F31BF6EE7C21229F2"/>
                                <connector>and</connector>
                                <type ref="8699361"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="8699361"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="8699360"/>
                                <dot>Iterator</dot>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_Sort_8F33FB0548D8CBC19ECCD4AFEB9208CF3695F16A">
                            <name>Sort&lt;C, R>(C&amp; c, R r) where C is RandomAccessContainer and R is Relation and R.Domain is C.Iterator.ValueType</name>
                            <syntax>public inline void Sort&lt;C, R>(C&amp; c, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="8699356">
                                    <name>C</name>
                                </templateParameter>
                                <templateParameter id="8699357">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8700146"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="8699357"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="8699356"/>
                                <connector>is</connector>
                                <concept ref="concept_RandomAccessContainer_7D44EBDB629CA332A20056356A52519C0BB1FADF"/>
                                <connector>and</connector>
                                <type ref="8699357"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="8699357"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="8699356"/>
                                <dot>Iterator</dot>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_Sort_99482E35D0405A77028504E689653BC873F33296">
                            <name>Sort&lt;C>(C&amp; c) where C is ForwardContainer and C.Iterator.ValueType is TotallyOrdered</name>
                            <syntax>public void Sort&lt;C>(C&amp; c);</syntax>
                            <templateParameters>
                                <templateParameter id="8699359">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8700148"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="8699359"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardContainer_98A0A5CEE1E1C33CCABCFC2F31BF6EE7C21229F2"/>
                                <connector>and</connector>
                                <type ref="8699359"/>
                                <dot>Iterator</dot>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                        <overload id="function_Sort_8340E39903690F7CC970F9DCA3EC6209708659F4">
                            <name>Sort&lt;C>(C&amp; c) where C is RandomAccessContainer and C.Iterator.ValueType is TotallyOrdered</name>
                            <syntax>public inline void Sort&lt;C>(C&amp; c);</syntax>
                            <templateParameters>
                                <templateParameter id="8699358">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8700147"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="8699358"/>
                                <connector>is</connector>
                                <concept ref="concept_RandomAccessContainer_7D44EBDB629CA332A20056356A52519C0BB1FADF"/>
                                <connector>and</connector>
                                <type ref="8699358"/>
                                <dot>Iterator</dot>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                        <overload id="function_Sort_953030E48C4F1885F1AAA25A96D1934086D0CB61">
                            <name>Sort&lt;I, R>(I begin, I end, R r) where I is RandomAccessIterator and R is Relation and R.Domain is I.ValueType</name>
                            <syntax>public void Sort&lt;I, R>(I begin, I end, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="8699353">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699354">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699353"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699353"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="8699354"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="8699353"/>
                                <connector>is</connector>
                                <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                                <connector>and</connector>
                                <type ref="8699354"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="8699354"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="8699353"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_Sort_F6AF9C6C068873BD26A0B27B984255291EADC214">
                            <name>Sort&lt;I>(I begin, I end) where I is RandomAccessIterator and I.ValueType is TotallyOrdered</name>
                            <syntax>public inline void Sort&lt;I>(I begin, I end);</syntax>
                            <templateParameters>
                                <templateParameter id="8699355">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699355"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699355"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="8699355"/>
                                <connector>is</connector>
                                <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                                <connector>and</connector>
                                <type ref="8699355"/>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_StrCopy_4A0C4E8198E5EF5112FBB6A6A9D7FF22D5DEC50F">
                    <name>StrCopy</name>
                    <overloads>
                        <overload id="function_StrCopy_E33338E2CBEFA38F9AED4C7D611AB90D30094AA2">
                            <name>StrCopy(char* buf, const char* from)</name>
                            <syntax>public nothrow inline void StrCopy(char* buf, const char* from);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.8699114"/>
                                </parameter>
                                <parameter>
                                    <name>from</name>
                                    <type ref="type.8699214"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_StrCopy_21596AD5C087405301418DF77A78E2BBB8506A64">
                            <name>StrCopy(char* buf, const char* from, long length)</name>
                            <syntax>public nothrow inline long StrCopy(char* buf, const char* from, long length);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.8699114"/>
                                </parameter>
                                <parameter>
                                    <name>from</name>
                                    <type ref="type.8699214"/>
                                </parameter>
                                <parameter>
                                    <name>length</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                        </overload>
                        <overload id="function_StrCopy_85FA11298D9DDD7842BA07B97D83634A05A53EC6">
                            <name>StrCopy(uchar* buf, const uchar* from)</name>
                            <syntax>public nothrow inline void StrCopy(uchar* buf, const uchar* from);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.8699120"/>
                                </parameter>
                                <parameter>
                                    <name>from</name>
                                    <type ref="type.8700301"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_StrCopy_F0B6B2A7812C689A4C44574ECDCA2807B41E6360">
                            <name>StrCopy(uchar* buf, const uchar* from, long length)</name>
                            <syntax>public nothrow inline long StrCopy(uchar* buf, const uchar* from, long length);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.8699120"/>
                                </parameter>
                                <parameter>
                                    <name>from</name>
                                    <type ref="type.8700301"/>
                                </parameter>
                                <parameter>
                                    <name>length</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                        </overload>
                        <overload id="function_StrCopy_A762A6DFC4F0D8606BB1745F77AE4E8A53BB08F5">
                            <name>StrCopy(wchar* buf, const wchar* from)</name>
                            <syntax>public nothrow inline void StrCopy(wchar* buf, const wchar* from);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.8699117"/>
                                </parameter>
                                <parameter>
                                    <name>from</name>
                                    <type ref="type.8700256"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_StrCopy_4A8DD3B1A4CCD84F624B68EF2AE0723E6053B4B7">
                            <name>StrCopy(wchar* buf, const wchar* from, long length)</name>
                            <syntax>public nothrow inline long StrCopy(wchar* buf, const wchar* from, long length);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.8699117"/>
                                </parameter>
                                <parameter>
                                    <name>from</name>
                                    <type ref="type.8700256"/>
                                </parameter>
                                <parameter>
                                    <name>length</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_StrLen_E1408237B9E28715B1F1021B03A515FE487C5571">
                    <name>StrLen</name>
                    <overloads>
                        <overload id="function_StrLen_E4E2B80800D6C90B11154FAF313E748928E8FBC3">
                            <name>StrLen(const char* s)</name>
                            <syntax>public nothrow inline constexpr long StrLen(const char* s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699214"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                        </overload>
                        <overload id="function_StrLen_03E3EF856BABA0A81EED5F3020E66D62C7580B56">
                            <name>StrLen(const uchar* s)</name>
                            <syntax>public nothrow inline constexpr long StrLen(const uchar* s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700301"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                        </overload>
                        <overload id="function_StrLen_069997D39799272F37EE561D43CD95CC115F1C35">
                            <name>StrLen(const wchar* s)</name>
                            <syntax>public nothrow inline constexpr long StrLen(const wchar* s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700256"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_StringStr_AB80FAA80040AF8FFD30F46F9AE41DEC2C4B7C91">
                    <name>StringStr(const String&lt;char>&amp; s)</name>
                    <syntax>public nothrow String&lt;char> StringStr(const String&lt;char>&amp; s);</syntax>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700206"/>
                </function>
                <function id="function_Swap_5FDD933B4C351DD42A3809611282E36ED067EB58">
                    <name>Swap&lt;T>(T&amp; left, T&amp; right)</name>
                    <syntax>public nothrow inline void Swap&lt;T>(T&amp; left, T&amp; right);</syntax>
                    <templateParameters>
                        <templateParameter id="8699261">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.8700112"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.8700112"/>
                        </parameter>
                    </parameters>
                    <constraint>
                        <type ref="8699261"/>
                        <connector>is</connector>
                        <concept ref="concept_MoveConstructible_21D36F4E96F5E3072DD6AAB34A26DF5F90FBC262"/>
                        <connector>and</connector>
                        <type ref="8699261"/>
                        <connector>is</connector>
                        <concept ref="concept_MoveAssignable_DF00F01AE5185608C8DBD5AB4BF79B2C07558F59"/>
                        <connector>and</connector>
                        <type ref="8699261"/>
                        <connector>is</connector>
                        <concept ref="concept_Destructible_0524F34CBA010FC34882287B0116D474909E0966"/>
                    </constraint>
                </function>
                <function id="function_ThrowCapturedException_3C8DDE776866EED7DA7C5B7657B761F790C31B75">
                    <name>ThrowCapturedException(const ExceptionPtr&amp; capturedException)</name>
                    <syntax>public void ThrowCapturedException(const ExceptionPtr&amp; capturedException);</syntax>
                    <parameters>
                        <parameter>
                            <name>capturedException</name>
                            <type ref="type.8699571"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_ThrowConversionException_584AC16B013DF0505027AC8D884E36CAC768A263">
                    <name>ThrowConversionException(const String&lt;char>&amp; message)</name>
                    <syntax>public void ThrowConversionException(const String&lt;char>&amp; message);</syntax>
                    <parameters>
                        <parameter>
                            <name>message</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_ToFolding_77BCF35CC0B385F68233F95A73EA01B85AE3B747">
                    <name>ToFolding(uchar c)</name>
                    <syntax>public uchar ToFolding(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699078"/>
                </function>
                <function id="function_group_ToHexString_D2A266C8387168EA017F082F7A4B74CEEA662432">
                    <name>ToHexString</name>
                    <overloads>
                        <overload id="function_ToHexString_4E1CFB5C127904BDCFB1F3E899C865424D1815CF">
                            <name>ToHexString(byte b)</name>
                            <syntax>public nothrow String&lt;char> ToHexString(byte b);</syntax>
                            <parameters>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.8699067"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToHexString_527046AE04B4B7040863E7CC33ED88D904AE377E">
                            <name>ToHexString(uint u)</name>
                            <syntax>public nothrow String&lt;char> ToHexString(uint u);</syntax>
                            <parameters>
                                <parameter>
                                    <name>u</name>
                                    <type ref="type.8699071"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToHexString_BD59CF1E0692EEDA9B325DE0BB568CCD28177380">
                            <name>ToHexString(ulong u)</name>
                            <syntax>public nothrow String&lt;char> ToHexString(ulong u);</syntax>
                            <parameters>
                                <parameter>
                                    <name>u</name>
                                    <type ref="type.8699073"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToHexString_3CC5F51153C903D5388429FEDD450D85E4356139">
                            <name>ToHexString(ushort u)</name>
                            <syntax>public nothrow String&lt;char> ToHexString(ushort u);</syntax>
                            <parameters>
                                <parameter>
                                    <name>u</name>
                                    <type ref="type.8699069"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToHexString_17592807B6465494A39CD731D5F89EB2F581C4BC">
                            <name>ToHexString&lt;U>(U x)</name>
                            <syntax>public nothrow String&lt;char> ToHexString&lt;U>(U x);</syntax>
                            <templateParameters>
                                <templateParameter id="8699555">
                                    <name>U</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="8699555"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                            <constraint>
                                <type ref="8699555"/>
                                <connector>is</connector>
                                <concept ref="concept_UnsignedInteger_FBFA16F1BC6E6222A9D123737D6648E8035C07E7"/>
                                <connector>and</connector>
                                <concept ref="concept_ExplicitlyConvertible_2C98F7453D3880C7655E44A9545F7CD4CDD591FA">
                                    <params>
                                        <type ref="8699555"/>
                                        <type ref="type.8699067"/>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ToLower_C00A3E8C045C69EB1CC858315670B2219EA7B4A9">
                    <name>ToLower</name>
                    <overloads>
                        <overload id="function_ToLower_DCDA7BD88FD2AFDF98BCB3554C1EBB006DDA62C9">
                            <name>ToLower(const String&lt;char>&amp; s)</name>
                            <syntax>public String&lt;char> ToLower(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToLower_226F2082CE182489148CF5D2B97A2F7A3C467D24">
                            <name>ToLower(const String&lt;uchar>&amp; s)</name>
                            <syntax>public String&lt;uchar> ToLower(const String&lt;uchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700294"/>
                        </overload>
                        <overload id="function_ToLower_D4690233684519923D3D7F65D26FA7307C258536">
                            <name>ToLower(const String&lt;wchar>&amp; s)</name>
                            <syntax>public String&lt;wchar> ToLower(const String&lt;wchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700254"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700249"/>
                        </overload>
                        <overload id="function_ToLower_0DA3C53D741A6C810615241D50D34FE76AAC6241">
                            <name>ToLower(uchar c)</name>
                            <syntax>public uchar ToLower(uchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699078"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699078"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ToString_375A9150E0A25C8B556F19C7CA9A8B507A117C8C">
                    <name>ToString</name>
                    <overloads>
                        <overload id="function_ToString_8228739ACBC7EE96AD4369E2CFFBC3828FFA7BEE">
                            <name>ToString(bool b)</name>
                            <syntax>public nothrow String&lt;char> ToString(bool b);</syntax>
                            <parameters>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToString_8BA3DF1AC43FD53E6A1326B5AE8D12A87BBF1F4F">
                            <name>ToString(byte x)</name>
                            <syntax>public nothrow String&lt;char> ToString(byte x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699067"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToString_1D0635DC777F6FBEE59C24E97D00D5715056AB7F">
                            <name>ToString(char c)</name>
                            <syntax>public nothrow String&lt;char> ToString(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699076"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToString_6B452C6D124C64CBCC35AB25DC3D1C73F31B6309">
                            <name>ToString(double x)</name>
                            <syntax>public nothrow String&lt;char> ToString(double x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699075"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToString_CEF0F721289B512DA78071BC422461771F271D6C">
                            <name>ToString(double x, int maxNumDecimals)</name>
                            <syntax>public nothrow String&lt;char> ToString(double x, int maxNumDecimals);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699075"/>
                                </parameter>
                                <parameter>
                                    <name>maxNumDecimals</name>
                                    <type ref="type.8699070"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToString_8E7BD7A0003F4FEDD8B61CE8B96DB88219152D26">
                            <name>ToString(double x, int minNumDecimals, int maxNumDecimals)</name>
                            <syntax>public nothrow String&lt;char> ToString(double x, int minNumDecimals, int maxNumDecimals);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699075"/>
                                </parameter>
                                <parameter>
                                    <name>minNumDecimals</name>
                                    <type ref="type.8699070"/>
                                </parameter>
                                <parameter>
                                    <name>maxNumDecimals</name>
                                    <type ref="type.8699070"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToString_F29D039818D26751B5EFD81FDEB59B6AD586FE08">
                            <name>ToString(float f)</name>
                            <syntax>public nothrow String&lt;char> ToString(float f);</syntax>
                            <parameters>
                                <parameter>
                                    <name>f</name>
                                    <type ref="type.8699074"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToString_45DAFF73E9D4870570132FAB4BF547270338BCA8">
                            <name>ToString(int x)</name>
                            <syntax>public nothrow String&lt;char> ToString(int x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699070"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToString_126CDC878E235D8E3F81E46AFDE3B64B60083BEC">
                            <name>ToString(long x)</name>
                            <syntax>public nothrow String&lt;char> ToString(long x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToString_89B352277FF5DA9FC346CCEFD7DBB8A98C5DE744">
                            <name>ToString(sbyte x)</name>
                            <syntax>public nothrow String&lt;char> ToString(sbyte x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699066"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToString_A95E76FFEF5D3297419D5A49EFD522B2978154B8">
                            <name>ToString(short x)</name>
                            <syntax>public nothrow String&lt;char> ToString(short x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699068"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToString_043D5132536A071238B1F1B062279BFF0951A59F">
                            <name>ToString(uchar c)</name>
                            <syntax>public String&lt;char> ToString(uchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699078"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToString_C4BC137F246FFC5892F806C6557F3CFBEE99E208">
                            <name>ToString(uint x)</name>
                            <syntax>public nothrow String&lt;char> ToString(uint x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699071"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToString_CBA8B607A96D159C0C24E46462CA7967967BFFEE">
                            <name>ToString(ulong x)</name>
                            <syntax>public nothrow String&lt;char> ToString(ulong x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699073"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToString_6B2D10E604BC0B4502ED6F29941B2F92422F94EF">
                            <name>ToString(ushort x)</name>
                            <syntax>public nothrow String&lt;char> ToString(ushort x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699069"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToString_FA6C75791331B69BD7171EB1F553A80A8B12F707">
                            <name>ToString(wchar c)</name>
                            <syntax>public String&lt;char> ToString(wchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699077"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToString_418890764A2DC069241646B16F59A4D00665BCC9">
                            <name>ToString&lt;I, U>(I x)</name>
                            <syntax>public nothrow String&lt;char> ToString&lt;I, U>(I x);</syntax>
                            <templateParameters>
                                <templateParameter id="8699552">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699553">
                                    <name>U</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="8699552"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                            <constraint>
                                <type ref="8699552"/>
                                <connector>is</connector>
                                <concept ref="concept_SignedInteger_1433E09EDE31E4C6382A074E0B77CDD99D989804"/>
                                <connector>and</connector>
                                <type ref="8699553"/>
                                <connector>is</connector>
                                <concept ref="concept_UnsignedInteger_FBFA16F1BC6E6222A9D123737D6648E8035C07E7"/>
                                <connector>and</connector>
                                <concept ref="concept_ExplicitlyConvertible_2C98F7453D3880C7655E44A9545F7CD4CDD591FA">
                                    <params>
                                        <type ref="8699552"/>
                                        <type ref="8699553"/>
                                    </params>
                                </concept>
                                <connector>and</connector>
                                <concept ref="concept_ExplicitlyConvertible_2C98F7453D3880C7655E44A9545F7CD4CDD591FA">
                                    <params>
                                        <type ref="8699553"/>
                                        <type ref="type.8699067"/>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                        <overload id="function_ToString_B5D4CAADF1202155C66795DE796872A89BA35ACC">
                            <name>ToString&lt;U>(U x)</name>
                            <syntax>public nothrow String&lt;char> ToString&lt;U>(U x);</syntax>
                            <templateParameters>
                                <templateParameter id="8699554">
                                    <name>U</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="8699554"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                            <constraint>
                                <type ref="8699554"/>
                                <connector>is</connector>
                                <concept ref="concept_UnsignedInteger_FBFA16F1BC6E6222A9D123737D6648E8035C07E7"/>
                                <connector>and</connector>
                                <concept ref="concept_ExplicitlyConvertible_2C98F7453D3880C7655E44A9545F7CD4CDD591FA">
                                    <params>
                                        <type ref="8699554"/>
                                        <type ref="type.8699067"/>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_ToTitle_CA6A355EFCEF9BE23CB22F4864D38A0B32EDFB2F">
                    <name>ToTitle(uchar c)</name>
                    <syntax>public uchar ToTitle(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699078"/>
                </function>
                <function id="function_group_ToUpper_FD8BC95A0FA1A0D2E3BF6897AD81F6B4FF55C69A">
                    <name>ToUpper</name>
                    <overloads>
                        <overload id="function_ToUpper_C1833C79BC674DDECF011303494E1C64F2460F14">
                            <name>ToUpper(const String&lt;char>&amp; s)</name>
                            <syntax>public String&lt;char> ToUpper(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToUpper_AE5BA1589AFB8BC3EE16B697600575E5A4D23C8B">
                            <name>ToUpper(const String&lt;uchar>&amp; s)</name>
                            <syntax>public String&lt;uchar> ToUpper(const String&lt;uchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700294"/>
                        </overload>
                        <overload id="function_ToUpper_72C82381C298108E02CDC86E8C43488EE9F6F0F8">
                            <name>ToUpper(const String&lt;wchar>&amp; s)</name>
                            <syntax>public String&lt;wchar> ToUpper(const String&lt;wchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700254"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700249"/>
                        </overload>
                        <overload id="function_ToUpper_74F20A2CB419B4A2BC31BCF221C6A9F4D5B53DE0">
                            <name>ToUpper(uchar c)</name>
                            <syntax>public uchar ToUpper(uchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699078"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699078"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ToUtf16_18D9C2D7A5465C558A6C4E0D6CB5AC1503A1698C">
                    <name>ToUtf16</name>
                    <overloads>
                        <overload id="function_ToUtf16_A5E06C63CBAF22CA84A880EB5BB51269C6BE4257">
                            <name>ToUtf16(const String&lt;char>&amp; utf8Str)</name>
                            <syntax>public String&lt;wchar> ToUtf16(const String&lt;char>&amp; utf8Str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>utf8Str</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700249"/>
                        </overload>
                        <overload id="function_ToUtf16_F2521751AB2A1E1F18C4047AC49CAEAE9CF2EDC6">
                            <name>ToUtf16(const String&lt;uchar>&amp; utf32Str)</name>
                            <syntax>public String&lt;wchar> ToUtf16(const String&lt;uchar>&amp; utf32Str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>utf32Str</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700249"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ToUtf32_ABF914436DBA870AFEF1772C0BDA0BF24FC46D93">
                    <name>ToUtf32</name>
                    <overloads>
                        <overload id="function_ToUtf32_0476C1B2C07579259DF76F80D2F2987EA2B8EFDD">
                            <name>ToUtf32(const String&lt;char>&amp; utf8Str)</name>
                            <syntax>public String&lt;uchar> ToUtf32(const String&lt;char>&amp; utf8Str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>utf8Str</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700294"/>
                        </overload>
                        <overload id="function_ToUtf32_591A6A903DC5D15ED167D4844BC2864FC446614A">
                            <name>ToUtf32(const String&lt;wchar>&amp; utf16Str)</name>
                            <syntax>public String&lt;uchar> ToUtf32(const String&lt;wchar>&amp; utf16Str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>utf16Str</name>
                                    <type ref="type.8700254"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700294"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ToUtf8_CF017AE20B31D7E66A1234D5E05276AAD11F9443">
                    <name>ToUtf8</name>
                    <overloads>
                        <overload id="function_ToUtf8_0F1024A368A6DA5AA49229F7B5E77D3EC9DE4036">
                            <name>ToUtf8(const String&lt;uchar>&amp; utf32Str)</name>
                            <syntax>public String&lt;char> ToUtf8(const String&lt;uchar>&amp; utf32Str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>utf32Str</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_ToUtf8_63916ECE0F4D6130E20FDD15D7F1BFF840F53865">
                            <name>ToUtf8(const String&lt;wchar>&amp; utf16Str)</name>
                            <syntax>public String&lt;char> ToUtf8(const String&lt;wchar>&amp; utf16Str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>utf16Str</name>
                                    <type ref="type.8700254"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_Transform_D04DA8209BBFF0BFA60C50E544D1E07A875ECE3D">
                    <name>Transform</name>
                    <overloads>
                        <overload id="function_Transform_B8468BDCB0593D1F68859325475E6D8E7A6812CE">
                            <name>Transform&lt;I, O, F>(I begin, I end, O to, F fun)</name>
                            <syntax>public O Transform&lt;I, O, F>(I begin, I end, O to, F fun);</syntax>
                            <templateParameters>
                                <templateParameter id="8699318">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699319">
                                    <name>O</name>
                                </templateParameter>
                                <templateParameter id="8699320">
                                    <name>F</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="8699318"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="8699318"/>
                                </parameter>
                                <parameter>
                                    <name>to</name>
                                    <type ref="8699319"/>
                                </parameter>
                                <parameter>
                                    <name>fun</name>
                                    <type ref="8699320"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699319"/>
                            <constraint>
                                <type ref="8699318"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="8699319"/>
                                <connector>is</connector>
                                <concept ref="concept_OutputIterator_A454885B47A3648BC107033D34E4A3F5AF8202EC"/>
                                <connector>and</connector>
                                <type ref="8699320"/>
                                <connector>is</connector>
                                <concept ref="concept_UnaryFunction_DDD936ABC21BA268C3B3C9F4820F5DFE1ACAA344"/>
                                <connector>and</connector>
                                <type ref="8699320"/>
                                <dot>ArgumentType</dot>
                                <connector>is</connector>
                                <type ref="8699318"/>
                                <dot>ValueType</dot>
                                <connector>and</connector>
                                <concept ref="concept_CopyAssignable_C698EC74F187E27A402BB382B7AC4F26FE50056C">
                                    <params>
                                        <type ref="8699319"/>
                                        <dot>ValueType</dot>
                                        <type ref="8699320"/>
                                        <dot>ResultType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                        <overload id="function_Transform_018C2D2B9797E791EEEE970AEABB387FE99AF712">
                            <name>Transform&lt;I1, I2, O, F>(I1 begin1, I1 end1, I2 begin2, O to, F fun)</name>
                            <syntax>public O Transform&lt;I1, I2, O, F>(I1 begin1, I1 end1, I2 begin2, O to, F fun);</syntax>
                            <templateParameters>
                                <templateParameter id="8699321">
                                    <name>I1</name>
                                </templateParameter>
                                <templateParameter id="8699322">
                                    <name>I2</name>
                                </templateParameter>
                                <templateParameter id="8699323">
                                    <name>O</name>
                                </templateParameter>
                                <templateParameter id="8699324">
                                    <name>F</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin1</name>
                                    <type ref="8699321"/>
                                </parameter>
                                <parameter>
                                    <name>end1</name>
                                    <type ref="8699321"/>
                                </parameter>
                                <parameter>
                                    <name>begin2</name>
                                    <type ref="8699322"/>
                                </parameter>
                                <parameter>
                                    <name>to</name>
                                    <type ref="8699323"/>
                                </parameter>
                                <parameter>
                                    <name>fun</name>
                                    <type ref="8699324"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699323"/>
                            <constraint>
                                <type ref="8699321"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="8699322"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="8699323"/>
                                <connector>is</connector>
                                <concept ref="concept_OutputIterator_A454885B47A3648BC107033D34E4A3F5AF8202EC"/>
                                <connector>and</connector>
                                <type ref="8699324"/>
                                <connector>is</connector>
                                <concept ref="concept_BinaryFunction_7F3A6EF707F08A997487EC3748D74CC2156DB250"/>
                                <connector>and</connector>
                                <type ref="8699324"/>
                                <dot>FirstArgumentType</dot>
                                <connector>is</connector>
                                <type ref="8699321"/>
                                <dot>ValueType</dot>
                                <connector>and</connector>
                                <type ref="8699324"/>
                                <dot>SecondArgumentType</dot>
                                <connector>is</connector>
                                <type ref="8699322"/>
                                <dot>ValueType</dot>
                                <connector>and</connector>
                                <concept ref="concept_CopyAssignable_C698EC74F187E27A402BB382B7AC4F26FE50056C">
                                    <params>
                                        <type ref="8699323"/>
                                        <dot>ValueType</dot>
                                        <type ref="8699324"/>
                                        <dot>ResultType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_Trim_81141111AEAEC14B75E262A77658E315F4682FA0">
                    <name>Trim</name>
                    <overloads>
                        <overload id="function_Trim_4EC105640B060F96EB3BC9E288DE7D1624DCC838">
                            <name>Trim(const String&lt;char>&amp; s)</name>
                            <syntax>public nothrow String&lt;char> Trim(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_Trim_CA0D04404C5B8206637F0F564509D2C0A091EFD1">
                            <name>Trim(const String&lt;uchar>&amp; s)</name>
                            <syntax>public String&lt;uchar> Trim(const String&lt;uchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700294"/>
                        </overload>
                        <overload id="function_Trim_A64760453672C5C36233CE34B42296B97AD7A38E">
                            <name>Trim(const String&lt;wchar>&amp; s)</name>
                            <syntax>public String&lt;wchar> Trim(const String&lt;wchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700254"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700249"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_TrimAll_A12C539D56CAB88E1CE25386C222BC752A5EDAAC">
                    <name>TrimAll</name>
                    <overloads>
                        <overload id="function_TrimAll_F86F15A4C02B4AC30D37E4FDBE78C555E22A7CB3">
                            <name>TrimAll(const String&lt;char>&amp; s)</name>
                            <syntax>public String&lt;char> TrimAll(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </overload>
                        <overload id="function_TrimAll_E5E00E8C8C13010DA073A47CC153B80CF3F6EF1E">
                            <name>TrimAll(const String&lt;uchar>&amp; s)</name>
                            <syntax>public String&lt;uchar> TrimAll(const String&lt;uchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700294"/>
                        </overload>
                        <overload id="function_TrimAll_25DE3A4DE5747983C7DD5859BD758A5EF23D1DDC">
                            <name>TrimAll(const String&lt;wchar>&amp; s)</name>
                            <syntax>public String&lt;wchar> TrimAll(const String&lt;wchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700254"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700249"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_UnguardedLinearInsert_06714A0942BAFB9BAF4DB7BA39960CBD4DCC27D5">
                    <name>UnguardedLinearInsert&lt;I, T, R>(I last, const T&amp; val, R r)</name>
                    <syntax>public nothrow void UnguardedLinearInsert&lt;I, T, R>(I last, const T&amp; val, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="8699343">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="8699344">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699345">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>last</name>
                            <type ref="8699343"/>
                        </parameter>
                        <parameter>
                            <name>val</name>
                            <type ref="type.8700145"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="8699345"/>
                        </parameter>
                    </parameters>
                    <constraint>
                        <type ref="8699343"/>
                        <connector>is</connector>
                        <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                        <connector>and</connector>
                        <type ref="8699344"/>
                        <connector>is</connector>
                        <type ref="8699343"/>
                        <dot>ValueType</dot>
                        <connector>and</connector>
                        <type ref="8699345"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="8699345"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="8699343"/>
                        <dot>ValueType</dot>
                    </constraint>
                </function>
                <function id="function_UnguardedPartition_3AE6824F66413D8C639E47121D94A8DF1B0FC391">
                    <name>UnguardedPartition&lt;I, T, R>(I begin, I end, const T&amp; pivot, R r)</name>
                    <syntax>public nothrow I UnguardedPartition&lt;I, T, R>(I begin, I end, const T&amp; pivot, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="8699340">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="8699341">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699342">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="8699340"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="8699340"/>
                        </parameter>
                        <parameter>
                            <name>pivot</name>
                            <type ref="type.8700144"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="8699342"/>
                        </parameter>
                    </parameters>
                    <returnType ref="8699340"/>
                    <constraint>
                        <type ref="8699340"/>
                        <connector>is</connector>
                        <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                        <connector>and</connector>
                        <type ref="8699341"/>
                        <connector>is</connector>
                        <type ref="8699340"/>
                        <dot>ValueType</dot>
                        <connector>and</connector>
                        <type ref="8699342"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="8699342"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="8699340"/>
                        <dot>ValueType</dot>
                    </constraint>
                </function>
                <function id="function_group_UpperBound_28E09EB05F8DD109DBCF7913754DD8C2E970581F">
                    <name>UpperBound</name>
                    <overloads>
                        <overload id="function_UpperBound_2E86B1F6478E84743F925AA745E17ED81BD6740C">
                            <name>UpperBound&lt;I, T, R>(I first, I last, const T&amp; value, R r)</name>
                            <syntax>public nothrow constexpr I UpperBound&lt;I, T, R>(I first, I last, const T&amp; value, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="8699285">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699286">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699287">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="8699285"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="8699285"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8700120"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="8699287"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699285"/>
                            <constraint>
                                <type ref="8699285"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <type ref="8699286"/>
                                <connector>is</connector>
                                <type ref="8699285"/>
                                <dot>ValueType</dot>
                                <connector>and</connector>
                                <type ref="8699287"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="8699287"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="8699285"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_UpperBound_89561EABED21DB179227256BF9D623883BC599AC">
                            <name>UpperBound&lt;I, T>(I first, I last, const T&amp; value)</name>
                            <syntax>public nothrow constexpr I UpperBound&lt;I, T>(I first, I last, const T&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="8699283">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="8699284">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="8699283"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="8699283"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8700119"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699283"/>
                            <constraint>
                                <type ref="8699283"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <concept ref="concept_TotallyOrdered_40CD71CFED7B3E26AA555259C8C3A14D6CE666EC">
                                    <params>
                                        <type ref="8699284"/>
                                        <type ref="8699283"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_endl_71F787A419EF569178A77D519ECADF813F51D581">
                    <name>endl()</name>
                    <syntax>public nothrow inline Endl endl();</syntax>
                    <returnType ref="class_Endl_8E2537FC3949E4C290D6CAA3B15C71D5697AC895"/>
                </function>
                <function id="function_op_rem_B06F2E9545E49700A85CD4D7D9E8F274590D3440">
                    <name>operator%(const Duration&amp; left, const Duration&amp; right)</name>
                    <syntax>public nothrow inline Duration operator%(const Duration&amp; left, const Duration&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.8699939"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.8699939"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                </function>
                <function id="function_op_star_79330BE341D893B5516E915AA1B3A94CFD594DA8">
                    <name>operator*(const Duration&amp; left, const Duration&amp; right)</name>
                    <syntax>public nothrow inline Duration operator*(const Duration&amp; left, const Duration&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.8699939"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.8699939"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                </function>
                <function id="function_group_op_plus_C9FCFD8E4E0F27EFEFEA982DE2CE2508CDB3F20F">
                    <name>operator+</name>
                    <overloads>
                        <overload id="function_op_plus_62268F4D0C12083EF457AA5E62A24F783A2880C8">
                            <name>operator+(const Duration&amp; d, const TimePoint&amp; tp)</name>
                            <syntax>public nothrow inline TimePoint operator+(const Duration&amp; d, const TimePoint&amp; tp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>d</name>
                                    <type ref="type.8699939"/>
                                </parameter>
                                <parameter>
                                    <name>tp</name>
                                    <type ref="type.8699933"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_TimePoint_BE09785FA47D4049B051C2D868BEEED92062875C"/>
                        </overload>
                        <overload id="function_op_plus_8917F4276AB7E3DA4595E09C7DD5B91436A3B6ED">
                            <name>operator+(const Duration&amp; left, const Duration&amp; right)</name>
                            <syntax>public nothrow inline Duration operator+(const Duration&amp; left, const Duration&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8699939"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8699939"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                        </overload>
                        <overload id="function_op_plus_1C2184641DF54FC79CD0EA3512394ABDF7D68F23">
                            <name>operator+(const TimePoint&amp; tp, const Duration&amp; d)</name>
                            <syntax>public nothrow inline TimePoint operator+(const TimePoint&amp; tp, const Duration&amp; d);</syntax>
                            <parameters>
                                <parameter>
                                    <name>tp</name>
                                    <type ref="type.8699933"/>
                                </parameter>
                                <parameter>
                                    <name>d</name>
                                    <type ref="type.8699939"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_TimePoint_BE09785FA47D4049B051C2D868BEEED92062875C"/>
                        </overload>
                        <overload id="function_op_plus_4E9524E4B7C24BB161E4B75984612E6FC79C613A">
                            <name>operator+&lt;CharT>(const CharT* first, const String&lt;CharT>&amp; second)</name>
                            <syntax>public nothrow String&lt;CharT> operator+&lt;CharT>(const CharT* first, const String&lt;CharT>&amp; second);</syntax>
                            <templateParameters>
                                <templateParameter id="8699901">
                                    <name>CharT</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="type.8702904"/>
                                </parameter>
                                <parameter>
                                    <name>second</name>
                                    <type ref="type.8702912"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                        </overload>
                        <overload id="function_op_plus_B32FEA3F2E0AF358E65CC12E856606755518CA8B">
                            <name>operator+&lt;CharT>(const String&lt;CharT>&amp; first, const CharT* second)</name>
                            <syntax>public nothrow String&lt;CharT> operator+&lt;CharT>(const String&lt;CharT>&amp; first, const CharT* second);</syntax>
                            <templateParameters>
                                <templateParameter id="8699900">
                                    <name>CharT</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="type.8702862"/>
                                </parameter>
                                <parameter>
                                    <name>second</name>
                                    <type ref="type.8702864"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                        </overload>
                        <overload id="function_op_plus_25D97F9C83D6E07A3F5736F043841128519BB8B3">
                            <name>operator+&lt;CharT>(const String&lt;CharT>&amp; first, const String&lt;CharT>&amp; second)</name>
                            <syntax>public nothrow String&lt;CharT> operator+&lt;CharT>(const String&lt;CharT>&amp; first, const String&lt;CharT>&amp; second);</syntax>
                            <templateParameters>
                                <templateParameter id="8699899">
                                    <name>CharT</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="type.8702815"/>
                                </parameter>
                                <parameter>
                                    <name>second</name>
                                    <type ref="type.8702815"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                        </overload>
                        <overload id="function_op_plus_70568DC4EA9A41A6C068822650F5CB2C788A4CC6">
                            <name>operator+&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; it, long offset)</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;T, R, P> operator+&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; it, long offset);</syntax>
                            <templateParameters>
                                <templateParameter id="8699794">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699795">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="8699796">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>it</name>
                                    <type ref="type.8701817"/>
                                </parameter>
                                <parameter>
                                    <name>offset</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                        </overload>
                        <overload id="function_op_plus_F27094AD37DCDB85F062F00D202E7A69AC877DAE">
                            <name>operator+&lt;T, R, P>(long offset, const RandomAccessIter&lt;T, R, P>&amp; it)</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;T, R, P> operator+&lt;T, R, P>(long offset, const RandomAccessIter&lt;T, R, P>&amp; it);</syntax>
                            <templateParameters>
                                <templateParameter id="8699797">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699798">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="8699799">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>offset</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                                <parameter>
                                    <name>it</name>
                                    <type ref="type.8701824"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_minus_8CC59AA8F159CE36FE8E9FA3B53D55402A4DA142">
                    <name>operator-</name>
                    <overloads>
                        <overload id="function_op_minus_C290B011182FA3DC62195676F2F873D80A553C52">
                            <name>operator-(const Duration&amp; left, const Duration&amp; right)</name>
                            <syntax>public nothrow inline Duration operator-(const Duration&amp; left, const Duration&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8699939"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8699939"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                        </overload>
                        <overload id="function_op_minus_F9B9661CD4CF9235B5AE238C540196FE1ACF3D55">
                            <name>operator-(const TimePoint&amp; left, const TimePoint&amp; right)</name>
                            <syntax>public nothrow inline Duration operator-(const TimePoint&amp; left, const TimePoint&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8699933"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8699933"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                        </overload>
                        <overload id="function_op_minus_1778B60CEA75813EF8EAD6E9016E121B450C4E30">
                            <name>operator-(const TimePoint&amp; tp, const Duration&amp; d)</name>
                            <syntax>public nothrow inline TimePoint operator-(const TimePoint&amp; tp, const Duration&amp; d);</syntax>
                            <parameters>
                                <parameter>
                                    <name>tp</name>
                                    <type ref="type.8699933"/>
                                </parameter>
                                <parameter>
                                    <name>d</name>
                                    <type ref="type.8699939"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_TimePoint_BE09785FA47D4049B051C2D868BEEED92062875C"/>
                        </overload>
                        <overload id="function_op_minus_84178E3BDBDF33DC8728A135E4861539B7869AE9">
                            <name>operator-&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; it, long offset)</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;T, R, P> operator-&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; it, long offset);</syntax>
                            <templateParameters>
                                <templateParameter id="8699800">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699801">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="8699802">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>it</name>
                                    <type ref="type.8701831"/>
                                </parameter>
                                <parameter>
                                    <name>offset</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                        </overload>
                        <overload id="function_op_minus_B42A6D5BC1C0BC85F617C85745C98FE0271CE3AF">
                            <name>operator-&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; left, const RandomAccessIter&lt;T, R, P>&amp; right)</name>
                            <syntax>public nothrow inline long operator-&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; left, const RandomAccessIter&lt;T, R, P>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699803">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699804">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="8699805">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8701838"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8701838"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_op_div_DFFBD5D2A26B18125AAC0D4C13D7AD5F62020BD0">
                    <name>operator/(const Duration&amp; left, const Duration&amp; right)</name>
                    <syntax>public nothrow inline Duration operator/(const Duration&amp; left, const Duration&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.8699939"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.8699939"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                </function>
                <function id="function_group_op_less_A7ADD706A56D40320D9D0755E6FFE077812BDBF8">
                    <name>operator&lt;</name>
                    <overloads>
                        <overload id="function_op_less_7EA8203496E533E90E9A351E4AE769C81D02FA5D">
                            <name>operator&lt;(const Date&amp; left, const Date&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;(const Date&amp; left, const Date&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8699946"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8699946"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_less_288CE45C18D3A7E87126BBE0B9D8B399FADA0556">
                            <name>operator&lt;(const DateTime&amp; left, const DateTime&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;(const DateTime&amp; left, const DateTime&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8699952"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8699952"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_less_B27BF8CAF199B8E90298B2BA4B358AD0DDE14CE3">
                            <name>operator&lt;(const Duration&amp; left, const Duration&amp; right)</name>
                            <syntax>public nothrow inline bool operator&lt;(const Duration&amp; left, const Duration&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8699939"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8699939"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_less_85FB66B52599676F0891416124FF91289F5EB1E7">
                            <name>operator&lt;(const TimePoint&amp; left, const TimePoint&amp; right)</name>
                            <syntax>public nothrow inline bool operator&lt;(const TimePoint&amp; left, const TimePoint&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8699933"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8699933"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_less_DDB7FC849D9E8A0DB43CCDDFEF1DE4BF30B3EB5C">
                            <name>operator&lt;&lt;CharT>(const String&lt;CharT>&amp; left, const String&lt;CharT>&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;&lt;CharT>(const String&lt;CharT>&amp; left, const String&lt;CharT>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699898">
                                    <name>CharT</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8702768"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8702768"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_less_6A8315DD5504F9A521502BFBBF0B2B07E191B38A">
                            <name>operator&lt;&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; left, const RandomAccessIter&lt;T, R, P>&amp; right)</name>
                            <syntax>public nothrow inline bool operator&lt;&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; left, const RandomAccessIter&lt;T, R, P>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699809">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699810">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="8699811">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8701852"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8701852"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_less_CCE44469EC919928751B55FC2203CB843F13AB7A">
                            <name>operator&lt;&lt;T, U>(const Pair&lt;T, U>&amp; left, const Pair&lt;T, U>&amp; right)</name>
                            <syntax>public nothrow inline bool operator&lt;&lt;T, U>(const Pair&lt;T, U>&amp; left, const Pair&lt;T, U>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699772">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699773">
                                    <name>U</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8701727"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8701727"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699772"/>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                                <connector>and</connector>
                                <type ref="8699773"/>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_less_87FE91E6E938935617C6BC7A62C735F75EC35D1C">
                            <name>operator&lt;&lt;T>(const SharedCount&lt;T>&amp; left, const SharedCount&lt;T>&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;&lt;T>(const SharedCount&lt;T>&amp; left, const SharedCount&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699852">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8702164"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8702164"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_less_5D65A66632649DABD6DAC4AF62784D466E21BFD1">
                            <name>operator&lt;&lt;T>(const SharedPtr&lt;T>&amp; left, const SharedPtr&lt;T>&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;&lt;T>(const SharedPtr&lt;T>&amp; left, const SharedPtr&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699862">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8702368"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8702368"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_less_D89FF7D376F39F849E551A604EDE58DAFE9058D5">
                            <name>operator&lt;&lt;T>(const UniquePtr&lt;T>&amp; left, const UniquePtr&lt;T>&amp; right)</name>
                            <syntax>public nothrow inline bool operator&lt;&lt;T>(const UniquePtr&lt;T>&amp; left, const UniquePtr&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8700106">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8705145"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8705145"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_less_152A2483D08A6E35FC83C1717410726A18FD1FB2">
                            <name>operator&lt;&lt;T>(const WeakCount&lt;T>&amp; left, const WeakCount&lt;T>&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;&lt;T>(const WeakCount&lt;T>&amp; left, const WeakCount&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699858">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8702274"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8702274"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_eq_3397CE9B6254641971A3405FCF2E1331E936E15B">
                    <name>operator==</name>
                    <overloads>
                        <overload id="function_op_eq_CA6B9B92483AB468834B49746CD03EB9979F6323">
                            <name>operator==(Month left, Month right)</name>
                            <syntax>public bool operator==(Month left, Month right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_Month_7829D8A209CD9954EC457E7406A5269E99C4AA48"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_Month_7829D8A209CD9954EC457E7406A5269E99C4AA48"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_E3B3A162C49FA29CEB452EDA3A73A9B65B702EA3">
                            <name>operator==(const Date&amp; left, const Date&amp; right)</name>
                            <syntax>public nothrow bool operator==(const Date&amp; left, const Date&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8699946"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8699946"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_3B996F69168D2291054841199EBDF0C7E7BBD43A">
                            <name>operator==(const DateTime&amp; left, const DateTime&amp; right)</name>
                            <syntax>public nothrow bool operator==(const DateTime&amp; left, const DateTime&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8699952"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8699952"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_A6A715B4506331BC085DC59D796DB29A97C9BD76">
                            <name>operator==(const Duration&amp; left, const Duration&amp; right)</name>
                            <syntax>public nothrow inline bool operator==(const Duration&amp; left, const Duration&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8699939"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8699939"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_04B2E322DAAF04B5EF8C496D6E4BF22D40ADC538">
                            <name>operator==(const TimePoint&amp; left, const TimePoint&amp; right)</name>
                            <syntax>public nothrow inline bool operator==(const TimePoint&amp; left, const TimePoint&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8699933"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8699933"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_9AA082C23D81DC01FD730478CF27A5617EF747E5">
                            <name>operator==&lt;CharT>(const String&lt;CharT>&amp; left, const String&lt;CharT>&amp; right)</name>
                            <syntax>public nothrow bool operator==&lt;CharT>(const String&lt;CharT>&amp; left, const String&lt;CharT>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699897">
                                    <name>CharT</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8702721"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8702721"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_F357610FBC8C77AD5F1F942162E9F5A2BBEF5371">
                            <name>operator==&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; left, const RandomAccessIter&lt;T, R, P>&amp; right)</name>
                            <syntax>public nothrow inline bool operator==&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; left, const RandomAccessIter&lt;T, R, P>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699806">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699807">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="8699808">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8701845"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8701845"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_9F1E3820B34B440E56F717064838DF7F655F6932">
                            <name>operator==&lt;T, U>(const Pair&lt;T, U>&amp; left, const Pair&lt;T, U>&amp; right)</name>
                            <syntax>public nothrow inline bool operator==&lt;T, U>(const Pair&lt;T, U>&amp; left, const Pair&lt;T, U>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699774">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699775">
                                    <name>U</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8701733"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8701733"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699774"/>
                                <connector>is</connector>
                                <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                                <connector>and</connector>
                                <type ref="8699775"/>
                                <connector>is</connector>
                                <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_eq_5156445F80F4364F20E3A9E7A98660E8E3147E7B">
                            <name>operator==&lt;T>(const SharedCount&lt;T>&amp; left, const SharedCount&lt;T>&amp; right)</name>
                            <syntax>public nothrow bool operator==&lt;T>(const SharedCount&lt;T>&amp; left, const SharedCount&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699851">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8702142"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8702142"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_00E83EECBD03E6A50880D66FC45EB11A0AEBBB4D">
                            <name>operator==&lt;T>(const SharedPtr&lt;T>&amp; left, const SharedPtr&lt;T>&amp; right)</name>
                            <syntax>public nothrow bool operator==&lt;T>(const SharedPtr&lt;T>&amp; left, const SharedPtr&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699861">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8702332"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8702332"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_58404146752911C1C448FA1EC418C839ADB26FA5">
                            <name>operator==&lt;T>(const UniquePtr&lt;T>&amp; left, const UniquePtr&lt;T>&amp; right)</name>
                            <syntax>public nothrow inline bool operator==&lt;T>(const UniquePtr&lt;T>&amp; left, const UniquePtr&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8700105">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8705133"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8705133"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_220C674AF6CFE2FB6FC19118764ADF510631B16A">
                            <name>operator==&lt;T>(const WeakCount&lt;T>&amp; left, const WeakCount&lt;T>&amp; right)</name>
                            <syntax>public nothrow bool operator==&lt;T>(const WeakCount&lt;T>&amp; left, const WeakCount&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699857">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8702252"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8702252"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
            </functions>
            <typedefs>
                <typedef id="typedef_string_B6DB6B2DEFC437FBF697A2E84F7B7771FC1DDEE3">
                    <name>string</name>
                    <syntax>public typedef String&lt;char> string;</syntax>
                    <type ref="type.8700206"/>
                </typedef>
                <typedef id="typedef_ustring_1750E1C62AAF5897C1F1DA3C5BC4999982AE9B36">
                    <name>ustring</name>
                    <syntax>public typedef String&lt;uchar> ustring;</syntax>
                    <type ref="type.8700294"/>
                </typedef>
                <typedef id="typedef_wstring_EDB6336488DF46A7779AFB4209BAB1DAF59B5DAE">
                    <name>wstring</name>
                    <syntax>public typedef String&lt;wchar> wstring;</syntax>
                    <type ref="type.8700249"/>
                </typedef>
            </typedefs>
            <constants>
                <constant id="constant_insertionSortThreshold_56F85BEA8266D9529E96B6415FF32EC6B8AB62C5">
                    <name>insertionSortThreshold</name>
                    <syntax>public const long insertionSortThreshold = 16;</syntax>
                    <type ref="type.8699072"/>
                    <value>16</value>
                </constant>
            </constants>
            <enumerations>
                <enumeration id="enumerated_type_Month_7829D8A209CD9954EC457E7406A5269E99C4AA48">
                    <name>Month</name>
                    <syntax>public enum Month;</syntax>
                    <underlyingType ref="type.8699066"/>
                    <enumConstant>
                        <name>january</name>
                        <value>1</value>
                    </enumConstant>
                    <enumConstant>
                        <name>february</name>
                        <value>2</value>
                    </enumConstant>
                    <enumConstant>
                        <name>march</name>
                        <value>3</value>
                    </enumConstant>
                    <enumConstant>
                        <name>april</name>
                        <value>4</value>
                    </enumConstant>
                    <enumConstant>
                        <name>may</name>
                        <value>5</value>
                    </enumConstant>
                    <enumConstant>
                        <name>june</name>
                        <value>6</value>
                    </enumConstant>
                    <enumConstant>
                        <name>july</name>
                        <value>7</value>
                    </enumConstant>
                    <enumConstant>
                        <name>august</name>
                        <value>8</value>
                    </enumConstant>
                    <enumConstant>
                        <name>september</name>
                        <value>9</value>
                    </enumConstant>
                    <enumConstant>
                        <name>october</name>
                        <value>10</value>
                    </enumConstant>
                    <enumConstant>
                        <name>november</name>
                        <value>11</value>
                    </enumConstant>
                    <enumConstant>
                        <name>december</name>
                        <value>12</value>
                    </enumConstant>
                </enumeration>
            </enumerations>
        </namespace>
        <namespace id="System.Ascii">
            <name>System.Ascii</name>
            <classes>
                <class id="class_CharClassTable_B24A43EB28B26916FCA6AA24AA09EDB0A1923A1A">
                    <name>CharClassTable</name>
                    <groupName>CharClassTable</groupName>
                    <syntax> public class CharClassTable;</syntax>
                    <functions>
                        <function id="member_function_GetCharacterClass_CharClassTable_D91526434C6ADFC48B69D37DFC2CBBCC79B1C10E">
                            <name>GetCharacterClass(char c)</name>
                            <syntax>public nothrow inline CharClass GetCharacterClass(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699076"/>
                                </parameter>
                            </parameters>
                            <returnType ref="enumerated_type_CharClass_825BD0E92E069CC6BC59D5D117AD06076A653B4D"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_CharClassTable_CE2D000AA4BAE2E76BB3290869F15FE3A5BC5D64">
                            <name>Instance()</name>
                            <syntax>public static nothrow CharClassTable&amp; Instance();</syntax>
                            <returnType ref="type.8699391"/>
                        </function>
                    </staticMemberFunctions>
                </class>
            </classes>
            <functions>
                <function id="function_op_eq_5C7E6C9355463E5994CD98F9831E6FF6E54B644D">
                    <name>operator==(CharClass left, CharClass right)</name>
                    <syntax>public bool operator==(CharClass left, CharClass right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="enumerated_type_CharClass_825BD0E92E069CC6BC59D5D117AD06076A653B4D"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="enumerated_type_CharClass_825BD0E92E069CC6BC59D5D117AD06076A653B4D"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
            </functions>
            <enumerations>
                <enumeration id="enumerated_type_CharClass_825BD0E92E069CC6BC59D5D117AD06076A653B4D">
                    <name>CharClass</name>
                    <syntax>public enum CharClass;</syntax>
                    <underlyingType ref="type.8699069"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lower</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>upper</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>alpha</name>
                        <value>3u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>digit</name>
                        <value>4u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>alnum</name>
                        <value>7u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>xdigit</name>
                        <value>8u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cntrl</name>
                        <value>16u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>graph</name>
                        <value>32u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>print</name>
                        <value>64u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>punct</name>
                        <value>128u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>space</name>
                        <value>256u</value>
                    </enumConstant>
                </enumeration>
            </enumerations>
        </namespace>
        <namespace id="System.Collections">
            <name>System.Collections</name>
            <classes>
                <class id="class_Bitset_BA1EE2E68426C5445CB6CAF7F957084ADAFD19CA">
                    <name>Bitset</name>
                    <groupName>Bitset</groupName>
                    <syntax> public class Bitset;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Bitset_377449C5DB3A60623DD07B880E6A3E0E46A0ADD9">
                            <name>Bitset()</name>
                            <syntax>public nothrow Bitset();</syntax>
                        </constructor>
                        <constructor id="move_constructor_Bitset_44E080E801C413756451C5A4B75ADDD3AB2F933C">
                            <name>Bitset(Bitset&amp;&amp; @p0)</name>
                            <syntax>public nothrow default Bitset(Bitset&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8700343"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_Bitset_EB006E8408E837855C0C0B24F3042A8D25C282DB">
                            <name>Bitset(const Bitset&amp; @p0)</name>
                            <syntax>public default Bitset(const Bitset&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8699403"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_Bitset_FBBF19237FAC6B5BFC3E4BE35B642A332CBCE9E6">
                            <name>Bitset(const String&lt;char>&amp; bits_)</name>
                            <syntax>public Bitset(const String&lt;char>&amp; bits_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>bits_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_Bitset_CE0374A43EAC8403D757921530D2EC8B16A78804">
                            <name>Bitset(long numBits_)</name>
                            <syntax>public Bitset(long numBits_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>numBits_</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_All_Bitset_61C3B1A51B9F332282932D54AFE6E7B5A9B01EFA">
                            <name>All() const</name>
                            <syntax>public nothrow bool All() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Any_Bitset_3FEF7A94F01A83026868ABF183B3CFB07A741768">
                            <name>Any() const</name>
                            <syntax>public nothrow bool Any() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Bits_Bitset_F3FFAD112AD32A189DAAFB44500237F0FAD59B5D">
                            <name>Bits() const</name>
                            <syntax>public nothrow inline List&lt;ulong>&amp; Bits() const;</syntax>
                            <returnType ref="type.8700346"/>
                        </function>
                        <function id="member_function_Clear_Bitset_71948901C307DEEA2731244A123C2DFE010C0EDB">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_Bitset_226F0B844ABA24912B1A302981A24EF26C8A4315">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="function_group_Flip_95D593FF22A52D27061F54BE231B50666C6D4323">
                            <name>Flip</name>
                            <overloads>
                                <overload id="member_function_Flip_Bitset_BF3263EEFB4F883E94883673A07F5A18302D1575">
                                    <name>Flip()</name>
                                    <syntax>public nothrow void Flip();</syntax>
                                </overload>
                                <overload id="member_function_Flip_Bitset_615540BFC9D6EAA661ADE50BE4D6E2FE35EFC0DF">
                                    <name>Flip(long pos)</name>
                                    <syntax>public nothrow inline void Flip(long pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_LastBlockStartIndex_Bitset_B5F5BE3B2422D32FCE8DE37CDD67D932E1EFD213">
                            <name>LastBlockStartIndex() const</name>
                            <syntax>public nothrow inline long LastBlockStartIndex() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_None_Bitset_F9B4CAF52BD9B30CBBB0DEF4D59F986D50FCE2C3">
                            <name>None() const</name>
                            <syntax>public nothrow bool None() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_NumBits_Bitset_48826B756E50D05DB7839B7D31D1864F465CCC91">
                            <name>NumBits() const</name>
                            <syntax>public nothrow inline long NumBits() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_NumFullBlocks_Bitset_2C01E50108456892CCA9C25BF8F07762B3F3A916">
                            <name>NumFullBlocks() const</name>
                            <syntax>public nothrow inline long NumFullBlocks() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="function_group_Reset_3332FA1182B6A97E6FE6AE3E1497BBE946F4824E">
                            <name>Reset</name>
                            <overloads>
                                <overload id="member_function_Reset_Bitset_8A9FA085D394CE586C4007266650EB6706E5A7FF">
                                    <name>Reset()</name>
                                    <syntax>public nothrow void Reset();</syntax>
                                </overload>
                                <overload id="member_function_Reset_Bitset_79E7504F98860C8109BAA5C2A07BD11BBD6C13A1">
                                    <name>Reset(long pos)</name>
                                    <syntax>public nothrow inline void Reset(long pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Resize_Bitset_2CE2B912CCB48DFDBDE4354E3F5164C161773E41">
                            <name>Resize(long numBits_)</name>
                            <syntax>public void Resize(long numBits_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>numBits_</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_Set_2A7205E5118F3371F79AA12F65ED504A8D88E718">
                            <name>Set</name>
                            <overloads>
                                <overload id="member_function_Set_Bitset_D59A331833604F15E7C3D3E19558DC1F0CE99DEB">
                                    <name>Set()</name>
                                    <syntax>public nothrow void Set();</syntax>
                                </overload>
                                <overload id="member_function_Set_Bitset_F4EC7B80F0ADB5216F3CB11EDB66369E63760CB8">
                                    <name>Set(long pos)</name>
                                    <syntax>public nothrow inline void Set(long pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Set_Bitset_BCA42931F795DF26339FB2E37ABF5606B8ED5A22">
                                    <name>Set(long pos, bool bit)</name>
                                    <syntax>public nothrow void Set(long pos, bool bit);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                        <parameter>
                                            <name>bit</name>
                                            <type ref="type.8699065"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Test_Bitset_C6A3B9521EBC0660CA69460BA24F49EEACF4D208">
                            <name>Test(long pos) const</name>
                            <syntax>public nothrow inline bool Test(long pos) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_ToString_Bitset_0FED18EDFE916C1FF1685D3559B281236E1822DA">
                            <name>ToString() const</name>
                            <syntax>public nothrow String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.8700206"/>
                        </function>
                        <function id="function_group_op_assign_A9E90F203810F6E1D52DCB0CE9A23FB99D50D012">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_Bitset_49B81B550D9230ABCF5D78A550417BE1FEE539F5">
                                    <name>operator=(Bitset&amp;&amp; @p0)</name>
                                    <syntax>public nothrow default void operator=(Bitset&amp;&amp; @p0);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>@p0</name>
                                            <type ref="type.8700343"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_Bitset_0C730C3C5C22FAD698F2E86EBF375D07DEAA4EF6">
                                    <name>operator=(const Bitset&amp; @p0)</name>
                                    <syntax>public default void operator=(const Bitset&amp; @p0);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>@p0</name>
                                            <type ref="type.8699403"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_op_index_Bitset_32C14482F5DA7EF77F9B24E9BF5F7C2136A83565">
                            <name>operator[](long index) const</name>
                            <syntax>public nothrow inline bool operator[](long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                    </functions>
                </class>
                <class id="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9">
                    <name>Bucket&lt;T></name>
                    <groupName>Bucket</groupName>
                    <syntax> public class Bucket&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699711">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="8699711"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <constructors>
                        <constructor id="constructor_Bucket_T_C3BEDB3CB145D98820A7D875A84535BF4F1453B9">
                            <name>Bucket&lt;T>(const T&amp; value_, Bucket&lt;T>* next_)</name>
                            <syntax>public Bucket&lt;T>(const T&amp; value_, Bucket&lt;T>* next_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.140"/>
                                </parameter>
                                <parameter>
                                    <name>next_</name>
                                    <type ref="type.8701257"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Next_Bucket_T_05267D2FC8C1EC3095C086581CD6BAF77B425603">
                            <name>Next() const</name>
                            <syntax>public nothrow inline Bucket&lt;T>* Next() const;</syntax>
                            <returnType ref="type.8701257"/>
                        </function>
                        <function id="member_function_SetNext_Bucket_T_3FEF210B59761C4166F7CB72F488B2EA0A0863E0">
                            <name>SetNext(Bucket&lt;T>* next_)</name>
                            <syntax>public nothrow inline void SetNext(Bucket&lt;T>* next_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>next_</name>
                                    <type ref="type.8701257"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_Value_F5B1363F74D23B33620B7B64F94D8A12E8B07EB2">
                            <name>Value</name>
                            <overloads>
                                <overload id="member_function_Value_Bucket_T_9C4B92BF600464F6CC996CED43C544E2AFDE14C8">
                                    <name>Value()</name>
                                    <syntax>public nothrow inline T&amp; Value();</syntax>
                                    <returnType ref="type.141"/>
                                </overload>
                                <overload id="member_function_Value_Bucket_T_CF58B3FDBB03AAEE43FB66749BFD31B06ACE1869">
                                    <name>Value() const</name>
                                    <syntax>public nothrow inline const T&amp; Value() const;</syntax>
                                    <returnType ref="type.140"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ValueType_2D44A30C22941FB9CE9C613DF99C5B4CA1915C1F">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="8699711"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051">
                    <name>ForwardList&lt;T></name>
                    <groupName>ForwardList</groupName>
                    <syntax> public class ForwardList&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699611">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="8699611"/>
                        <connector>is</connector>
                        <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                    </constraint>
                    <constructors>
                        <constructor id="default_constructor_ForwardList_T_CCC62245CA5A4647726E0734989E9CA255F76E8B">
                            <name>ForwardList&lt;T>()</name>
                            <syntax>public nothrow ForwardList&lt;T>();</syntax>
                        </constructor>
                        <constructor id="move_constructor_ForwardList_T_47041D1FF705B233FC27AB6E2878BF63F563743A">
                            <name>ForwardList&lt;T>(ForwardList&lt;T>&amp;&amp; that)</name>
                            <syntax>public nothrow ForwardList&lt;T>(ForwardList&lt;T>&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.86"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_ForwardList_T_EF4F293C06BC137E506E8A0C69F83A19427FDC25">
                            <name>ForwardList&lt;T>(const ForwardList&lt;T>&amp; that)</name>
                            <syntax>public ForwardList&lt;T>(const ForwardList&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8700462"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Begin_D4BDC98933F5F8E7F99AB613FB6D40868110E0B1">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_ForwardList_T_C26C5F45C18595C6C59F7C63CAA604743F1B3815">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline ForwardListNodeIterator&lt;T, T&amp;, T*> Begin();</syntax>
                                    <returnType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                                </overload>
                                <overload id="member_function_Begin_ForwardList_T_3022B315D6330474E2DFA80698E0B3A642734362">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline ForwardListNodeIterator&lt;T, const T&amp;, const T*> Begin() const;</syntax>
                                    <returnType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_ForwardList_T_B9A7A10087A10DB1DC1A9D9EF6CCABA34B777B58">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline ForwardListNodeIterator&lt;T, const T&amp;, const T*> CBegin() const;</syntax>
                            <returnType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                        </function>
                        <function id="member_function_CEnd_ForwardList_T_F1005B4C619E5DA4FCE9E1BE0700EB7C311069A0">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline ForwardListNodeIterator&lt;T, const T&amp;, const T*> CEnd() const;</syntax>
                            <returnType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                        </function>
                        <function id="member_function_Clear_ForwardList_T_B0233CE29403A70DB3DB5E052F2F361BFDAA50D5">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_ForwardList_T_635E34CBE71F55498FB1FE741A87D31901B85D43">
                            <name>Count() const</name>
                            <syntax>public nothrow long Count() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="function_group_End_135F372CFD51A00A6232759A800028D487809818">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_ForwardList_T_82C6BA7D53A03267486523205C57E9BC6A1DF491">
                                    <name>End()</name>
                                    <syntax>public nothrow inline ForwardListNodeIterator&lt;T, T&amp;, T*> End();</syntax>
                                    <returnType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                                </overload>
                                <overload id="member_function_End_ForwardList_T_6531EAFAF6FB1A89376007A7F017E7B8D250B01D">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline ForwardListNodeIterator&lt;T, const T&amp;, const T*> End() const;</syntax>
                                    <returnType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Front_ForwardList_T_EED016BB2E9837E8A3EECC7C755CFEC3E7AEF11D">
                            <name>Front() const</name>
                            <syntax>public nothrow inline const T&amp; Front() const;</syntax>
                            <returnType ref="type.8700463"/>
                        </function>
                        <function id="member_function_InsertAfter_ForwardList_T_F7316F19E36AD9C732C2FEBA4E1D238F83C01709">
                            <name>InsertAfter(ForwardListNodeIterator&lt;T, T&amp;, T*> pos, const T&amp; value)</name>
                            <syntax>public ForwardListNodeIterator&lt;T, T&amp;, T*> InsertAfter(ForwardListNodeIterator&lt;T, T&amp;, T*> pos, const T&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8700463"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                        </function>
                        <function id="member_function_InsertFront_ForwardList_T_678269A52B395D4F484835212549842883DDD47B">
                            <name>InsertFront(const T&amp; value)</name>
                            <syntax>public inline ForwardListNodeIterator&lt;T, T&amp;, T*> InsertFront(const T&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8700463"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                        </function>
                        <function id="member_function_IsEmpty_ForwardList_T_2DA8680AB96FF55021ABCEB876B1276D38AB0B7C">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Remove_ForwardList_T_CF027E92349700DBE05EB66D8BC992C3F99AE074">
                            <name>Remove(const T&amp; value)</name>
                            <syntax>public nothrow void Remove(const T&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8700463"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_RemoveAfter_ForwardList_T_4830FE000439AA48AE86A2BD17BCE1AA8B8C0905">
                            <name>RemoveAfter(ForwardListNodeIterator&lt;T, T&amp;, T*> pos)</name>
                            <syntax>public nothrow void RemoveAfter(ForwardListNodeIterator&lt;T, T&amp;, T*> pos);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_RemoveFront_ForwardList_T_58D5A2EC3145C9174C63C5830D33A0047429132F">
                            <name>RemoveFront()</name>
                            <syntax>public nothrow void RemoveFront();</syntax>
                        </function>
                        <function id="function_group_op_assign_987DE689447C35617DFA216240E69A1C3B12B4C3">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_ForwardList_T_CD9E228321A6CEB21E39E789E9DDAF3D3A88B54C">
                                    <name>operator=(ForwardList&lt;T>&amp;&amp; that)</name>
                                    <syntax>public nothrow void operator=(ForwardList&lt;T>&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.86"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_ForwardList_T_4F66D89AE8D29ADD288085BED35D9F0B059598B9">
                                    <name>operator=(const ForwardList&lt;T>&amp; that)</name>
                                    <syntax>public void operator=(const ForwardList&lt;T>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.8700462"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ConstIterator_21A3A20A8D926FE73F5EC135FE5394646ADA20A3">
                            <name>ConstIterator</name>
                            <syntax>public typedef ForwardListNodeIterator&lt;T, const T&amp;, const T*> ConstIterator;</syntax>
                            <type ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                        </typedef>
                        <typedef id="typedef_Iterator_D45FD82350AFD62BB1D9F36F798F468174A62172">
                            <name>Iterator</name>
                            <syntax>public typedef ForwardListNodeIterator&lt;T, T&amp;, T*> Iterator;</syntax>
                            <type ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                        </typedef>
                        <typedef id="typedef_ValueType_B57755710D0A04E00AD577A280012E9633F4881E">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="8699611"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4">
                    <name>ForwardListNode&lt;T></name>
                    <groupName>ForwardListNode</groupName>
                    <syntax> public class ForwardListNode&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699602">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="8699602"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <constructors>
                        <constructor id="constructor_ForwardListNode_T_72D8ED5186EFD670F9F16C597351F8AAEDE3CE92">
                            <name>ForwardListNode&lt;T>(ForwardListNode&lt;T>* next_, const T&amp; value_)</name>
                            <syntax>public ForwardListNode&lt;T>(ForwardListNode&lt;T>* next_, const T&amp; value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>next_</name>
                                    <type ref="type.8700420"/>
                                </parameter>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.78"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Next_ForwardListNode_T_93ED798A0166F43FFBE84CD5CA40DAE97556D9A6">
                            <name>Next() const</name>
                            <syntax>public nothrow inline ForwardListNode&lt;T>* Next() const;</syntax>
                            <returnType ref="type.8700420"/>
                        </function>
                        <function id="member_function_SetNext_ForwardListNode_T_CC308FEE18AA069AA68F15CEF6B6622C77327D6D">
                            <name>SetNext(ForwardListNode&lt;T>* next_)</name>
                            <syntax>public nothrow inline void SetNext(ForwardListNode&lt;T>* next_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>next_</name>
                                    <type ref="type.8700420"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_Value_4E28F34B27CBAFAD49B21EBFC8952F28FF3E4746">
                            <name>Value</name>
                            <overloads>
                                <overload id="member_function_Value_ForwardListNode_T_4F5A7F611E4B551857604B6FEFC1B96D1C3331A2">
                                    <name>Value()</name>
                                    <syntax>public nothrow inline T&amp; Value();</syntax>
                                    <returnType ref="type.79"/>
                                </overload>
                                <overload id="member_function_Value_ForwardListNode_T_8623EC1E93FDA9A44D06CA7E83373C520C696ECC">
                                    <name>Value() const</name>
                                    <syntax>public nothrow inline const T&amp; Value() const;</syntax>
                                    <returnType ref="type.78"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA">
                    <name>ForwardListNodeIterator&lt;T, R, P></name>
                    <groupName>ForwardListNodeIterator</groupName>
                    <syntax> public class ForwardListNodeIterator&lt;T, R, P>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699604">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699605">
                            <name>R</name>
                        </templateParameter>
                        <templateParameter id="8699606">
                            <name>P</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="default_constructor_ForwardListNodeIterator_T_R_P_C09FE737177304EB8D2DE1A944F35EE37339B804">
                            <name>ForwardListNodeIterator&lt;T, R, P>()</name>
                            <syntax>public nothrow ForwardListNodeIterator&lt;T, R, P>();</syntax>
                        </constructor>
                        <constructor id="constructor_ForwardListNodeIterator_T_R_P_1698F9EBA105F1A409F22746A3BA5A9A7F66FB29">
                            <name>ForwardListNodeIterator&lt;T, R, P>(ForwardListNode&lt;T>* node_)</name>
                            <syntax>public nothrow ForwardListNodeIterator&lt;T, R, P>(ForwardListNode&lt;T>* node_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>node_</name>
                                    <type ref="type.8700434"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Node_ForwardListNodeIterator_T_R_P_BD6FC8BF4B79250A3E77B458CAF7C3430C38B4A4">
                            <name>Node() const</name>
                            <syntax>public nothrow inline ForwardListNode&lt;T>* Node() const;</syntax>
                            <returnType ref="type.8700434"/>
                        </function>
                        <function id="member_function_op_star_ForwardListNodeIterator_T_R_P_DD136EC389178167414D527C180E2B4B6479FE03">
                            <name>operator*()</name>
                            <syntax>public nothrow inline R operator*();</syntax>
                            <returnType ref="8699605"/>
                        </function>
                        <function id="member_function_op_plusplus_ForwardListNodeIterator_T_R_P_E592404458D713340DCDC89434235DA794DC1329">
                            <name>operator++()</name>
                            <syntax>public nothrow inline ForwardListNodeIterator&lt;T, R, P>&amp; operator++();</syntax>
                            <returnType ref="type.8700429"/>
                        </function>
                        <function id="member_function_op_arrow_ForwardListNodeIterator_T_R_P_AEA55D7836B4D4F8E0CA474CE9E0518FFC535E13">
                            <name>operator->()</name>
                            <syntax>public nothrow inline P operator->();</syntax>
                            <returnType ref="8699606"/>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_PointerType_CC7058855A15D183B741BDE5D5ECB9D45BC114F3">
                            <name>PointerType</name>
                            <syntax>public typedef P PointerType;</syntax>
                            <type ref="8699606"/>
                        </typedef>
                        <typedef id="typedef_ReferenceType_60E694DD3476705D3B73C2CD9764848057E958EA">
                            <name>ReferenceType</name>
                            <syntax>public typedef R ReferenceType;</syntax>
                            <type ref="8699605"/>
                        </typedef>
                        <typedef id="typedef_ValueType_9B460C27CE54375AE4593F02EAE701F41810F47B">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="8699604"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36">
                    <name>HashMap&lt;K, T, H, C></name>
                    <groupName>HashMap</groupName>
                    <syntax> public class HashMap&lt;K, T, H, C>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699693">
                            <name>K</name>
                        </templateParameter>
                        <templateParameter id="8699694">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699695">
                            <name>H</name>
                            <default>Hasher&lt;K></default>
                        </templateParameter>
                        <templateParameter id="8699696">
                            <name>C</name>
                            <default>EqualTo&lt;K></default>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="8699693"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699694"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <concept ref="concept_HashFunction_996DE63476FF956BFF568F751960AF2CB4A097A8">
                            <params>
                                <type ref="8699695"/>
                                <type ref="8699693"/>
                            </params>
                        </concept>
                        <connector>and</connector>
                        <type ref="8699696"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="8699696"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="8699693"/>
                    </constraint>
                    <functions>
                        <function id="function_group_Begin_65E8626B3D84C24A64E67F583E2BBC4D188F3995">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_HashMap_K_T_H_C_8C1C66A4A711580681990A58D14F1F64FDB7F395">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> Begin();</syntax>
                                    <returnType ref="type.8700967"/>
                                </overload>
                                <overload id="member_function_Begin_HashMap_K_T_H_C_19568B9D7A949BAA5CCB6342726A9FF9885F54FC">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> Begin() const;</syntax>
                                    <returnType ref="type.8700981"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_HashMap_K_T_H_C_7D87CFD2CB0A60E93EF7BCF917A381C4127ED3A3">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> CBegin() const;</syntax>
                            <returnType ref="type.8700981"/>
                        </function>
                        <function id="member_function_CEnd_HashMap_K_T_H_C_AD3B1510A4339A6B48156CF6C92AC2519DF5EB2C">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> CEnd() const;</syntax>
                            <returnType ref="type.8700981"/>
                        </function>
                        <function id="member_function_CFind_HashMap_K_T_H_C_99BC0AA782AB57E9B9CFF753BCE6A9592268425F">
                            <name>CFind(const K&amp; key) const</name>
                            <syntax>public nothrow inline HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> CFind(const K&amp; key) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>key</name>
                                    <type ref="type.122"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700981"/>
                        </function>
                        <function id="member_function_Clear_HashMap_K_T_H_C_24B3C487BCBFA1EF653660725ABB32E2A138A916">
                            <name>Clear()</name>
                            <syntax>public nothrow inline void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_HashMap_K_T_H_C_D97A380ABAE482B71EB69E9AECEB7A89F161A8AB">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="function_group_End_932851C27A14B1E68E4EABEF3A339DC6C0B2644C">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_HashMap_K_T_H_C_9051F88D395B0CFDF4CC4966F0BD092E56EF098D">
                                    <name>End()</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> End();</syntax>
                                    <returnType ref="type.8700967"/>
                                </overload>
                                <overload id="member_function_End_HashMap_K_T_H_C_BC04529214EC7540DC84B5E6E2380536FD88549F">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> End() const;</syntax>
                                    <returnType ref="type.8700981"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Find_BAE3791A3176977D2D8D20BE885E16EBE217360C">
                            <name>Find</name>
                            <overloads>
                                <overload id="member_function_Find_HashMap_K_T_H_C_13587916556990CDC26D7F455BEAA6FA2D75A8FD">
                                    <name>Find(const K&amp; key)</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> Find(const K&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.122"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8700967"/>
                                </overload>
                                <overload id="member_function_Find_HashMap_K_T_H_C_0920BC5A36002CF233BBC7D5544C303AD217CDD7">
                                    <name>Find(const K&amp; key) const</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> Find(const K&amp; key) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.122"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8700981"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Insert_HashMap_K_T_H_C_C432308AD00014705263E54C523E2FFF28F83E19">
                            <name>Insert(const Pair&lt;K, T>&amp; value)</name>
                            <syntax>public inline Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool> Insert(const Pair&lt;K, T>&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8700958"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700988"/>
                        </function>
                        <function id="member_function_IsEmpty_HashMap_K_T_H_C_AEAE949CF4414A600291A53C71931B286B805978">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="function_group_Remove_999EA93304468A1342430FBD39A018E7AEC91929">
                            <name>Remove</name>
                            <overloads>
                                <overload id="member_function_Remove_HashMap_K_T_H_C_A91F0E07334E687C16F6539DECD2D488F8B89559">
                                    <name>Remove(HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> pos)</name>
                                    <syntax>public nothrow inline void Remove(HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.8700967"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Remove_HashMap_K_T_H_C_76E0BB7718B05FF75AA337EB3C3945F72163536A">
                                    <name>Remove(const K&amp; key)</name>
                                    <syntax>public nothrow inline void Remove(const K&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.122"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_op_index_HashMap_K_T_H_C_15EA563ECDE51290B34A56BDA501BDC2F5DC5815">
                            <name>operator[](const K&amp; key)</name>
                            <syntax>public inline T&amp; operator[](const K&amp; key);</syntax>
                            <parameters>
                                <parameter>
                                    <name>key</name>
                                    <type ref="type.122"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.129"/>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_Compare_7866028B05E4EBBDB90D37DC04707A7C1F271719">
                            <name>Compare</name>
                            <syntax>public typedef C Compare;</syntax>
                            <type ref="8699696"/>
                        </typedef>
                        <typedef id="typedef_ConstIterator_8239E0F25ADB5C1CE0684DBB2C39AA9E32A329A2">
                            <name>ConstIterator</name>
                            <syntax>public typedef HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> ConstIterator;</syntax>
                            <type ref="type.8700981"/>
                        </typedef>
                        <typedef id="typedef_HashFun_BC2756B88F493B383687868DD6607CD7529A754E">
                            <name>HashFun</name>
                            <syntax>public typedef H HashFun;</syntax>
                            <type ref="8699695"/>
                        </typedef>
                        <typedef id="typedef_Iterator_4665F3B6FC70467A10BA8C7E74C7A20D60FB9ABC">
                            <name>Iterator</name>
                            <syntax>public typedef HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> Iterator;</syntax>
                            <type ref="type.8700967"/>
                        </typedef>
                        <typedef id="typedef_KeyType_2A8EECBF1B2F4120D0EF95E8493795FB55E501AE">
                            <name>KeyType</name>
                            <syntax>public typedef K KeyType;</syntax>
                            <type ref="8699693"/>
                        </typedef>
                        <typedef id="typedef_MappedType_E31DA45D6C4EFDEBDE5C413274A8D6F14A555DE2">
                            <name>MappedType</name>
                            <syntax>public typedef T MappedType;</syntax>
                            <type ref="8699694"/>
                        </typedef>
                        <typedef id="typedef_ValueType_C195924CA5DD2D7640D32E6CB135FE222D7CE9F7">
                            <name>ValueType</name>
                            <syntax>public typedef Pair&lt;K, T> ValueType;</syntax>
                            <type ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_HashSet_T_H_C_6247CEC2AE0E22CFEFEC71837C21FA087B7840DC">
                    <name>HashSet&lt;T, H, C></name>
                    <groupName>HashSet</groupName>
                    <syntax> public class HashSet&lt;T, H, C>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699702">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699703">
                            <name>H</name>
                            <default>Hasher&lt;T></default>
                        </templateParameter>
                        <templateParameter id="8699704">
                            <name>C</name>
                            <default>EqualTo&lt;T></default>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="8699702"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <concept ref="concept_HashFunction_996DE63476FF956BFF568F751960AF2CB4A097A8">
                            <params>
                                <type ref="8699703"/>
                                <type ref="8699702"/>
                            </params>
                        </concept>
                        <connector>and</connector>
                        <type ref="8699704"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="8699704"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="8699702"/>
                    </constraint>
                    <functions>
                        <function id="function_group_Begin_97361C125A75C82F8421B63CDCBD5D82DF3F1777">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_HashSet_T_H_C_06EDB00601329F9FC4C775AE363003FC5F5527AF">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> Begin();</syntax>
                                    <returnType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                                </overload>
                                <overload id="member_function_Begin_HashSet_T_H_C_AF8BA1CF2FB86CC9C895AF1AC125BD893D8EA804">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> Begin() const;</syntax>
                                    <returnType ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_HashSet_T_H_C_4308D488E81EE93E73AB38DDCD9A7F70992D0595">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> CBegin() const;</syntax>
                            <returnType ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
                        </function>
                        <function id="member_function_CEnd_HashSet_T_H_C_9C10E4F9715D57775EB0D49DD3115FE7AABB8722">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> CEnd() const;</syntax>
                            <returnType ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
                        </function>
                        <function id="member_function_CFind_HashSet_T_H_C_5F337F3A92803CB8BC43E4618A2C8EC7CB900A74">
                            <name>CFind(const T&amp; key) const</name>
                            <syntax>public nothrow inline HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> CFind(const T&amp; key) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>key</name>
                                    <type ref="type.8701110"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
                        </function>
                        <function id="member_function_Clear_HashSet_T_H_C_C52C9D69C4B6AFEBD291A3448D01AFA9B0293B21">
                            <name>Clear()</name>
                            <syntax>public nothrow inline void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_HashSet_T_H_C_8213B8B7B179EF331438943D9442A22CC346E2B2">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="function_group_End_BE21B38AE01414BFFE2EF836EA8A400B9A174E7E">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_HashSet_T_H_C_400510C8BAFD2C412C2DAFFFFE1345D90AC8EC1D">
                                    <name>End()</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> End();</syntax>
                                    <returnType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                                </overload>
                                <overload id="member_function_End_HashSet_T_H_C_7A7CA171A79E46D1AC5D9C84B600B6F6EDF5E106">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> End() const;</syntax>
                                    <returnType ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Find_2A973724E77C753BAE9F76CEC24B388AEA1EFEDE">
                            <name>Find</name>
                            <overloads>
                                <overload id="member_function_Find_HashSet_T_H_C_E4FEAD60F8E916E5257084CA20A4298F815606F7">
                                    <name>Find(const T&amp; key)</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> Find(const T&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.8701110"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                                </overload>
                                <overload id="member_function_Find_HashSet_T_H_C_DD8ADF613AC23051A8C5A0810D260349CADC65F0">
                                    <name>Find(const T&amp; key) const</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> Find(const T&amp; key) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.8701110"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Insert_HashSet_T_H_C_023D88D53E8113FB84BD2440048FBBB05709F018">
                            <name>Insert(const T&amp; value)</name>
                            <syntax>public inline Pair&lt;HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>, bool> Insert(const T&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8701110"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8701142"/>
                        </function>
                        <function id="member_function_IsEmpty_HashSet_T_H_C_AF3E7B2B5B4EC4A370B5502A64AD93F679A89A72">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="function_group_Remove_DBE80FD04F4FD65933D2B6F00FA5487F9B5F3CFD">
                            <name>Remove</name>
                            <overloads>
                                <overload id="member_function_Remove_HashSet_T_H_C_63555703084616AA6F31ECE2DD8444B9E9DA0BCA">
                                    <name>Remove(HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> pos)</name>
                                    <syntax>public nothrow inline void Remove(HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Remove_HashSet_T_H_C_9B6224D9CA42DD50C92EDEA23F96E17D92B1F720">
                                    <name>Remove(const T&amp; key)</name>
                                    <syntax>public nothrow inline void Remove(const T&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.8701110"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_Compare_BF38755BF6106660A4FF2CEBE21C6F4E3093A6B4">
                            <name>Compare</name>
                            <syntax>public typedef C Compare;</syntax>
                            <type ref="8699704"/>
                        </typedef>
                        <typedef id="typedef_ConstIterator_B5BDCBB2AAC8486760A8FBE64C9F1F192C17ACEF">
                            <name>ConstIterator</name>
                            <syntax>public typedef HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> ConstIterator;</syntax>
                            <type ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
                        </typedef>
                        <typedef id="typedef_HashFun_CD0A861423784BE60858708DC0A2B8423E38AA14">
                            <name>HashFun</name>
                            <syntax>public typedef H HashFun;</syntax>
                            <type ref="8699703"/>
                        </typedef>
                        <typedef id="typedef_Iterator_E65FDBB955A277DE0B77882CE179CCA0CF8E21F1">
                            <name>Iterator</name>
                            <syntax>public typedef HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> Iterator;</syntax>
                            <type ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                        </typedef>
                        <typedef id="typedef_KeyType_0CFF6DAE817A5FD1A3F32FFFB6616A33298FEC77">
                            <name>KeyType</name>
                            <syntax>public typedef T KeyType;</syntax>
                            <type ref="8699702"/>
                        </typedef>
                        <typedef id="typedef_ValueType_DD265559282F3A1341E11FBB1C1574949A521DFD">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="8699702"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325">
                    <name>Hasher&lt;T></name>
                    <groupName>Hasher</groupName>
                    <syntax> public class Hasher&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699709">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.class_UnaryFun_T_ulong_A5DC55099E130EBC88925E5C1D4BFFAE1CC23ECA"/>
                    <functions>
                        <function id="member_function_op_apply_Hasher_T_80FA5E906D500DD677F0624ACED427AC96570BD4">
                            <name>operator()(const T&amp; x)</name>
                            <syntax>public nothrow inline ulong operator()(const T&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.139"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </function>
                    </functions>
                </class>
                <class id="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2">
                    <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
                    <groupName>Hashtable</groupName>
                    <syntax> public class Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699722">
                            <name>KeyType</name>
                        </templateParameter>
                        <templateParameter id="8699723">
                            <name>ValueType</name>
                        </templateParameter>
                        <templateParameter id="8699724">
                            <name>KeyOfValue</name>
                        </templateParameter>
                        <templateParameter id="8699725">
                            <name>HashFun</name>
                            <default>Hasher&lt;KeyType></default>
                        </templateParameter>
                        <templateParameter id="8699726">
                            <name>Compare</name>
                            <default>EqualTo&lt;KeyType></default>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="8699722"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699723"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <concept ref="concept_KeySelectionFunction_719538A539328921CB0D528AECE6DCBE1B8C6E19">
                            <params>
                                <type ref="8699724"/>
                                <type ref="8699722"/>
                                <type ref="8699723"/>
                            </params>
                        </concept>
                        <connector>and</connector>
                        <concept ref="concept_HashFunction_996DE63476FF956BFF568F751960AF2CB4A097A8">
                            <params>
                                <type ref="8699725"/>
                                <type ref="8699722"/>
                            </params>
                        </concept>
                        <connector>and</connector>
                        <type ref="8699726"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="8699726"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="8699722"/>
                    </constraint>
                    <constructors>
                        <constructor id="default_constructor_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_C120DFC56B289D5CA34B92C224F0C06B85835AC6">
                            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>()</name>
                            <syntax>public nothrow Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>();</syntax>
                        </constructor>
                        <constructor id="move_constructor_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_BE982BF4502B2B7F1DEF741F0BCD39F771331E71">
                            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>(Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp; that)</name>
                            <syntax>public nothrow Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>(Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.144"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_CCF8491051569C54014568C0B46111CCD7FD0934">
                            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>(const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp; that)</name>
                            <syntax>public Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>(const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8701301"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Begin_4C20666FFAAFC3DF29B3A2B31FA8BF963C5AD58E">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_5CD1ACCFEF85AC0BA33D444650F51D8D43916C97">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> Begin();</syntax>
                                    <returnType ref="type.class_HashtableIterator_ValueType_ValueType_R_ValueType_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A8752F817C504EBDF51FB4440DE5237504D01981"/>
                                </overload>
                                <overload id="member_function_Begin_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A7E2AA55CF732B3703E77CB1D84FAA1D7B26610F">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> Begin() const;</syntax>
                                    <returnType ref="type.class_HashtableIterator_ValueType_ValueType_C_R_ValueType_C_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_1FA3480F54A3A001A9D02C46FBC4C609EBAD055C"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_4F789A3F92EA7C2C73F9E092B0AE1F0B4E18B32E">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> CBegin() const;</syntax>
                            <returnType ref="type.class_HashtableIterator_ValueType_ValueType_C_R_ValueType_C_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_1FA3480F54A3A001A9D02C46FBC4C609EBAD055C"/>
                        </function>
                        <function id="member_function_CEnd_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_5BD6B342849DF0A0DF0BFBA5294BC2C4E344E59A">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> CEnd() const;</syntax>
                            <returnType ref="type.class_HashtableIterator_ValueType_ValueType_C_R_ValueType_C_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_1FA3480F54A3A001A9D02C46FBC4C609EBAD055C"/>
                        </function>
                        <function id="member_function_CFind_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_7D1AA31FCFB588C5A20679EDFDB58F45CE80A6CF">
                            <name>CFind(const KeyType&amp; key) const</name>
                            <syntax>public nothrow HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> CFind(const KeyType&amp; key) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>key</name>
                                    <type ref="type.145"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.class_HashtableIterator_ValueType_ValueType_C_R_ValueType_C_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_1FA3480F54A3A001A9D02C46FBC4C609EBAD055C"/>
                        </function>
                        <function id="member_function_Clear_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_9ABEE0951EC3CA180921C7EABA6C9B64DCCDEE4C">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_3D9FD6A916B148475CF0333194DAF280D8FE57C1">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="function_group_End_52C1FD05AB2421F641778E83A9AE7A21716AA0F7">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_AC8A414629728BB054B0424BC7D26FD44B0E4198">
                                    <name>End()</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> End();</syntax>
                                    <returnType ref="type.class_HashtableIterator_ValueType_ValueType_R_ValueType_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A8752F817C504EBDF51FB4440DE5237504D01981"/>
                                </overload>
                                <overload id="member_function_End_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B22A85E7852FD65A805FE6FA7CBC89FD9E9D438B">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> End() const;</syntax>
                                    <returnType ref="type.class_HashtableIterator_ValueType_ValueType_C_R_ValueType_C_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_1FA3480F54A3A001A9D02C46FBC4C609EBAD055C"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Find_64510E30457D8489A15854B9B57EAB8AA025C280">
                            <name>Find</name>
                            <overloads>
                                <overload id="member_function_Find_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A9271097C38456261F2180E88BB1388CC78EA70C">
                                    <name>Find(const KeyType&amp; key)</name>
                                    <syntax>public nothrow HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> Find(const KeyType&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.145"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.class_HashtableIterator_ValueType_ValueType_R_ValueType_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A8752F817C504EBDF51FB4440DE5237504D01981"/>
                                </overload>
                                <overload id="member_function_Find_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_4CDBC2BEC97E355CA0AFF60809AD485042484A12">
                                    <name>Find(const KeyType&amp; key) const</name>
                                    <syntax>public nothrow HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> Find(const KeyType&amp; key) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.145"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.class_HashtableIterator_ValueType_ValueType_C_R_ValueType_C_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_1FA3480F54A3A001A9D02C46FBC4C609EBAD055C"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_GetBucket_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_C204DA02A93346E4D13780B16A48602F4EFDBD0E">
                            <name>GetBucket(long index) const</name>
                            <syntax>public nothrow inline Bucket&lt;ValueType>* GetBucket(long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8701311"/>
                        </function>
                        <function id="member_function_GetBucketCount_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_53314821EF5C3C02BFEA70FB21746F1B5254DDB8">
                            <name>GetBucketCount() const</name>
                            <syntax>public nothrow inline long GetBucketCount() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_GetBucketIndex_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_7763E86B403332403B6982B966C80FA3AC9DE466">
                            <name>GetBucketIndex(const ValueType&amp; value) const</name>
                            <syntax>public nothrow inline long GetBucketIndex(const ValueType&amp; value) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8701316"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_Insert_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_20C7118E8C90D301B0509B3752EBA95EB8DC74F4">
                            <name>Insert(const ValueType&amp; value)</name>
                            <syntax>public Pair&lt;HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>, bool> Insert(const ValueType&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8701316"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8701326"/>
                        </function>
                        <function id="member_function_IsEmpty_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_00A8C7FA934B539191C70B9D1CA58EA400FAB145">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="function_group_Remove_8E7E1777D634C99B6DCFCD1C0B260F2BA843F380">
                            <name>Remove</name>
                            <overloads>
                                <overload id="member_function_Remove_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_312234DC35470295CE6479A8DAA543B401FF6892">
                                    <name>Remove(HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> pos)</name>
                                    <syntax>public nothrow void Remove(HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.class_HashtableIterator_ValueType_ValueType_R_ValueType_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A8752F817C504EBDF51FB4440DE5237504D01981"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Remove_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A27D3B00BDE13AE1D5AE6EF67903D0FAE5CFB2BF">
                                    <name>Remove(const KeyType&amp; key)</name>
                                    <syntax>public nothrow void Remove(const KeyType&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.145"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_SetMaxLoadFactor_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_2F0D8EE2E7F29B91DFAA871389DFE5CFF755E1C8">
                            <name>SetMaxLoadFactor(double maxLoadFactor_)</name>
                            <syntax>public nothrow inline void SetMaxLoadFactor(double maxLoadFactor_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>maxLoadFactor_</name>
                                    <type ref="type.8699075"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_op_assign_42816A98B851DF877CD50AF5596C5550CCCFB1EB">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A9EF68FA7CD08932000F01559C8FC610DFC49393">
                                    <name>operator=(Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp; that)</name>
                                    <syntax>public nothrow void operator=(Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.144"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A82D28187F413C970FBA60CC7C1B59DD70F81DE0">
                                    <name>operator=(const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp; that)</name>
                                    <syntax>public void operator=(const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.8701301"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ConstIterator_D8ACCB1653C3EB7755971A84668EF382C37E1DE7">
                            <name>ConstIterator</name>
                            <syntax>public typedef HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> ConstIterator;</syntax>
                            <type ref="type.class_HashtableIterator_ValueType_ValueType_C_R_ValueType_C_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_1FA3480F54A3A001A9D02C46FBC4C609EBAD055C"/>
                        </typedef>
                        <typedef id="typedef_Iterator_065E4E1FBB70AED7A93ED6E652821B859BECB7DD">
                            <name>Iterator</name>
                            <syntax>public typedef HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> Iterator;</syntax>
                            <type ref="type.class_HashtableIterator_ValueType_ValueType_R_ValueType_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A8752F817C504EBDF51FB4440DE5237504D01981"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1">
                    <name>HashtableIterator&lt;T, R, P, H></name>
                    <groupName>HashtableIterator</groupName>
                    <syntax> public class HashtableIterator&lt;T, R, P, H>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699713">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699714">
                            <name>R</name>
                        </templateParameter>
                        <templateParameter id="8699715">
                            <name>P</name>
                        </templateParameter>
                        <templateParameter id="8699716">
                            <name>H</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="default_constructor_HashtableIterator_T_R_P_H_A4CF5976E668436AFC61A9E6682E760CE752D49D">
                            <name>HashtableIterator&lt;T, R, P, H>()</name>
                            <syntax>public nothrow inline HashtableIterator&lt;T, R, P, H>();</syntax>
                        </constructor>
                        <constructor id="constructor_HashtableIterator_T_R_P_H_37B6099986C2AAB8F1D4EDFD6A0D767682A1470C">
                            <name>HashtableIterator&lt;T, R, P, H>(H* table_, Bucket&lt;T>* bucket_)</name>
                            <syntax>public nothrow inline HashtableIterator&lt;T, R, P, H>(H* table_, Bucket&lt;T>* bucket_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>table_</name>
                                    <type ref="type.8701270"/>
                                </parameter>
                                <parameter>
                                    <name>bucket_</name>
                                    <type ref="type.8701273"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_GetBucket_HashtableIterator_T_R_P_H_773822587EA9EE2880B6E846D2491A813A9C07DE">
                            <name>GetBucket() const</name>
                            <syntax>public nothrow inline Bucket&lt;T>* GetBucket() const;</syntax>
                            <returnType ref="type.8701273"/>
                        </function>
                        <function id="member_function_op_star_HashtableIterator_T_R_P_H_E1B21DDFED5574FA7F9529459BA6325AC34504B8">
                            <name>operator*()</name>
                            <syntax>public nothrow inline R operator*();</syntax>
                            <returnType ref="8699714"/>
                        </function>
                        <function id="member_function_op_plusplus_HashtableIterator_T_R_P_H_9B6CE402AC9084539C4A9D2EE402E7F8260C348F">
                            <name>operator++()</name>
                            <syntax>public nothrow inline HashtableIterator&lt;T, R, P, H>&amp; operator++();</syntax>
                            <returnType ref="type.8701266"/>
                        </function>
                        <function id="member_function_op_arrow_HashtableIterator_T_R_P_H_28B4BB9D1B16EB10F389DEB37F4DFAE337234910">
                            <name>operator->()</name>
                            <syntax>public nothrow inline P operator->();</syntax>
                            <returnType ref="8699715"/>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_HashtableType_88DE4D2AC581DA9D48C950D9DB7FFAFD023955E5">
                            <name>HashtableType</name>
                            <syntax>public typedef H HashtableType;</syntax>
                            <type ref="8699716"/>
                        </typedef>
                        <typedef id="typedef_PointerType_7D068AD725A76E5B98AA59346C640C5236680D84">
                            <name>PointerType</name>
                            <syntax>public typedef P PointerType;</syntax>
                            <type ref="8699715"/>
                        </typedef>
                        <typedef id="typedef_ReferenceType_09AEB4A0B9CC8F59C9F16C51E8EE31568CF131E2">
                            <name>ReferenceType</name>
                            <syntax>public typedef R ReferenceType;</syntax>
                            <type ref="8699714"/>
                        </typedef>
                        <typedef id="typedef_ValueType_CF676C33365285A3DDE209E55B538018EED0E0BC">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="8699713"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20">
                    <name>LinkedList&lt;T></name>
                    <groupName>LinkedList</groupName>
                    <syntax> public class LinkedList&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699739">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="8699739"/>
                        <connector>is</connector>
                        <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                    </constraint>
                    <constructors>
                        <constructor id="default_constructor_LinkedList_T_3BA3AFC39DE9353C84189744C0F0B39D31B21D38">
                            <name>LinkedList&lt;T>()</name>
                            <syntax>public nothrow LinkedList&lt;T>();</syntax>
                        </constructor>
                        <constructor id="move_constructor_LinkedList_T_1632958D9028122A2B6369B57F1CDA060852E614">
                            <name>LinkedList&lt;T>(LinkedList&lt;T>&amp;&amp; that)</name>
                            <syntax>public nothrow LinkedList&lt;T>(LinkedList&lt;T>&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.153"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_LinkedList_T_56FC4C49FDA29D3DAD2BD7C819C66421FFDFD771">
                            <name>LinkedList&lt;T>(const LinkedList&lt;T>&amp; that)</name>
                            <syntax>public LinkedList&lt;T>(const LinkedList&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8701441"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Add_LinkedList_T_B5ABB9074241F84FFCD4BCD7E6C46056F9DE1CA0">
                            <name>Add(const T&amp; value)</name>
                            <syntax>public void Add(const T&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8701456"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Back_LinkedList_T_FDBAA2C06F2EF640F1D49349A02342CC335729A6">
                            <name>Back() const</name>
                            <syntax>public nothrow inline const T&amp; Back() const;</syntax>
                            <returnType ref="type.8701456"/>
                        </function>
                        <function id="function_group_Begin_7EB6C9B8298B23B0865FBBED2115038C1E5E3C0E">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_LinkedList_T_F657820FAF7F07DC448E731686F8036168D61C51">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline LinkedListNodeIterator&lt;T, T&amp;, T*> Begin();</syntax>
                                    <returnType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                                </overload>
                                <overload id="member_function_Begin_LinkedList_T_5F1448BFA8A14D7FC223303D246C8DBDF4B41CAE">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline LinkedListNodeIterator&lt;T, const T&amp;, const T*> Begin() const;</syntax>
                                    <returnType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_LinkedList_T_F7013E3D405A9D2E4FF49E40E2E2EAD1919B1232">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline LinkedListNodeIterator&lt;T, const T&amp;, const T*> CBegin() const;</syntax>
                            <returnType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                        </function>
                        <function id="member_function_CEnd_LinkedList_T_426758E760EA9685E2617DCC0B27C19240EFD772">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline LinkedListNodeIterator&lt;T, const T&amp;, const T*> CEnd() const;</syntax>
                            <returnType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                        </function>
                        <function id="member_function_Clear_LinkedList_T_0A725CB9F072737578579B28A65854606BDD67FA">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_LinkedList_T_CED5E1318A906EBE39C67E1B51E351956F54A1A0">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="function_group_End_C7A02F77AB49DB5DC0410360E32D9546A17A3829">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_LinkedList_T_492423D9F95020A906EBF23AD3D6FC13E5234A2A">
                                    <name>End()</name>
                                    <syntax>public nothrow inline LinkedListNodeIterator&lt;T, T&amp;, T*> End();</syntax>
                                    <returnType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                                </overload>
                                <overload id="member_function_End_LinkedList_T_2B56A643EDB3038056485237EE842E05042F66E4">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline LinkedListNodeIterator&lt;T, const T&amp;, const T*> End() const;</syntax>
                                    <returnType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Front_LinkedList_T_CBEF2989AE0E01A1547A059725461D0E2682C9BF">
                            <name>Front() const</name>
                            <syntax>public nothrow inline const T&amp; Front() const;</syntax>
                            <returnType ref="type.8701456"/>
                        </function>
                        <function id="member_function_Insert_LinkedList_T_42B16FDD6F7A092B89C400993EE9CF0E7CDFD2B8">
                            <name>Insert(LinkedListNodeIterator&lt;T, T&amp;, T*> pos, const T&amp; value)</name>
                            <syntax>public LinkedListNodeIterator&lt;T, T&amp;, T*> Insert(LinkedListNodeIterator&lt;T, T&amp;, T*> pos, const T&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8701456"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                        </function>
                        <function id="member_function_InsertFront_LinkedList_T_6A5F6823A718026B0E6C05757804ABBCCE1BDA84">
                            <name>InsertFront(const T&amp; value)</name>
                            <syntax>public LinkedListNodeIterator&lt;T, T&amp;, T*> InsertFront(const T&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8701456"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                        </function>
                        <function id="member_function_IsEmpty_LinkedList_T_493A64932EF9DA3259E1B4E0A50FCB7858D5356F">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="function_group_Remove_A92FFF51BB76FBFA6A39BD8800693D17379D1174">
                            <name>Remove</name>
                            <overloads>
                                <overload id="member_function_Remove_LinkedList_T_F02CC7D703884D20F502CD3D48D4DE91DA56B6A0">
                                    <name>Remove(LinkedListNodeIterator&lt;T, T&amp;, T*> pos)</name>
                                    <syntax>public nothrow void Remove(LinkedListNodeIterator&lt;T, T&amp;, T*> pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Remove_LinkedList_T_CEF4B5A5B2D576F43485F608C1092EA27C735D79">
                                    <name>Remove(const T&amp; value)</name>
                                    <syntax>public nothrow void Remove(const T&amp; value);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>value</name>
                                            <type ref="type.8701456"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_RemoveFirst_LinkedList_T_2A3BADE6EB2E778913483A007AE9C5FF6E86D581">
                            <name>RemoveFirst()</name>
                            <syntax>public nothrow void RemoveFirst();</syntax>
                        </function>
                        <function id="member_function_RemoveLast_LinkedList_T_728F4C4FC1F60C48A2678950CB2B6D91A481088B">
                            <name>RemoveLast()</name>
                            <syntax>public nothrow void RemoveLast();</syntax>
                        </function>
                        <function id="member_function_Tail_LinkedList_T_B4ABF872C9164136302548EF04937E7A1B782C39">
                            <name>Tail()</name>
                            <syntax>public nothrow inline LinkedListNode&lt;T>* Tail();</syntax>
                            <returnType ref="type.8701451"/>
                        </function>
                        <function id="function_group_op_assign_26C48A92D7873FC1D1330DAEB1AB62792A48D33A">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_LinkedList_T_A774CE7FDAE23F56535CD8BF95B9457D568C9357">
                                    <name>operator=(LinkedList&lt;T>&amp;&amp; that)</name>
                                    <syntax>public void operator=(LinkedList&lt;T>&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.153"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_LinkedList_T_FA9D031A21D3ECD50D5FB2FA24EEC445B532FDDF">
                                    <name>operator=(const LinkedList&lt;T>&amp; that)</name>
                                    <syntax>public void operator=(const LinkedList&lt;T>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.8701441"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ConstIterator_2CED4053E43F86C6DD53CBE7EF53FAEF520AF15C">
                            <name>ConstIterator</name>
                            <syntax>public typedef LinkedListNodeIterator&lt;T, const T&amp;, const T*> ConstIterator;</syntax>
                            <type ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                        </typedef>
                        <typedef id="typedef_Iterator_9881AA2FEBF7906BDFAE72B13F06210CCA727970">
                            <name>Iterator</name>
                            <syntax>public typedef LinkedListNodeIterator&lt;T, T&amp;, T*> Iterator;</syntax>
                            <type ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                        </typedef>
                        <typedef id="typedef_ValueType_6A322A37FE1E4B31E674581AD85DFA4B53582C7C">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="8699739"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5">
                    <name>LinkedListNode&lt;T></name>
                    <groupName>LinkedListNode</groupName>
                    <syntax> public class LinkedListNode&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699730">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="constructor_LinkedListNode_T_0CA94A77641194F1F800DA0BFE76E2CCD2E1A3AD">
                            <name>LinkedListNode&lt;T>(const T&amp; value_, LinkedListNode&lt;T>* prev_, LinkedListNode&lt;T>* next_)</name>
                            <syntax>public LinkedListNode&lt;T>(const T&amp; value_, LinkedListNode&lt;T>* prev_, LinkedListNode&lt;T>* next_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.150"/>
                                </parameter>
                                <parameter>
                                    <name>prev_</name>
                                    <type ref="type.8701357"/>
                                </parameter>
                                <parameter>
                                    <name>next_</name>
                                    <type ref="type.8701357"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Next_LinkedListNode_T_C81FACB4934A0540B84B6AF18FE4935C49061D5D">
                            <name>Next() const</name>
                            <syntax>public nothrow inline LinkedListNode&lt;T>* Next() const;</syntax>
                            <returnType ref="type.8701357"/>
                        </function>
                        <function id="member_function_Prev_LinkedListNode_T_05E39188EFCA8772DC73DD3290792EB39C0155C4">
                            <name>Prev() const</name>
                            <syntax>public nothrow inline LinkedListNode&lt;T>* Prev() const;</syntax>
                            <returnType ref="type.8701357"/>
                        </function>
                        <function id="member_function_SetNext_LinkedListNode_T_91E52A27F14B903E67F87D864B286401E20CD324">
                            <name>SetNext(LinkedListNode&lt;T>* next_)</name>
                            <syntax>public nothrow inline void SetNext(LinkedListNode&lt;T>* next_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>next_</name>
                                    <type ref="type.8701357"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetPrev_LinkedListNode_T_0C57952F594FB3BF99504BEA4EFBF237F228479B">
                            <name>SetPrev(LinkedListNode&lt;T>* prev_)</name>
                            <syntax>public nothrow inline void SetPrev(LinkedListNode&lt;T>* prev_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>prev_</name>
                                    <type ref="type.8701357"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_Value_C270723701F8EC130F6C5D6755771D1543F2356C">
                            <name>Value</name>
                            <overloads>
                                <overload id="member_function_Value_LinkedListNode_T_91FEA4D277FE61AF37C91389F0223DE9B578B2AE">
                                    <name>Value()</name>
                                    <syntax>public nothrow inline T&amp; Value();</syntax>
                                    <returnType ref="type.151"/>
                                </overload>
                                <overload id="member_function_Value_LinkedListNode_T_45B43EB568E784B8F2A37C6EA495BAD32AC073DB">
                                    <name>Value() const</name>
                                    <syntax>public nothrow inline const T&amp; Value() const;</syntax>
                                    <returnType ref="type.150"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ValueType_948A99BDDD5A0B6F74CFF5FC964D27091B75B8DD">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="8699730"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_LinkedListNodeIterator_T_R_P_1B6A4ECB2747EF21647DCDFB3EA5E3CFB23B08EF">
                    <name>LinkedListNodeIterator&lt;T, R, P></name>
                    <groupName>LinkedListNodeIterator</groupName>
                    <syntax> public class LinkedListNodeIterator&lt;T, R, P>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699732">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699733">
                            <name>R</name>
                        </templateParameter>
                        <templateParameter id="8699734">
                            <name>P</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="default_constructor_LinkedListNodeIterator_T_R_P_B57566E00B1BF3EA704C59B3D8658ED6974C0BC7">
                            <name>LinkedListNodeIterator&lt;T, R, P>()</name>
                            <syntax>public nothrow LinkedListNodeIterator&lt;T, R, P>();</syntax>
                        </constructor>
                        <constructor id="constructor_LinkedListNodeIterator_T_R_P_340E5F170F25BECA026DA2EBBF96F29442787202">
                            <name>LinkedListNodeIterator&lt;T, R, P>(LinkedList&lt;T>* list_, LinkedListNode&lt;T>* node_)</name>
                            <syntax>public nothrow LinkedListNodeIterator&lt;T, R, P>(LinkedList&lt;T>* list_, LinkedListNode&lt;T>* node_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>list_</name>
                                    <type ref="type.8701371"/>
                                </parameter>
                                <parameter>
                                    <name>node_</name>
                                    <type ref="type.8701385"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Node_LinkedListNodeIterator_T_R_P_F8D0BD2D70F3674F7D7BF13A45F617B62FD29A20">
                            <name>Node() const</name>
                            <syntax>public nothrow inline LinkedListNode&lt;T>* Node() const;</syntax>
                            <returnType ref="type.8701385"/>
                        </function>
                        <function id="member_function_op_star_LinkedListNodeIterator_T_R_P_EEAB0AFBD79D6989C186CA05A837FED7B8491828">
                            <name>operator*()</name>
                            <syntax>public nothrow inline R operator*();</syntax>
                            <returnType ref="8699733"/>
                        </function>
                        <function id="member_function_op_plusplus_LinkedListNodeIterator_T_R_P_4EC528BC4EFEEA4A9384958A9C2A225A292AA3EE">
                            <name>operator++()</name>
                            <syntax>public nothrow inline LinkedListNodeIterator&lt;T, R, P>&amp; operator++();</syntax>
                            <returnType ref="type.8701366"/>
                        </function>
                        <function id="member_function_op_minusminus_LinkedListNodeIterator_T_R_P_65EF83F23AAC52631277F6B0DE9E99E4D2BB477A">
                            <name>operator--()</name>
                            <syntax>public nothrow inline LinkedListNodeIterator&lt;T, R, P>&amp; operator--();</syntax>
                            <returnType ref="type.8701366"/>
                        </function>
                        <function id="member_function_op_arrow_LinkedListNodeIterator_T_R_P_F8E99C5A1A31FCA5D8D81A8FC336A517B8128B2E">
                            <name>operator->()</name>
                            <syntax>public nothrow inline P operator->();</syntax>
                            <returnType ref="8699734"/>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_PointerType_8C1CF2ABFDFE2130D51614B483D5655CF54CA455">
                            <name>PointerType</name>
                            <syntax>public typedef P PointerType;</syntax>
                            <type ref="8699734"/>
                        </typedef>
                        <typedef id="typedef_ReferenceType_8AD6C39D6EDC6EFA49DD4EC57E76B0AA4FBA1CA6">
                            <name>ReferenceType</name>
                            <syntax>public typedef R ReferenceType;</syntax>
                            <type ref="8699733"/>
                        </typedef>
                        <typedef id="typedef_ValueType_3E4310E2C009E115790273981F697E5049F4BAD5">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="8699732"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C">
                    <name>List&lt;T></name>
                    <groupName>List</groupName>
                    <syntax> public class List&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699743">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="8699743"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <constructors>
                        <constructor id="default_constructor_List_T_BA98FAD30FC980262BA8702E5A5F4C353452B7A2">
                            <name>List&lt;T>()</name>
                            <syntax>public nothrow List&lt;T>();</syntax>
                        </constructor>
                        <constructor id="move_constructor_List_T_D2250EEDFFA10AC1F1C7C99671BE1FC30D28E74E">
                            <name>List&lt;T>(List&lt;T>&amp;&amp; that)</name>
                            <syntax>public nothrow List&lt;T>(List&lt;T>&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.156"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_List_T_E926101D1CCD088E3F4DA8D9293331AA65AC272C">
                            <name>List&lt;T>(const List&lt;T>&amp; that)</name>
                            <syntax>public List&lt;T>(const List&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8701531"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_List_T_8F979D448B7B888E4670A0AD7812A0F38DC74171">
                            <name>List&lt;T>(long n, const T&amp; value)</name>
                            <syntax>public List&lt;T>(long n, const T&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8701532"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Add_F4638F3DD74085EFC3B45FB3D7770BFD75CB7F32">
                            <name>Add</name>
                            <overloads>
                                <overload id="member_function_Add_List_T_1242E85AAD4D8369255E6BB57F2A841ED245BACD">
                                    <name>Add(T&amp;&amp; item)</name>
                                    <syntax>public void Add(T&amp;&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.157"/>
                                        </parameter>
                                    </parameters>
                                    <constraint>
                                        <type ref="8699743"/>
                                        <connector>is</connector>
                                        <concept ref="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D"/>
                                    </constraint>
                                </overload>
                                <overload id="member_function_Add_List_T_0CEB0F989B58359D06357C988DF595C83DA28430">
                                    <name>Add(const T&amp; item)</name>
                                    <syntax>public void Add(const T&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.8701532"/>
                                        </parameter>
                                    </parameters>
                                    <constraint>
                                        <type ref="8699743"/>
                                        <connector>is</connector>
                                        <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                                    </constraint>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Back_C7F1C73C3841ED4C13753B294996DA07CBC94762">
                            <name>Back</name>
                            <overloads>
                                <overload id="member_function_Back_List_T_03E3FD93DE2ABDC2649DE781271BF7359AC4715A">
                                    <name>Back()</name>
                                    <syntax>public nothrow inline T&amp; Back();</syntax>
                                    <returnType ref="type.8701542"/>
                                </overload>
                                <overload id="member_function_Back_List_T_3E7D96EBC75EEFD525A63BA0A3D17FC1D6A31AD9">
                                    <name>Back() const</name>
                                    <syntax>public nothrow inline const T&amp; Back() const;</syntax>
                                    <returnType ref="type.8701532"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Begin_758060A065A001ADAD3174FFEDD31BCD0B0E42F0">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_List_T_5B142E53EFA4A09A09C698605CBC3929F22ACC87">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline RandomAccessIter&lt;T, T&amp;, T*> Begin();</syntax>
                                    <returnType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                                </overload>
                                <overload id="member_function_Begin_List_T_F01368757D5322AB3D9E213C9C311320405DBC29">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline RandomAccessIter&lt;T, const T&amp;, const T*> Begin() const;</syntax>
                                    <returnType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_List_T_CBA03EEF64A2784C05F241B0FA175357FC842886">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;T, const T&amp;, const T*> CBegin() const;</syntax>
                            <returnType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                        </function>
                        <function id="member_function_CEnd_List_T_63142CF7EDE83E01CA2C9FBCAC75081A2DFA681D">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;T, const T&amp;, const T*> CEnd() const;</syntax>
                            <returnType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                        </function>
                        <function id="member_function_Capacity_List_T_AE251844D73314FA36A250132906307DD0B8FBAD">
                            <name>Capacity() const</name>
                            <syntax>public nothrow inline long Capacity() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_Clear_List_T_B605D2D27445F8489FD181D1D012BF1245483B93">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_List_T_CC08825E95DA25361D24D0B94402BCC8F4B0197F">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="function_group_End_CDDF7BF21756D1815110AFBD2BA0C28339C12C0C">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_List_T_B9D951A3B6881FC35620AC1FAB0E374846B164DF">
                                    <name>End()</name>
                                    <syntax>public nothrow inline RandomAccessIter&lt;T, T&amp;, T*> End();</syntax>
                                    <returnType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                                </overload>
                                <overload id="member_function_End_List_T_CE2BE5C7864285366FBE606151ECC5F94BAB0E0C">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline RandomAccessIter&lt;T, const T&amp;, const T*> End() const;</syntax>
                                    <returnType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Front_66C06636F700FDB269A58019A44450CBB1E009F2">
                            <name>Front</name>
                            <overloads>
                                <overload id="member_function_Front_List_T_7D22EECF7BC0F908BC2384575A5A1FF83A789945">
                                    <name>Front()</name>
                                    <syntax>public nothrow inline T&amp; Front();</syntax>
                                    <returnType ref="type.8701542"/>
                                </overload>
                                <overload id="member_function_Front_List_T_464DC4BA6178428B77FC321C19E632A31F481528">
                                    <name>Front() const</name>
                                    <syntax>public nothrow inline const T&amp; Front() const;</syntax>
                                    <returnType ref="type.8701532"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Insert_86CE4113FBF10F9D0297EA4E27D22D46B6B77724">
                            <name>Insert</name>
                            <overloads>
                                <overload id="member_function_Insert_List_T_36EFC40710E63A6F9457E3A7F4AD58E72EDC2B06">
                                    <name>Insert(RandomAccessIter&lt;T, T&amp;, T*> pos, T&amp;&amp; item)</name>
                                    <syntax>public RandomAccessIter&lt;T, T&amp;, T*> Insert(RandomAccessIter&lt;T, T&amp;, T*> pos, T&amp;&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                                        </parameter>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.157"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                                    <constraint>
                                        <type ref="8699743"/>
                                        <connector>is</connector>
                                        <concept ref="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D"/>
                                    </constraint>
                                </overload>
                                <overload id="member_function_Insert_List_T_BE00AC0DF91BDE700E5B2651583DD7C1BE97A9CF">
                                    <name>Insert(RandomAccessIter&lt;T, T&amp;, T*> pos, const T&amp; item)</name>
                                    <syntax>public RandomAccessIter&lt;T, T&amp;, T*> Insert(RandomAccessIter&lt;T, T&amp;, T*> pos, const T&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                                        </parameter>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.8701532"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                                    <constraint>
                                        <type ref="8699743"/>
                                        <connector>is</connector>
                                        <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                                    </constraint>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_InsertFront_D5D0E1EA6FE0C5EB652ACA646E14E17A4F2804BE">
                            <name>InsertFront</name>
                            <overloads>
                                <overload id="member_function_InsertFront_List_T_98D3B37E0F6554BDCA699BD8ED43E18E0CF0D450">
                                    <name>InsertFront(T&amp;&amp; item)</name>
                                    <syntax>public RandomAccessIter&lt;T, T&amp;, T*> InsertFront(T&amp;&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.157"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                                    <constraint>
                                        <type ref="8699743"/>
                                        <connector>is</connector>
                                        <concept ref="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D"/>
                                    </constraint>
                                </overload>
                                <overload id="member_function_InsertFront_List_T_C7162F3ADF5C6122D6A514EBA9D00F5E50438DD7">
                                    <name>InsertFront(const T&amp; item)</name>
                                    <syntax>public RandomAccessIter&lt;T, T&amp;, T*> InsertFront(const T&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.8701532"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                                    <constraint>
                                        <type ref="8699743"/>
                                        <connector>is</connector>
                                        <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                                    </constraint>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_IsEmpty_List_T_9D2D6FCD118AECF7D6172A1DA09ACD9A5837CED0">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Remove_List_T_6CA3C8C3007BC80A71ACBD9A12502744E82C89ED">
                            <name>Remove(RandomAccessIter&lt;T, T&amp;, T*> pos)</name>
                            <syntax>public T Remove(RandomAccessIter&lt;T, T&amp;, T*> pos);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                                </parameter>
                            </parameters>
                            <returnType ref="8699743"/>
                        </function>
                        <function id="member_function_RemoveFirst_List_T_90904AA2407F217F3BF2BFE855BA3B5978647F16">
                            <name>RemoveFirst()</name>
                            <syntax>public T RemoveFirst();</syntax>
                            <returnType ref="8699743"/>
                        </function>
                        <function id="member_function_RemoveLast_List_T_339A240B36683335D5ABEC158BCABFC2BFCB0373">
                            <name>RemoveLast()</name>
                            <syntax>public T RemoveLast();</syntax>
                            <returnType ref="8699743"/>
                        </function>
                        <function id="member_function_Reserve_List_T_A1BA0B51B33D844FAB593BF2B31274289836B651">
                            <name>Reserve(long minRes)</name>
                            <syntax>public void Reserve(long minRes);</syntax>
                            <parameters>
                                <parameter>
                                    <name>minRes</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Resize_List_T_57B376A5801DA1B47D2DA55DDE38E7037B451239">
                            <name>Resize(long newCount)</name>
                            <syntax>public void Resize(long newCount);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newCount</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="8699743"/>
                                <connector>is</connector>
                                <concept ref="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D"/>
                            </constraint>
                        </function>
                        <function id="function_group_op_assign_681FCE143E5181BDBF0D45D260BDBD36B29CF96F">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_List_T_9ADA803B73384B3A969D25A29ACAB83482F160D5">
                                    <name>operator=(List&lt;T>&amp;&amp; that)</name>
                                    <syntax>public nothrow void operator=(List&lt;T>&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.156"/>
                                        </parameter>
                                    </parameters>
                                    <constraint>
                                        <type ref="8699743"/>
                                        <connector>is</connector>
                                        <concept ref="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D"/>
                                    </constraint>
                                </overload>
                                <overload id="copy_assignment_op_assign_List_T_44B985A7A9A36DA3798EC9C18EAAF09FD9F59569">
                                    <name>operator=(const List&lt;T>&amp; that)</name>
                                    <syntax>public void operator=(const List&lt;T>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.8701531"/>
                                        </parameter>
                                    </parameters>
                                    <constraint>
                                        <type ref="8699743"/>
                                        <connector>is</connector>
                                        <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                                    </constraint>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_index_92651A8823E01FEF6E9EC50F9405EA8D0FF83890">
                            <name>operator[]</name>
                            <overloads>
                                <overload id="member_function_op_index_List_T_539A1A941184F71A7AE8BD827A01B666F3D48830">
                                    <name>operator[](long index)</name>
                                    <syntax>public nothrow inline T&amp; operator[](long index);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>index</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8701542"/>
                                </overload>
                                <overload id="member_function_op_index_List_T_AA2A1F9532E2BEB527BBEC048E2DF4EB16940F71">
                                    <name>operator[](long index) const</name>
                                    <syntax>public nothrow inline const T&amp; operator[](long index) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>index</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8701532"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ConstIterator_1C11E1BEC53176F5C2C3DECB470DC1A6CE5A056F">
                            <name>ConstIterator</name>
                            <syntax>public typedef RandomAccessIter&lt;T, const T&amp;, const T*> ConstIterator;</syntax>
                            <type ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                        </typedef>
                        <typedef id="typedef_Iterator_E3A4B1A1A0B0DEF218D39C3C1618FABFE9F98FAD">
                            <name>Iterator</name>
                            <syntax>public typedef RandomAccessIter&lt;T, T&amp;, T*> Iterator;</syntax>
                            <type ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                        </typedef>
                        <typedef id="typedef_ValueType_904C9F742BEB9C81717025C2CEDC83B446B4B65F">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="8699743"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D">
                    <name>Map&lt;Key, Value, KeyCompare></name>
                    <groupName>Map</groupName>
                    <syntax> public class Map&lt;Key, Value, KeyCompare>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699750">
                            <name>Key</name>
                        </templateParameter>
                        <templateParameter id="8699751">
                            <name>Value</name>
                        </templateParameter>
                        <templateParameter id="8699752">
                            <name>KeyCompare</name>
                            <default>Less&lt;Key></default>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="8699750"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699751"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699752"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="8699752"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="8699750"/>
                    </constraint>
                    <functions>
                        <function id="function_group_Begin_FE9D0125978BD6A49DA7EADF1EC1EA9C79EC90D4">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_Map_Key_Value_KeyCompare_5B8AC023A9CBB7FCCA976297ADAC2B8BA01DC7A0">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*> Begin();</syntax>
                                    <returnType ref="type.8701660"/>
                                </overload>
                                <overload id="member_function_Begin_Map_Key_Value_KeyCompare_C6D63FA5BBF5F278ABB5AE0078F0984344C4FAEC">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*> Begin() const;</syntax>
                                    <returnType ref="type.8701642"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_Map_Key_Value_KeyCompare_D40E23EB681ACACC886F8EF0586BF6FE6E92E6DB">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*> CBegin() const;</syntax>
                            <returnType ref="type.8701642"/>
                        </function>
                        <function id="member_function_CEnd_Map_Key_Value_KeyCompare_F7049C3EC5CB4A5BF07B2D7B84F73B9C80758FF0">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*> CEnd() const;</syntax>
                            <returnType ref="type.8701642"/>
                        </function>
                        <function id="member_function_CFind_Map_Key_Value_KeyCompare_63DC619F3171180AAA343ACD9F63120CB12D1151">
                            <name>CFind(const Key&amp; key) const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*> CFind(const Key&amp; key) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>key</name>
                                    <type ref="type.162"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8701642"/>
                        </function>
                        <function id="member_function_Clear_Map_Key_Value_KeyCompare_F67AD9F821C7816FA6742375245C9F4E0D9FEAE2">
                            <name>Clear()</name>
                            <syntax>public nothrow inline void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_Map_Key_Value_KeyCompare_15C66BC1F50346AABC786A2C611A85910F13EA2B">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="function_group_End_475E06DBA9D2E69BB8E5D44217B0C3C44A6DA3D7">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_Map_Key_Value_KeyCompare_FCF364B53EF4855C5049759E82F41030D6133661">
                                    <name>End()</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*> End();</syntax>
                                    <returnType ref="type.8701660"/>
                                </overload>
                                <overload id="member_function_End_Map_Key_Value_KeyCompare_E08A5E480E1B0485D20D99AB8C381F4A8AAEA7F9">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*> End() const;</syntax>
                                    <returnType ref="type.8701642"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Find_2E50A1226F1357BDE2C81BB6B8E948CEFC551577">
                            <name>Find</name>
                            <overloads>
                                <overload id="member_function_Find_Map_Key_Value_KeyCompare_EA198F11324C1EE2AA8C6D5FE4C516E94E8C89F8">
                                    <name>Find(const Key&amp; key)</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*> Find(const Key&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.162"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8701660"/>
                                </overload>
                                <overload id="member_function_Find_Map_Key_Value_KeyCompare_47371917A146D15231BC47E9FE8A0F41C74B5B12">
                                    <name>Find(const Key&amp; key) const</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*> Find(const Key&amp; key) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.162"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8701642"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Insert_Map_Key_Value_KeyCompare_695995241FEDB6131B95FF146878B500A42F4B4C">
                            <name>Insert(const Pair&lt;Key, Value>&amp; value)</name>
                            <syntax>public inline Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool> Insert(const Pair&lt;Key, Value>&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8701631"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8701668"/>
                            <constraint>
                                <type ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                                <connector>is</connector>
                                <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                            </constraint>
                        </function>
                        <function id="member_function_IsEmpty_Map_Key_Value_KeyCompare_D1AD7AB2719ACBFDF6D0F8607B3EB29173276C7D">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="function_group_Remove_1C96425CE33E17B87A2E9D0F9881E310F2DEBD9F">
                            <name>Remove</name>
                            <overloads>
                                <overload id="member_function_Remove_Map_Key_Value_KeyCompare_5A72AAA2F9DCC35452945B94FEBF21A1F2CE8E43">
                                    <name>Remove(RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*> pos)</name>
                                    <syntax>public nothrow inline void Remove(RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*> pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.8701660"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Remove_Map_Key_Value_KeyCompare_DA0FFD79155F0CAA0B4E93FDA3E48620A150BE71">
                                    <name>Remove(const Key&amp; key)</name>
                                    <syntax>public nothrow inline bool Remove(const Key&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.162"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699065"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_op_index_Map_Key_Value_KeyCompare_8BBCC8433D3DAA68F452754E1FDF45FA25C3E126">
                            <name>operator[](const Key&amp; key)</name>
                            <syntax>public inline Value&amp; operator[](const Key&amp; key);</syntax>
                            <parameters>
                                <parameter>
                                    <name>key</name>
                                    <type ref="type.162"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.168"/>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_Compare_B507823B7BE4C96CA8B1F12A160AB833A75E5EAE">
                            <name>Compare</name>
                            <syntax>public typedef KeyCompare Compare;</syntax>
                            <type ref="8699752"/>
                        </typedef>
                        <typedef id="typedef_ConstIterator_6172C7CFD811B814BB07156F78D58EFFDB946A71">
                            <name>ConstIterator</name>
                            <syntax>public typedef RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*> ConstIterator;</syntax>
                            <type ref="type.8701642"/>
                        </typedef>
                        <typedef id="typedef_Iterator_C7D1ABB1B4F5ABD77EC11FD205C3BFDC52AED1F3">
                            <name>Iterator</name>
                            <syntax>public typedef RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*> Iterator;</syntax>
                            <type ref="type.8701660"/>
                        </typedef>
                        <typedef id="typedef_KeyType_B6C96AA925025E67D8D38EBEF6E87AFE0804DB62">
                            <name>KeyType</name>
                            <syntax>public typedef Key KeyType;</syntax>
                            <type ref="8699750"/>
                        </typedef>
                        <typedef id="typedef_MappedType_F35AB9E1E348DA57631AFC655348602747007F41">
                            <name>MappedType</name>
                            <syntax>public typedef Value MappedType;</syntax>
                            <type ref="8699751"/>
                        </typedef>
                        <typedef id="typedef_ValueType_F267A062B391C37538D78FB7C418FDB4D635D1A3">
                            <name>ValueType</name>
                            <syntax>public typedef Pair&lt;Key, Value> ValueType;</syntax>
                            <type ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_Queue_T_1C9B1484040D488EB9F21C531882DC9EB5B8CA02">
                    <name>Queue&lt;T></name>
                    <groupName>Queue</groupName>
                    <syntax> public class Queue&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699789">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="8699789"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_Clear_Queue_T_F02E3D7836CEA2C641372029743D23D12E95FC0B">
                            <name>Clear()</name>
                            <syntax>public nothrow inline void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_Queue_T_B19CEC9C607BDB81003423B09B3B868F3D477F1E">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_Front_Queue_T_D89749D369435AA192B58C1CC49734CF8E49A589">
                            <name>Front() const</name>
                            <syntax>public nothrow inline const T&amp; Front() const;</syntax>
                            <returnType ref="type.8701778"/>
                        </function>
                        <function id="member_function_Get_Queue_T_1B10A1BA349DF1ABECB8536F0879686DB7DF3599">
                            <name>Get()</name>
                            <syntax>public inline T Get();</syntax>
                            <returnType ref="8699789"/>
                        </function>
                        <function id="member_function_IsEmpty_Queue_T_79A7FB3FABA74E1DBA4A94C885C5A3538AFF01F5">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="function_group_Put_BEC6CE8D550ABFB9168DE81CE981DC3667FAEA9A">
                            <name>Put</name>
                            <overloads>
                                <overload id="member_function_Put_Queue_T_FA2362A50F7DCEED64C0BAA146FEDAA518E6CC2C">
                                    <name>Put(T&amp;&amp; item)</name>
                                    <syntax>public inline void Put(T&amp;&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.189"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Put_Queue_T_16BE8F970EFCC4CCF4C8C147DE3F896950D2780C">
                                    <name>Put(const T&amp; item)</name>
                                    <syntax>public inline void Put(const T&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.8701778"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ValueType_EA5F1262C7F5D733FA5BFE7EC6EBE8B5B3C86A14">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="8699789"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2">
                    <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
                    <groupName>RedBlackTree</groupName>
                    <syntax> public class RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699829">
                            <name>KeyType</name>
                        </templateParameter>
                        <templateParameter id="8699830">
                            <name>ValueType</name>
                        </templateParameter>
                        <templateParameter id="8699831">
                            <name>KeyOfValue</name>
                        </templateParameter>
                        <templateParameter id="8699832">
                            <name>Compare</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="8699829"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699830"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <concept ref="concept_KeySelectionFunction_719538A539328921CB0D528AECE6DCBE1B8C6E19">
                            <params>
                                <type ref="8699831"/>
                                <type ref="8699829"/>
                                <type ref="8699830"/>
                            </params>
                        </concept>
                        <connector>and</connector>
                        <type ref="8699832"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="8699832"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="8699829"/>
                    </constraint>
                    <constructors>
                        <constructor id="default_constructor_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_AD3B752A520D960C7313D6E645A074C3DFF084D8">
                            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>()</name>
                            <syntax>public RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>();</syntax>
                        </constructor>
                        <constructor id="move_constructor_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_205013DDAA02A693EE434D6E37F4CD1274EB61BE">
                            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>(RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp; that)</name>
                            <syntax>public nothrow RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>(RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.208"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_8C2414F43B2F8B1A9C1F53CF6523A27D782EC8D0">
                            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>(const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp; that)</name>
                            <syntax>public RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>(const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8701897"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Begin_D7669BDD664E97913A238C7C2303FC0F28B875E6">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_F63A5B9D5181BAF0E6498ED375CC090D257C5C35">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*> Begin();</syntax>
                                    <returnType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                                </overload>
                                <overload id="member_function_Begin_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_53684386EDE6B8CACE9B73902FF4D25093CA2D3B">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*> Begin() const;</syntax>
                                    <returnType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_71CFE2C7E2B876B2ABBB5FB528955C4ABC104EF5">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*> CBegin() const;</syntax>
                            <returnType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                        </function>
                        <function id="member_function_CEnd_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_A71347088BFFD457F763E24FB632E134E50ECAC9">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*> CEnd() const;</syntax>
                            <returnType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                        </function>
                        <function id="member_function_CFind_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_1152D260B2B080A26CE75BACD32821335FBB6740">
                            <name>CFind(const KeyType&amp; key) const</name>
                            <syntax>public nothrow RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*> CFind(const KeyType&amp; key) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>key</name>
                                    <type ref="type.209"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                        </function>
                        <function id="member_function_Clear_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_D340802D53423264A906B36D086B84427DA289E4">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_9B73A160CCA87BAC826A5E79F27D7B3635C4FA1D">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="function_group_End_2476ED2CADA245A0154FE78E4CC2FC3D63393373">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_BB51D6BCA84CD8CA52725A9C12E5E75D03C5BDA4">
                                    <name>End()</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*> End();</syntax>
                                    <returnType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                                </overload>
                                <overload id="member_function_End_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_BB0A6027DDB4FEDDEB94B19F9644AFF89EDA708D">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*> End() const;</syntax>
                                    <returnType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Find_B1D76DCF5857ADF5A3884D3C889D4230BB209710">
                            <name>Find</name>
                            <overloads>
                                <overload id="member_function_Find_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_E00E86558F9601ED57E41D555B8BCBA8A9ABA95F">
                                    <name>Find(const KeyType&amp; key)</name>
                                    <syntax>public nothrow RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*> Find(const KeyType&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.209"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                                </overload>
                                <overload id="member_function_Find_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_930BB4442B3BD7FB5976D51774771BC16F047016">
                                    <name>Find(const KeyType&amp; key) const</name>
                                    <syntax>public nothrow RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*> Find(const KeyType&amp; key) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.209"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Insert_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_10E11AF457CE4D27CFF4B7F1999BD1157180B8FE">
                            <name>Insert(const ValueType&amp; value)</name>
                            <syntax>public Pair&lt;RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>, bool> Insert(const ValueType&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8701898"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8701925"/>
                            <constraint>
                                <type ref="8699830"/>
                                <connector>is</connector>
                                <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                            </constraint>
                        </function>
                        <function id="member_function_IsEmpty_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_EA488B8A12D0D4049E1DF34DC8BD14A384BE2455">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="function_group_Remove_8E327673F99746C7F9E3FDDDBB1356C7064F2EA8">
                            <name>Remove</name>
                            <overloads>
                                <overload id="member_function_Remove_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_9A33A0EFE56BA62582AA2EF46A02446FAC750EF8">
                                    <name>Remove(RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*> pos)</name>
                                    <syntax>public nothrow void Remove(RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*> pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Remove_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_240F7BAC14DD9225DE0B6359BB326A5854929105">
                                    <name>Remove(const KeyType&amp; key)</name>
                                    <syntax>public nothrow bool Remove(const KeyType&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.209"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699065"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_assign_859C99C1450F96202684E2117810B92FE3DF4474">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_51F60C29585897650D41BF656F7D5231D75F2A40">
                                    <name>operator=(RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp; that)</name>
                                    <syntax>public nothrow void operator=(RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.208"/>
                                        </parameter>
                                    </parameters>
                                    <constraint>
                                        <type ref="8699830"/>
                                        <connector>is</connector>
                                        <concept ref="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D"/>
                                    </constraint>
                                </overload>
                                <overload id="copy_assignment_op_assign_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_7A89D3A15918B3B38F71CCDBBB016FF2EC9EFAC5">
                                    <name>operator=(const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp; that)</name>
                                    <syntax>public void operator=(const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.8701897"/>
                                        </parameter>
                                    </parameters>
                                    <constraint>
                                        <type ref="8699830"/>
                                        <connector>is</connector>
                                        <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                                    </constraint>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ConstIterator_281040C11EB596BB9E88DFAC72311B8739F60C0C">
                            <name>ConstIterator</name>
                            <syntax>public typedef RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*> ConstIterator;</syntax>
                            <type ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                        </typedef>
                        <typedef id="typedef_Iterator_61851BC1B0BCCB48BEAFBD207AC61E64957EFF81">
                            <name>Iterator</name>
                            <syntax>public typedef RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*> Iterator;</syntax>
                            <type ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629">
                    <name>RedBlackTreeNode&lt;T></name>
                    <groupName>RedBlackTreeNode</groupName>
                    <syntax> public class RedBlackTreeNode&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699820">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                    <constructors>
                        <constructor id="constructor_RedBlackTreeNode_T_4CACA7ABB085630F196747A1DCF5FB2B6459BB66">
                            <name>RedBlackTreeNode&lt;T>(const T&amp; value_, RedBlackTreeNode&lt;T>* parent_)</name>
                            <syntax>public RedBlackTreeNode&lt;T>(const T&amp; value_, RedBlackTreeNode&lt;T>* parent_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.200"/>
                                </parameter>
                                <parameter>
                                    <name>parent_</name>
                                    <type ref="type.8701855"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Value_AFC956AFB8509A9F0F5460FF7BC9E22CF6235041">
                            <name>Value</name>
                            <overloads>
                                <overload id="member_function_Value_RedBlackTreeNode_T_5CC84CADFF4E6D884D077217D63AC9B2FF4D9C2B">
                                    <name>Value()</name>
                                    <syntax>public nothrow inline T&amp; Value();</syntax>
                                    <returnType ref="type.201"/>
                                </overload>
                                <overload id="member_function_Value_RedBlackTreeNode_T_02A99F8E29E69264CBBC1394A13F2BADE8F5B1F5">
                                    <name>Value() const</name>
                                    <syntax>public nothrow inline const T&amp; Value() const;</syntax>
                                    <returnType ref="type.200"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ValueType_5D914DD51ED431E7F52D649AF631D53D838B7DDD">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="8699820"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948">
                    <name>RedBlackTreeNodeBase</name>
                    <groupName>RedBlackTreeNodeBase</groupName>
                    <syntax> public class RedBlackTreeNodeBase;</syntax>
                    <constructors>
                        <constructor id="constructor_RedBlackTreeNodeBase_10127E169E9BA13A5BCBC54E99CBB5AC112D7075">
                            <name>RedBlackTreeNodeBase(RedBlackTreeNodeBase* parent_)</name>
                            <syntax>public nothrow RedBlackTreeNodeBase(RedBlackTreeNodeBase* parent_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parent_</name>
                                    <type ref="type.8699814"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_GetColor_RedBlackTreeNodeBase_C3114804876CC00D18B55E362A1F0424B5649B26">
                            <name>GetColor() const</name>
                            <syntax>public nothrow inline Color GetColor() const;</syntax>
                            <returnType ref="enumerated_type_Color_DB4994E28229DF1F2449EC4730B743F3A02B85A6"/>
                        </function>
                        <function id="member_function_IsHeaderNode_RedBlackTreeNodeBase_B08204F554FBF8A3C9329EC3ADFD5F3EBA3E0B2B">
                            <name>IsHeaderNode() const</name>
                            <syntax>public nothrow inline bool IsHeaderNode() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Left_RedBlackTreeNodeBase_D0162F64673FB47118E327332F8D50ADAB0A4ECA">
                            <name>Left() const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeBase* Left() const;</syntax>
                            <returnType ref="type.8699814"/>
                        </function>
                        <function id="member_function_LeftRef_RedBlackTreeNodeBase_F109AA919A40B1BC52D2CE705A6A0768CA00993E">
                            <name>LeftRef()</name>
                            <syntax>public nothrow inline RedBlackTreeNodeBase*&amp; LeftRef();</syntax>
                            <returnType ref="type.8701658"/>
                        </function>
                        <function id="member_function_Parent_RedBlackTreeNodeBase_8D485E37945E2796DDD110F161C9414B671394B4">
                            <name>Parent() const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeBase* Parent() const;</syntax>
                            <returnType ref="type.8699814"/>
                        </function>
                        <function id="member_function_ParentRef_RedBlackTreeNodeBase_01F987B4FD119FB4AE0F4B0383878A8D8317BE05">
                            <name>ParentRef()</name>
                            <syntax>public nothrow inline RedBlackTreeNodeBase*&amp; ParentRef();</syntax>
                            <returnType ref="type.8701658"/>
                        </function>
                        <function id="member_function_Right_RedBlackTreeNodeBase_59176D5DAC3176D51D1888F61790B700EFCEFEF5">
                            <name>Right() const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeBase* Right() const;</syntax>
                            <returnType ref="type.8699814"/>
                        </function>
                        <function id="member_function_RightRef_RedBlackTreeNodeBase_74A881AD8B5357D886764FBCBDC674CE8928C158">
                            <name>RightRef()</name>
                            <syntax>public nothrow inline RedBlackTreeNodeBase*&amp; RightRef();</syntax>
                            <returnType ref="type.8701658"/>
                        </function>
                        <function id="member_function_SetColor_RedBlackTreeNodeBase_E86C746BB3371E91358AC4F70EA7972BB91F84CA">
                            <name>SetColor(Color color_)</name>
                            <syntax>public nothrow inline void SetColor(Color color_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>color_</name>
                                    <type ref="enumerated_type_Color_DB4994E28229DF1F2449EC4730B743F3A02B85A6"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetLeft_RedBlackTreeNodeBase_693D74CA355678A76285252429EC8575FED2357A">
                            <name>SetLeft(RedBlackTreeNodeBase* left_)</name>
                            <syntax>public nothrow inline void SetLeft(RedBlackTreeNodeBase* left_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.8699814"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetParent_RedBlackTreeNodeBase_D9626D13742945C14012C74CE695C8C7F46CE931">
                            <name>SetParent(RedBlackTreeNodeBase* parent_)</name>
                            <syntax>public nothrow inline void SetParent(RedBlackTreeNodeBase* parent_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parent_</name>
                                    <type ref="type.8699814"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetRight_RedBlackTreeNodeBase_B64B6B3F18DDFBC6DD15402E173BC1826A945C05">
                            <name>SetRight(RedBlackTreeNodeBase* right_)</name>
                            <syntax>public nothrow inline void SetRight(RedBlackTreeNodeBase* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.8699814"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Max_RedBlackTreeNodeBase_4F062F68C3FB6751C758BEF2F9479D3B76198C36">
                            <name>Max(RedBlackTreeNodeBase* n)</name>
                            <syntax>public static nothrow inline RedBlackTreeNodeBase* Max(RedBlackTreeNodeBase* n);</syntax>
                            <parameters>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.8699814"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699814"/>
                        </function>
                        <function id="member_function_Min_RedBlackTreeNodeBase_C8B9F7EE83DC456DB1C693CB10F59CFCE8ADF6B4">
                            <name>Min(RedBlackTreeNodeBase* n)</name>
                            <syntax>public static nothrow inline RedBlackTreeNodeBase* Min(RedBlackTreeNodeBase* n);</syntax>
                            <parameters>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.8699814"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699814"/>
                        </function>
                        <function id="member_function_Next_RedBlackTreeNodeBase_07546C9EC12ED13773807C095BEAF5EB14BF72A3">
                            <name>Next(RedBlackTreeNodeBase* n)</name>
                            <syntax>public static nothrow inline RedBlackTreeNodeBase* Next(RedBlackTreeNodeBase* n);</syntax>
                            <parameters>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.8699814"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699814"/>
                        </function>
                        <function id="member_function_Prev_RedBlackTreeNodeBase_C99173251192B7E484465DC608C3263C8AA71EC7">
                            <name>Prev(RedBlackTreeNodeBase* n)</name>
                            <syntax>public static nothrow inline RedBlackTreeNodeBase* Prev(RedBlackTreeNodeBase* n);</syntax>
                            <parameters>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.8699814"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699814"/>
                        </function>
                        <function id="member_function_RebalanceAfterInsert_RedBlackTreeNodeBase_6AD70485782F125477AB5C8D92C6FC7CCDB3A8F0">
                            <name>RebalanceAfterInsert(RedBlackTreeNodeBase* n, RedBlackTreeNodeBase*&amp; root)</name>
                            <syntax>public static nothrow void RebalanceAfterInsert(RedBlackTreeNodeBase* n, RedBlackTreeNodeBase*&amp; root);</syntax>
                            <parameters>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.8699814"/>
                                </parameter>
                                <parameter>
                                    <name>root</name>
                                    <type ref="type.8701658"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_RebalanceForRemove_RedBlackTreeNodeBase_8B26F408EE39DCFE675A41D06DCCB4FBA722839C">
                            <name>RebalanceForRemove(RedBlackTreeNodeBase* z, RedBlackTreeNodeBase*&amp; root, RedBlackTreeNodeBase*&amp; leftmost, RedBlackTreeNodeBase*&amp; rightmost)</name>
                            <syntax>public static nothrow RedBlackTreeNodeBase* RebalanceForRemove(RedBlackTreeNodeBase* z, RedBlackTreeNodeBase*&amp; root, RedBlackTreeNodeBase*&amp; leftmost, RedBlackTreeNodeBase*&amp; rightmost);</syntax>
                            <parameters>
                                <parameter>
                                    <name>z</name>
                                    <type ref="type.8699814"/>
                                </parameter>
                                <parameter>
                                    <name>root</name>
                                    <type ref="type.8701658"/>
                                </parameter>
                                <parameter>
                                    <name>leftmost</name>
                                    <type ref="type.8701658"/>
                                </parameter>
                                <parameter>
                                    <name>rightmost</name>
                                    <type ref="type.8701658"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699814"/>
                        </function>
                    </staticMemberFunctions>
                    <enumerations>
                        <enumeration id="enumerated_type_Color_DB4994E28229DF1F2449EC4730B743F3A02B85A6">
                            <name>Color</name>
                            <syntax>public enum Color;</syntax>
                            <underlyingType ref="type.8699070"/>
                            <enumConstant>
                                <name>red</name>
                                <value>0</value>
                            </enumConstant>
                            <enumConstant>
                                <name>black</name>
                                <value>1</value>
                            </enumConstant>
                        </enumeration>
                    </enumerations>
                </class>
                <class id="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92">
                    <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
                    <groupName>RedBlackTreeNodeIterator</groupName>
                    <syntax> public class RedBlackTreeNodeIterator&lt;T, R, P>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699822">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699823">
                            <name>R</name>
                        </templateParameter>
                        <templateParameter id="8699824">
                            <name>P</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="default_constructor_RedBlackTreeNodeIterator_T_R_P_F0EA5C9DE84214DDF7FACAB0431E84EC8856FC4A">
                            <name>RedBlackTreeNodeIterator&lt;T, R, P>()</name>
                            <syntax>public nothrow RedBlackTreeNodeIterator&lt;T, R, P>();</syntax>
                        </constructor>
                        <constructor id="constructor_RedBlackTreeNodeIterator_T_R_P_D1C3A0A84E42D72F31FDAC876B3BFCFBD45594CC">
                            <name>RedBlackTreeNodeIterator&lt;T, R, P>(RedBlackTreeNode&lt;T>* node_)</name>
                            <syntax>public nothrow RedBlackTreeNodeIterator&lt;T, R, P>(RedBlackTreeNode&lt;T>* node_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>node_</name>
                                    <type ref="type.8701869"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Node_RedBlackTreeNodeIterator_T_R_P_AC61E8FE4468A7E9FB4E02F95B039D88594F474C">
                            <name>Node() const</name>
                            <syntax>public nothrow inline RedBlackTreeNode&lt;T>* Node() const;</syntax>
                            <returnType ref="type.8701869"/>
                        </function>
                        <function id="member_function_op_star_RedBlackTreeNodeIterator_T_R_P_129762AD5B3AD286D55FB7B25AE0A9DA4C60F628">
                            <name>operator*()</name>
                            <syntax>public nothrow inline R operator*();</syntax>
                            <returnType ref="8699823"/>
                        </function>
                        <function id="member_function_op_plusplus_RedBlackTreeNodeIterator_T_R_P_F5DE82668341B39DE7AF542F5FE16208C35620A6">
                            <name>operator++()</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, R, P>&amp; operator++();</syntax>
                            <returnType ref="type.8701864"/>
                        </function>
                        <function id="member_function_op_minusminus_RedBlackTreeNodeIterator_T_R_P_87DD0BBD93C6CE668E3C120C6864448D692D4AE4">
                            <name>operator--()</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, R, P>&amp; operator--();</syntax>
                            <returnType ref="type.8701864"/>
                        </function>
                        <function id="member_function_op_arrow_RedBlackTreeNodeIterator_T_R_P_01133A53943E54435AEEEDA0561EE711D4792358">
                            <name>operator->()</name>
                            <syntax>public nothrow inline P operator->();</syntax>
                            <returnType ref="8699824"/>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_PointerType_1F3089F892A0B0828DB97B0DDB50662EBA63D9EA">
                            <name>PointerType</name>
                            <syntax>public typedef P PointerType;</syntax>
                            <type ref="8699824"/>
                        </typedef>
                        <typedef id="typedef_ReferenceType_7E3FE3829D172C56F12E0E2C9321FC4FDD4B07F0">
                            <name>ReferenceType</name>
                            <syntax>public typedef R ReferenceType;</syntax>
                            <type ref="8699823"/>
                        </typedef>
                        <typedef id="typedef_ValueType_54322328E0251976BAB061E9059FAB1AB3E336A7">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="8699822"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F">
                    <name>Set&lt;T, C></name>
                    <groupName>Set</groupName>
                    <syntax> public class Set&lt;T, C>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699835">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699836">
                            <name>C</name>
                            <default>Less&lt;T></default>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="8699835"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="8699836"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="8699836"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="8699835"/>
                    </constraint>
                    <functions>
                        <function id="function_group_Begin_6D8D74FE21C23B4F9BF5B538BFD7E2C3A691EBF0">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_Set_T_C_704ECF672C8A873C01A15C8DD9041E565BD6D52A">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, T&amp;, T*> Begin();</syntax>
                                    <returnType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                                </overload>
                                <overload id="member_function_Begin_Set_T_C_623C28DBB6D8A34EC01002EB22734255BA2F43E8">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*> Begin() const;</syntax>
                                    <returnType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_Set_T_C_9849359C89524C084EF845BB264A8B159506A471">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*> CBegin() const;</syntax>
                            <returnType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                        </function>
                        <function id="member_function_CEnd_Set_T_C_D940C5F57A26BA4F50ABC39257A9E4E71130ACAF">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*> CEnd() const;</syntax>
                            <returnType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                        </function>
                        <function id="member_function_CFind_Set_T_C_C4FE503E57DBA1DE0F38931B7DDC717919EE26A0">
                            <name>CFind(const T&amp; key) const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*> CFind(const T&amp; key) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>key</name>
                                    <type ref="type.8701949"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                        </function>
                        <function id="member_function_Clear_Set_T_C_951F2363C27B294F89148767B99B6CD6EA4716A6">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_Set_T_C_5AD8F266DCA5C4413FAD69EB1228719C08BA1E46">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="function_group_End_956AF2470B3E7DE8AE434F61A274C22FC13F8E62">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_Set_T_C_A25D8F6F2D5D8D3819ABD442C3F4F4CDD0AFE98D">
                                    <name>End()</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, T&amp;, T*> End();</syntax>
                                    <returnType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                                </overload>
                                <overload id="member_function_End_Set_T_C_47C57E84FCD0F9DCCF3CEA761491409BF03C6D2B">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*> End() const;</syntax>
                                    <returnType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Find_5AB2F6ECD2B3A94D4EC9B1B87A6AFDA52B29125F">
                            <name>Find</name>
                            <overloads>
                                <overload id="member_function_Find_Set_T_C_FC3C2F57A01760949C7E3E6F012A5DAE0E6F9A90">
                                    <name>Find(const T&amp; key)</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, T&amp;, T*> Find(const T&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.8701949"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                                </overload>
                                <overload id="member_function_Find_Set_T_C_1B0561CD6F5BC4CCBE8002911016DA6DC8FBCAD0">
                                    <name>Find(const T&amp; key) const</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*> Find(const T&amp; key) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.8701949"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Insert_Set_T_C_CDB4ED63121A2DE63471B2223D29011064AC0ECD">
                            <name>Insert(const T&amp; value)</name>
                            <syntax>public inline Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool> Insert(const T&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.8701949"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8701983"/>
                            <constraint>
                                <type ref="8699835"/>
                                <connector>is</connector>
                                <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                            </constraint>
                        </function>
                        <function id="member_function_IsEmpty_Set_T_C_2E6520EA59B433B4A955857CD0F1074C0239D890">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="function_group_Remove_51C8C353C0E30892CA0C189ED9340B0A90977DB3">
                            <name>Remove</name>
                            <overloads>
                                <overload id="member_function_Remove_Set_T_C_9277559D7AB4413509B8D13FE2731A2794D2DA8C">
                                    <name>Remove(RedBlackTreeNodeIterator&lt;T, T&amp;, T*> pos)</name>
                                    <syntax>public nothrow inline void Remove(RedBlackTreeNodeIterator&lt;T, T&amp;, T*> pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Remove_Set_T_C_BD925F14443715722144B65F1DBCCEF3F79760EE">
                                    <name>Remove(const T&amp; key)</name>
                                    <syntax>public nothrow inline bool Remove(const T&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.8701949"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699065"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_Compare_5674BBCEE13AD5C541275A13A6230847AD7CC083">
                            <name>Compare</name>
                            <syntax>public typedef C Compare;</syntax>
                            <type ref="8699836"/>
                        </typedef>
                        <typedef id="typedef_ConstIterator_664F4246D09DBF2F9011DB8DDC4F9F56B030F628">
                            <name>ConstIterator</name>
                            <syntax>public typedef RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*> ConstIterator;</syntax>
                            <type ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                        </typedef>
                        <typedef id="typedef_Iterator_46E8AC3EC674D01F9339E392F6F19F80BECC5532">
                            <name>Iterator</name>
                            <syntax>public typedef RedBlackTreeNodeIterator&lt;T, T&amp;, T*> Iterator;</syntax>
                            <type ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                        </typedef>
                        <typedef id="typedef_KeyType_327EF2AF91AC65B86DCFD870F05024AB22519110">
                            <name>KeyType</name>
                            <syntax>public typedef T KeyType;</syntax>
                            <type ref="8699835"/>
                        </typedef>
                        <typedef id="typedef_ValueType_AC8E6AC932723CA59C5B8879A788C17F90286C2E">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="8699835"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="class_Stack_T_44313E678C6CD0E8DB3743953B65AA105D55A963">
                    <name>Stack&lt;T></name>
                    <groupName>Stack</groupName>
                    <syntax> public class Stack&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699873">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="8699873"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_Clear_Stack_T_7F6972DB9A41D47B39E04C6E4A49344538B10297">
                            <name>Clear()</name>
                            <syntax>public nothrow inline void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_Stack_T_1AF697C037EA64F6DFDDC19CC9A9928693230294">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_IsEmpty_Stack_T_E96B0DA4559D8502F2BEF25422880C7E25F57604">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Pop_Stack_T_127A46B6601B486623579A4074F699ED5633B56E">
                            <name>Pop()</name>
                            <syntax>public inline T Pop();</syntax>
                            <returnType ref="8699873"/>
                            <constraint>
                                <type ref="8699873"/>
                                <connector>is</connector>
                                <concept ref="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D"/>
                            </constraint>
                        </function>
                        <function id="function_group_Push_AB2E6EAB2355AB98CBE08320F59009CE95E8F8A6">
                            <name>Push</name>
                            <overloads>
                                <overload id="member_function_Push_Stack_T_7FE745DAE276481269A52B5F6638B9B70A8BC7F2">
                                    <name>Push(T&amp;&amp; item)</name>
                                    <syntax>public inline void Push(T&amp;&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.271"/>
                                        </parameter>
                                    </parameters>
                                    <constraint>
                                        <type ref="8699873"/>
                                        <connector>is</connector>
                                        <concept ref="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D"/>
                                    </constraint>
                                </overload>
                                <overload id="member_function_Push_Stack_T_134481DEF2CD73C0909451B98001830B30F3418B">
                                    <name>Push(const T&amp; item)</name>
                                    <syntax>public inline void Push(const T&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.8702641"/>
                                        </parameter>
                                    </parameters>
                                    <constraint>
                                        <type ref="8699873"/>
                                        <connector>is</connector>
                                        <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                                    </constraint>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Top_1E17725355C7D2E620B554AA52E1DCDE0040CEF5">
                            <name>Top</name>
                            <overloads>
                                <overload id="member_function_Top_Stack_T_B46167AD390BA88770C3BBE2B811DAE7A05F3727">
                                    <name>Top()</name>
                                    <syntax>public nothrow inline T&amp; Top();</syntax>
                                    <returnType ref="type.8702643"/>
                                </overload>
                                <overload id="member_function_Top_Stack_T_A71F8FEB5AB8D31E66824CE450D19556545391AD">
                                    <name>Top() const</name>
                                    <syntax>public nothrow inline const T&amp; Top() const;</syntax>
                                    <returnType ref="type.8702641"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ValueType_A21D976A947D1F0EFED9863B1E3AB8592C253FD1">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="8699873"/>
                        </typedef>
                    </typedefs>
                </class>
            </classes>
            <functions>
                <function id="function_ConstructiveCopy_D125FEDA0FD45AFAFDF4628AEDF46C0E3F5A76A1">
                    <name>ConstructiveCopy&lt;ValueType>(ValueType* to, ValueType* from, long count)</name>
                    <syntax>public void ConstructiveCopy&lt;ValueType>(ValueType* to, ValueType* from, long count);</syntax>
                    <templateParameters>
                        <templateParameter id="8699746">
                            <name>ValueType</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>to</name>
                            <type ref="type.8701607"/>
                        </parameter>
                        <parameter>
                            <name>from</name>
                            <type ref="type.8701607"/>
                        </parameter>
                        <parameter>
                            <name>count</name>
                            <type ref="type.8699072"/>
                        </parameter>
                    </parameters>
                    <constraint>
                        <type ref="8699746"/>
                        <connector>is</connector>
                        <concept ref="concept_CopyConstructible_B11BFA55AF39E78A7C14C35837E65D9DD09586C3"/>
                    </constraint>
                </function>
                <function id="function_ConstructiveMove_1DE9DA17029B9BDF65E74C4AED81D62B69E2DF9C">
                    <name>ConstructiveMove&lt;ValueType>(ValueType* to, ValueType* from, long count)</name>
                    <syntax>public void ConstructiveMove&lt;ValueType>(ValueType* to, ValueType* from, long count);</syntax>
                    <templateParameters>
                        <templateParameter id="8699747">
                            <name>ValueType</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>to</name>
                            <type ref="type.8701609"/>
                        </parameter>
                        <parameter>
                            <name>from</name>
                            <type ref="type.8701609"/>
                        </parameter>
                        <parameter>
                            <name>count</name>
                            <type ref="type.8699072"/>
                        </parameter>
                    </parameters>
                    <constraint>
                        <type ref="8699747"/>
                        <connector>is</connector>
                        <concept ref="concept_MoveConstructible_21D36F4E96F5E3072DD6AAB34A26DF5F90FBC262"/>
                    </constraint>
                </function>
                <function id="function_Destroy_B8FEEE4BD5D75D1903AEDEB4F8C8A96B5C48D6AE">
                    <name>Destroy&lt;ValueType>(ValueType* items, long count)</name>
                    <syntax>public nothrow void Destroy&lt;ValueType>(ValueType* items, long count);</syntax>
                    <templateParameters>
                        <templateParameter id="8699748">
                            <name>ValueType</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>items</name>
                            <type ref="type.8701611"/>
                        </parameter>
                        <parameter>
                            <name>count</name>
                            <type ref="type.8699072"/>
                        </parameter>
                    </parameters>
                    <constraint>
                        <type ref="8699748"/>
                        <connector>is</connector>
                        <concept ref="concept_Destructible_0524F34CBA010FC34882287B0116D474909E0966"/>
                    </constraint>
                </function>
                <function id="function_group_GetHashCode_6A3EAD743D91EFDE396FB5407DAE9791C10C8B40">
                    <name>GetHashCode</name>
                    <overloads>
                        <overload id="function_GetHashCode_2D87A2F8263B4A596ABF8139FFE8961B0D9188AF">
                            <name>GetHashCode(char x)</name>
                            <syntax>public nothrow inline ulong GetHashCode(char x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699076"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_GetHashCode_363BED13B53DB115783B0A52839031E574568889">
                            <name>GetHashCode(const String&lt;char>&amp; s)</name>
                            <syntax>public nothrow inline ulong GetHashCode(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_GetHashCode_E642288FCFA9B0FFAB5D348247AE34A1EDFAAF65">
                            <name>GetHashCode(const String&lt;uchar>&amp; s)</name>
                            <syntax>public nothrow inline ulong GetHashCode(const String&lt;uchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_GetHashCode_A25F0A07D73FBA0B4BDB655E6ED340AC0CE9B25D">
                            <name>GetHashCode(const String&lt;wchar>&amp; s)</name>
                            <syntax>public nothrow inline ulong GetHashCode(const String&lt;wchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8700254"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_GetHashCode_823BCCBA357DC5DC7439E8DBEEF7A15ECAF5E0F9">
                            <name>GetHashCode(long x)</name>
                            <syntax>public nothrow inline ulong GetHashCode(long x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_GetHashCode_5DF5A874705347223DBC04694D84F9ED4BFC9563">
                            <name>GetHashCode(uchar x)</name>
                            <syntax>public nothrow inline ulong GetHashCode(uchar x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699078"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_GetHashCode_110A2447AB69E8F2945AC7DA0B4BDC8087AF3133">
                            <name>GetHashCode(ulong x)</name>
                            <syntax>public nothrow inline ulong GetHashCode(ulong x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699073"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_GetHashCode_67F2D2345E8E541A5BDE1B8FBA6A8531D8DE09F0">
                            <name>GetHashCode(void* x)</name>
                            <syntax>public nothrow inline ulong GetHashCode(void* x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699217"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_GetHashCode_37F6F4B88F339CF82DA5686F27B4D401AD73A05C">
                            <name>GetHashCode(wchar x)</name>
                            <syntax>public nothrow inline ulong GetHashCode(wchar x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699077"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_GetNextHashtablePrime_5BA52521997598485596E12405EFC5E15B5B4BF4">
                    <name>GetNextHashtablePrime(long n)</name>
                    <syntax>public nothrow inline constexpr long GetNextHashtablePrime(long n);</syntax>
                    <parameters>
                        <parameter>
                            <name>n</name>
                            <type ref="type.8699072"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699072"/>
                </function>
                <function id="function_group_op_less_3B3B14DF26BAB19CB4A9E45AE2BA7495E75DB862">
                    <name>operator&lt;</name>
                    <overloads>
                        <overload id="function_op_less_DE4F3F07DCE1B749E2F51EB9A43EF56104A36AEF">
                            <name>operator&lt;&lt;T, C>(const Set&lt;T, C>&amp; left, const Set&lt;T, C>&amp; right)</name>
                            <syntax>public nothrow inline bool operator&lt;&lt;T, C>(const Set&lt;T, C>&amp; left, const Set&lt;T, C>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699839">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699840">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8702055"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8702055"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699839"/>
                                <connector>is</connector>
                                <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                                <connector>and</connector>
                                <type ref="8699840"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="8699840"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="8699839"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_less_254BE9FF1D0FF7F755FE503607EB7C2B24C6FF24">
                            <name>operator&lt;&lt;T>(const ForwardList&lt;T>&amp; left, const ForwardList&lt;T>&amp; right)</name>
                            <syntax>public bool operator&lt;&lt;T>(const ForwardList&lt;T>&amp; left, const ForwardList&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699613">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8700526"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8700526"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699613"/>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_less_04E3D9C9667644C0B0DC578EB5A94E8086EE9644">
                            <name>operator&lt;&lt;T>(const LinkedList&lt;T>&amp; left, const LinkedList&lt;T>&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;&lt;T>(const LinkedList&lt;T>&amp; left, const LinkedList&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699741">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8701501"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8701501"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699741"/>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_less_9BAFA134353624FC2137DB85125A7695CAD81F8D">
                            <name>operator&lt;&lt;T>(const List&lt;T>&amp; left, const List&lt;T>&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;&lt;T>(const List&lt;T>&amp; left, const List&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699745">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8701585"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8701585"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699745"/>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_eq_0CB716962D945B7B007B1D8F281B78B20FFD18F5">
                    <name>operator==</name>
                    <overloads>
                        <overload id="function_op_eq_22BE8582CCDD5D909372721572F0C2A9625ABC9B">
                            <name>operator==(Color left, Color right)</name>
                            <syntax>public bool operator==(Color left, Color right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_Color_DB4994E28229DF1F2449EC4730B743F3A02B85A6"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_Color_DB4994E28229DF1F2449EC4730B743F3A02B85A6"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_49EA0787A7B4487C22C67AB4273F8DB5FEC8CF3A">
                            <name>operator==(const Bitset&amp; left, const Bitset&amp; right)</name>
                            <syntax>public bool operator==(const Bitset&amp; left, const Bitset&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8699403"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8699403"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_363C0049769C6915B44AF26FA21C80AFABAB9501">
                            <name>operator==&lt;K, T, H, C>(const HashMap&lt;K, T, H, C>&amp; left, const HashMap&lt;K, T, H, C>&amp; right)</name>
                            <syntax>public nothrow bool operator==&lt;K, T, H, C>(const HashMap&lt;K, T, H, C>&amp; left, const HashMap&lt;K, T, H, C>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699697">
                                    <name>K</name>
                                </templateParameter>
                                <templateParameter id="8699698">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699699">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="8699700">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8701024"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8701024"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699697"/>
                                <connector>is</connector>
                                <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                                <connector>and</connector>
                                <type ref="8699698"/>
                                <connector>is</connector>
                                <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                                <connector>and</connector>
                                <concept ref="concept_HashFunction_996DE63476FF956BFF568F751960AF2CB4A097A8">
                                    <params>
                                        <type ref="8699699"/>
                                        <type ref="8699697"/>
                                    </params>
                                </concept>
                                <connector>and</connector>
                                <type ref="8699700"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="8699700"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="8699697"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_eq_BD900D1922F9364CF66BBDA2DEA6D285621A320D">
                            <name>operator==&lt;T, C>(const Set&lt;T, C>&amp; left, const Set&lt;T, C>&amp; right)</name>
                            <syntax>public nothrow inline bool operator==&lt;T, C>(const Set&lt;T, C>&amp; left, const Set&lt;T, C>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699837">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699838">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8701998"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8701998"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699837"/>
                                <connector>is</connector>
                                <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                                <connector>and</connector>
                                <type ref="8699838"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="8699838"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="8699837"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_eq_ED3F6D43EDC7DAA89243EAF7A3AEB4720BD442B9">
                            <name>operator==&lt;T, H, C>(const HashSet&lt;T, H, C>&amp; left, const HashSet&lt;T, H, C>&amp; right)</name>
                            <syntax>public nothrow bool operator==&lt;T, H, C>(const HashSet&lt;T, H, C>&amp; left, const HashSet&lt;T, H, C>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699705">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699706">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="8699707">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8701176"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8701176"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699705"/>
                                <connector>is</connector>
                                <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                                <connector>and</connector>
                                <concept ref="concept_HashFunction_996DE63476FF956BFF568F751960AF2CB4A097A8">
                                    <params>
                                        <type ref="8699706"/>
                                        <type ref="8699705"/>
                                    </params>
                                </concept>
                                <connector>and</connector>
                                <type ref="8699707"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="8699707"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="8699705"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_eq_AD135B06B3FB5147833A16D6B9CFCF15DEC11D4C">
                            <name>operator==&lt;T, R, P, H>(const HashtableIterator&lt;T, R, P, H>&amp; left, const HashtableIterator&lt;T, R, P, H>&amp; right)</name>
                            <syntax>public nothrow bool operator==&lt;T, R, P, H>(const HashtableIterator&lt;T, R, P, H>&amp; left, const HashtableIterator&lt;T, R, P, H>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699717">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699718">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="8699719">
                                    <name>P</name>
                                </templateParameter>
                                <templateParameter id="8699720">
                                    <name>H</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8701285"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8701285"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_9BAC8622080700AD37365C56A9921475685CC38A">
                            <name>operator==&lt;T, R, P>(const ForwardListNodeIterator&lt;T, R, P>&amp; left, const ForwardListNodeIterator&lt;T, R, P>&amp; right)</name>
                            <syntax>public nothrow inline bool operator==&lt;T, R, P>(const ForwardListNodeIterator&lt;T, R, P>&amp; left, const ForwardListNodeIterator&lt;T, R, P>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699607">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699608">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="8699609">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8700447"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8700447"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_06F74A6942361CF32F8012C3AE8BCFDFD3F67654">
                            <name>operator==&lt;T, R, P>(const LinkedListNodeIterator&lt;T, R, P>&amp; left, const LinkedListNodeIterator&lt;T, R, P>&amp; right)</name>
                            <syntax>public nothrow inline bool operator==&lt;T, R, P>(const LinkedListNodeIterator&lt;T, R, P>&amp; left, const LinkedListNodeIterator&lt;T, R, P>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699735">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699736">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="8699737">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8701405"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8701405"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_63109ACFA83E79952D29987C16DBD3C789863038">
                            <name>operator==&lt;T, R, P>(const RedBlackTreeNodeIterator&lt;T, R, P>&amp; left, const RedBlackTreeNodeIterator&lt;T, R, P>&amp; right)</name>
                            <syntax>public nothrow inline bool operator==&lt;T, R, P>(const RedBlackTreeNodeIterator&lt;T, R, P>&amp; left, const RedBlackTreeNodeIterator&lt;T, R, P>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699825">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="8699826">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="8699827">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8701882"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8701882"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_64F9AFAFCAC8D9B47C6A9B9D8677DEB40A6B66D1">
                            <name>operator==&lt;T>(const ForwardList&lt;T>&amp; left, const ForwardList&lt;T>&amp; right)</name>
                            <syntax>public bool operator==&lt;T>(const ForwardList&lt;T>&amp; left, const ForwardList&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699612">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8700494"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8700494"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699612"/>
                                <connector>is</connector>
                                <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_eq_1099B8C5E9BF92E61D7940208A3C36D0585736BF">
                            <name>operator==&lt;T>(const LinkedList&lt;T>&amp; left, const LinkedList&lt;T>&amp; right)</name>
                            <syntax>public nothrow bool operator==&lt;T>(const LinkedList&lt;T>&amp; left, const LinkedList&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699740">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8701471"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8701471"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699740"/>
                                <connector>is</connector>
                                <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_eq_B459AB3FC4249EBD8DF64B979B2C71E9FE53FB83">
                            <name>operator==&lt;T>(const List&lt;T>&amp; left, const List&lt;T>&amp; right)</name>
                            <syntax>public nothrow bool operator==&lt;T>(const List&lt;T>&amp; left, const List&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="8699744">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8701558"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8701558"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                            <constraint>
                                <type ref="8699744"/>
                                <connector>is</connector>
                                <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
            </functions>
            <constants>
                <constant id="constant_hashtablePrimes_60BCFF7679DDA46E7DE39A7F25CCE74FAA103D7C">
                    <name>hashtablePrimes</name>
                    <syntax>public const long[26] hashtablePrimes;</syntax>
                    <type ref="8701248"/>
                    <value></value>
                </constant>
            </constants>
        </namespace>
        <namespace id="System.Concepts">
            <name>System.Concepts</name>
            <concepts>
                <concept id="concept_AdditiveGroup_F97CD80E909011A4ADD1F7D285678312B63559D8">
                    <name>AdditiveGroup&lt;T></name>
                    <groupName>AdditiveGroup</groupName>
                    <syntax>public concept AdditiveGroup&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699529">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_AdditiveMonoid_8D82C7092F575679F72B0CA8C2989C67C1966F37"/>
                    <constraints>
                        <constraint>T operator-(T)</constraint>
                        <constraint>T operator-(T, T)</constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>unaryMinusIsInverseOp(a)</name>
                            <axiomStatements>
                                <axiomStatement>a + (-a) == 0 &amp;&amp; (-a) + a == 0;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>subtract(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a - b == a + (-b);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_AdditiveMonoid_8D82C7092F575679F72B0CA8C2989C67C1966F37">
                    <name>AdditiveMonoid&lt;T></name>
                    <groupName>AdditiveMonoid</groupName>
                    <syntax>public concept AdditiveMonoid&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699525">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_AdditiveSemigroup_A6AEA5AA906561975AEB0E030818D6AB2DFEE63A"/>
                    <constraints>
                        <constraint>
                            <concept ref="concept_ConversionFromSByte_A10776EEE4D79E1683CD6134446F23BF3CC9B5CA">
                                <params>
                                    <type ref="8699525"/>
                                </params>
                            </concept>
                            <connector>or</connector>
                            <concept ref="concept_ConversionFromByte_96924ABA4FA755E56F657E9BBC15C4233F878D12">
                                <params>
                                    <type ref="8699525"/>
                                </params>
                            </concept>
                        </constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>zeroIsIdentityElement(a)</name>
                            <axiomStatements>
                                <axiomStatement>a + 0 == a &amp;&amp; 0 + a == a;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_AdditiveSemigroup_A6AEA5AA906561975AEB0E030818D6AB2DFEE63A">
                    <name>AdditiveSemigroup&lt;T></name>
                    <groupName>AdditiveSemigroup</groupName>
                    <syntax>public concept AdditiveSemigroup&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699513">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="8699513"/>
                            <connector>is</connector>
                            <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                        </constraint>
                        <constraint>T operator+(T, T)</constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>additionIsAssociative(a, b, c)</name>
                            <axiomStatements>
                                <axiomStatement>(a + b) + c == a + (b + c);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>additionIsCommutative(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a + b == b + a;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_BackInsertionSequence_5885D2D8DDEC40D462924E37DCE754A8F36B52C2">
                    <name>BackInsertionSequence&lt;T></name>
                    <groupName>BackInsertionSequence</groupName>
                    <syntax>public concept BackInsertionSequence&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699495">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_Container_0A128B13B9494DFD21086D34DFB070EAA26D473A"/>
                    <constraints>
                        <constraint>void T.Add(T.ValueType)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_BidirectionalContainer_05A591605B349EDF6FDA457C4C7B21759F8E2BC7">
                    <name>BidirectionalContainer&lt;T></name>
                    <groupName>BidirectionalContainer</groupName>
                    <syntax>public concept BidirectionalContainer&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699503">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_ForwardContainer_98A0A5CEE1E1C33CCABCFC2F31BF6EE7C21229F2"/>
                    <constraints>
                        <constraint>
                            <type ref="8699503"/>
                            <dot>Iterator</dot>
                            <connector>is</connector>
                            <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                            <connector>and</connector>
                            <type ref="8699503"/>
                            <dot>ConstIterator</dot>
                            <connector>is</connector>
                            <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6">
                    <name>BidirectionalIterator&lt;T></name>
                    <groupName>BidirectionalIterator</groupName>
                    <syntax>public concept BidirectionalIterator&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699464">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                    <constraints>
                        <constraint>T&amp; operator--()</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_BinaryFunction_7F3A6EF707F08A997487EC3748D74CC2156DB250">
                    <name>BinaryFunction&lt;T></name>
                    <groupName>BinaryFunction</groupName>
                    <syntax>public concept BinaryFunction&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699470">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="8699470"/>
                            <connector>is</connector>
                            <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        </constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.FirstArgumentType</constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.SecondArgumentType</constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.ResultType</constraint>
                        <constraint>
                            <type ref="8699470"/>
                            <dot>FirstArgumentType</dot>
                            <connector>is</connector>
                            <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                            <connector>and</connector>
                            <type ref="8699470"/>
                            <dot>SecondArgumentType</dot>
                            <connector>is</connector>
                            <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        </constraint>
                        <constraint>T.ResultType operator()(T.FirstArgumentType, T.SecondArgumentType)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_BinaryOperation_E7FA71F85EB4750A92189AC872008306AEFD4D01">
                    <name>BinaryOperation&lt;T></name>
                    <groupName>BinaryOperation</groupName>
                    <syntax>public concept BinaryOperation&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699484">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_BinaryFunction_7F3A6EF707F08A997487EC3748D74CC2156DB250"/>
                    <constraints>
                        <constraint>
                            <type ref="8699484"/>
                            <dot>ResultType</dot>
                            <connector>is</connector>
                            <type ref="8699484"/>
                            <dot>FirstArgumentType</dot>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_BinaryPredicate_47B7E65D192BA156398E605E540F0BEF2A7473D7">
                    <name>BinaryPredicate&lt;T></name>
                    <groupName>BinaryPredicate</groupName>
                    <syntax>public concept BinaryPredicate&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699474">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_BinaryFunction_7F3A6EF707F08A997487EC3748D74CC2156DB250"/>
                    <constraints>
                        <constraint>
                            <type ref="8699474"/>
                            <dot>ResultType</dot>
                            <connector>is</connector>
                            <type ref="type.8699065"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_Common_1761C757BC631D15B26D64D830742878B5E7D7F6">
                    <name>Common&lt;T, U></name>
                    <groupName>Common</groupName>
                    <syntax>public concept Common&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699136">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699137">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint/>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_CommutativeSemiring_18E75B9E6166AB10C73B79D7CBB58DC075B0B5E0">
                    <name>CommutativeSemiring&lt;T></name>
                    <groupName>CommutativeSemiring</groupName>
                    <syntax>public concept CommutativeSemiring&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699539">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_Semiring_4F0D08D0EFBCF87C6267476FBB2CA9239568FA20"/>
                    <constraints/>
                    <axioms>
                        <axiom>
                            <name>multiplicationIsCommutative(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a * b == b * a;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_Container_0A128B13B9494DFD21086D34DFB070EAA26D473A">
                    <name>Container&lt;T></name>
                    <groupName>Container</groupName>
                    <syntax>public concept Container&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699493">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="8699493"/>
                            <connector>is</connector>
                            <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        </constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.ValueType</constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.Iterator</constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.ConstIterator</constraint>
                        <constraint>
                            <type ref="8699493"/>
                            <dot>Iterator</dot>
                            <connector>is</connector>
                            <concept ref="concept_TrivialIterator_63C9CBDE8700FA0C9E6E0CA6C6C65B5DA24A13E5"/>
                            <connector>and</connector>
                            <type ref="8699493"/>
                            <dot>ConstIterator</dot>
                            <connector>is</connector>
                            <concept ref="concept_TrivialIterator_63C9CBDE8700FA0C9E6E0CA6C6C65B5DA24A13E5"/>
                            <connector>and</connector>
                            <type ref="8699493"/>
                            <dot>ValueType</dot>
                            <connector>is</connector>
                            <type ref="8699493"/>
                            <dot>Iterator</dot>
                            <dot>ValueType</dot>
                        </constraint>
                        <constraint>T.Iterator T.Begin()</constraint>
                        <constraint>T.ConstIterator T.CBegin()</constraint>
                        <constraint>T.Iterator T.End()</constraint>
                        <constraint>T.ConstIterator T.CEnd()</constraint>
                        <constraint>int T.Count()</constraint>
                        <constraint>bool T.IsEmpty()</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_ConversionFromByte_96924ABA4FA755E56F657E9BBC15C4233F878D12">
                    <name>ConversionFromByte&lt;T></name>
                    <groupName>ConversionFromByte</groupName>
                    <syntax>public concept ConversionFromByte&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699523">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>T(byte)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_ConversionFromSByte_A10776EEE4D79E1683CD6134446F23BF3CC9B5CA">
                    <name>ConversionFromSByte&lt;T></name>
                    <groupName>ConversionFromSByte</groupName>
                    <syntax>public concept ConversionFromSByte&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699521">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>T(sbyte)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_CopyAssignable_C698EC74F187E27A402BB382B7AC4F26FE50056C">
                    <name>CopyAssignable&lt;T, U></name>
                    <groupName>CopyAssignable</groupName>
                    <syntax>public concept CopyAssignable&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699428">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699429">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>void operator=(const U&amp;)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_CopyAssignable_FCF76B354EA6D2AA36EA34E36E53CB00E98C1BF6">
                    <name>CopyAssignable&lt;T></name>
                    <groupName>CopyAssignable</groupName>
                    <syntax>public concept CopyAssignable&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699426">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>void operator=(const T&amp;)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_CopyConstructible_B11BFA55AF39E78A7C14C35837E65D9DD09586C3">
                    <name>CopyConstructible&lt;T></name>
                    <groupName>CopyConstructible</groupName>
                    <syntax>public concept CopyConstructible&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699420">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>T(const T&amp;)</constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>copyIsEqual(a)</name>
                            <axiomStatements>
                                <axiomStatement>eq(T(a), a);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2">
                    <name>Copyable&lt;T></name>
                    <groupName>Copyable</groupName>
                    <syntax>public concept Copyable&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699433">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="8699433"/>
                            <connector>is</connector>
                            <concept ref="concept_CopyConstructible_B11BFA55AF39E78A7C14C35837E65D9DD09586C3"/>
                            <connector>and</connector>
                            <type ref="8699433"/>
                            <connector>is</connector>
                            <concept ref="concept_CopyAssignable_FCF76B354EA6D2AA36EA34E36E53CB00E98C1BF6"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_DefaultConstructible_928F89FC5607554E7244359D8FE40432C96E53DC">
                    <name>DefaultConstructible&lt;T></name>
                    <groupName>DefaultConstructible</groupName>
                    <syntax>public concept DefaultConstructible&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699418">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>T()</constraint>
                        <constraint>
                            <concept ref="concept_NonreferenceType_9BD78EA2665D4260E5514999AD8FCEA945606407">
                                <params>
                                    <type ref="8699418"/>
                                </params>
                            </concept>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_Destructible_0524F34CBA010FC34882287B0116D474909E0966">
                    <name>Destructible&lt;T></name>
                    <groupName>Destructible</groupName>
                    <syntax>public concept Destructible&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699424">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>~T()</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_EqualityComparable_DDA76B65E48DE418ED1651912DC91E6BCF9A6B60">
                    <name>EqualityComparable&lt;T, U></name>
                    <groupName>EqualityComparable</groupName>
                    <syntax>public concept EqualityComparable&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699441">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699442">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_Common_1761C757BC631D15B26D64D830742878B5E7D7F6"/>
                    <constraints>
                        <constraint>
                            <type ref="8699441"/>
                            <connector>is</connector>
                            <concept ref="concept_EqualityComparable_CBC8491006C76A67817EB0837FEB706E443E77B6"/>
                            <connector>and</connector>
                            <type ref="8699442"/>
                            <connector>is</connector>
                            <concept ref="concept_EqualityComparable_CBC8491006C76A67817EB0837FEB706E443E77B6"/>
                            <connector>and</connector>
                            CommonType<connector>is</connector>
                            <concept ref="concept_EqualityComparable_CBC8491006C76A67817EB0837FEB706E443E77B6"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_EqualityComparable_CBC8491006C76A67817EB0837FEB706E443E77B6">
                    <name>EqualityComparable&lt;T></name>
                    <groupName>EqualityComparable</groupName>
                    <syntax>public concept EqualityComparable&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699439">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>bool operator==(T, T)</constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>equal(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a == b &lt;=> eq(a, b);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>reflexive(a)</name>
                            <axiomStatements>
                                <axiomStatement>a == a;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>symmetric(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a == b => b == a;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>transitive(a, b, c)</name>
                            <axiomStatements>
                                <axiomStatement>a == b &amp;&amp; b == c => a == c;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>notEqualTo(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a != b &lt;=> !(a == b);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_EuclideanSemiring_0963A0023F004A1F3DA33F82504C5F5A55402241">
                    <name>EuclideanSemiring&lt;T></name>
                    <groupName>EuclideanSemiring</groupName>
                    <syntax>public concept EuclideanSemiring&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699541">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_CommutativeSemiring_18E75B9E6166AB10C73B79D7CBB58DC075B0B5E0"/>
                    <constraints>
                        <constraint>T operator%(T, T)</constraint>
                        <constraint>T operator/(T, T)</constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>quotientAndRemainder(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>b != 0 => a == a / b * b + a % b;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_ForwardContainer_98A0A5CEE1E1C33CCABCFC2F31BF6EE7C21229F2">
                    <name>ForwardContainer&lt;T></name>
                    <groupName>ForwardContainer</groupName>
                    <syntax>public concept ForwardContainer&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699499">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_Container_0A128B13B9494DFD21086D34DFB070EAA26D473A"/>
                    <constraints>
                        <constraint>
                            <type ref="8699499"/>
                            <dot>Iterator</dot>
                            <connector>is</connector>
                            <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                            <connector>and</connector>
                            <type ref="8699499"/>
                            <dot>ConstIterator</dot>
                            <connector>is</connector>
                            <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4">
                    <name>ForwardIterator&lt;T></name>
                    <groupName>ForwardIterator</groupName>
                    <syntax>public concept ForwardIterator&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699462">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                    <constraints>
                        <constraint>
                            <type ref="8699462"/>
                            <connector>is</connector>
                            <concept ref="concept_OutputIterator_A454885B47A3648BC107033D34E4A3F5AF8202EC"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_FrontInsertionSequence_6E92B081B326D22C296036E5DDC43365491BEBF4">
                    <name>FrontInsertionSequence&lt;T></name>
                    <groupName>FrontInsertionSequence</groupName>
                    <syntax>public concept FrontInsertionSequence&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699497">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_Container_0A128B13B9494DFD21086D34DFB070EAA26D473A"/>
                    <constraints>
                        <constraint>T.Iterator T.InsertFront(T.ValueType)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_HashFunction_996DE63476FF956BFF568F751960AF2CB4A097A8">
                    <name>HashFunction&lt;T, Key></name>
                    <groupName>HashFunction</groupName>
                    <syntax>public concept HashFunction&lt;T, Key>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699486">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699487">
                            <name>Key</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_UnaryFunction_DDD936ABC21BA268C3B3C9F4820F5DFE1ACAA344"/>
                    <constraints>
                        <constraint>
                            <type ref="8699486"/>
                            <dot>ArgumentType</dot>
                            <connector>is</connector>
                            <type ref="8699487"/>
                            <connector>and</connector>
                            <type ref="8699486"/>
                            <dot>ResultType</dot>
                            <connector>is</connector>
                            <type ref="type.8699073"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406">
                    <name>InputIterator&lt;T></name>
                    <groupName>InputIterator</groupName>
                    <syntax>public concept InputIterator&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699460">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_TrivialIterator_63C9CBDE8700FA0C9E6E0CA6C6C65B5DA24A13E5"/>
                    <constraints>
                        <constraint>T&amp; operator++()</constraint>
                        <constraint>
                            <type ref="8699460"/>
                            <connector>is</connector>
                            <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_InsertionSequence_5D1868A305E1B5BDA144AAB9338B802BCE110BE6">
                    <name>InsertionSequence&lt;T></name>
                    <groupName>InsertionSequence</groupName>
                    <syntax>public concept InsertionSequence&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699501">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_ForwardContainer_98A0A5CEE1E1C33CCABCFC2F31BF6EE7C21229F2"/>
                    <constraints>
                        <constraint>T.Iterator T.Insert(T.Iterator, T.ValueType)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_Integer_FCDB80A4361DAD68848DDECFDCE105F2560B0B0A">
                    <name>Integer&lt;I></name>
                    <groupName>Integer</groupName>
                    <syntax>public concept Integer&lt;I>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699507">
                            <name>I</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="8699507"/>
                            <connector>is</connector>
                            <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                        </constraint>
                        <constraint>I operator-(I)</constraint>
                        <constraint>I operator~(I)</constraint>
                        <constraint>I operator+(I, I)</constraint>
                        <constraint>I operator-(I, I)</constraint>
                        <constraint>I operator*(I, I)</constraint>
                        <constraint>I operator/(I, I)</constraint>
                        <constraint>I operator%(I, I)</constraint>
                        <constraint>I operator&lt;&lt;(I, I)</constraint>
                        <constraint>I operator>>(I, I)</constraint>
                        <constraint>I operator&amp;(I, I)</constraint>
                        <constraint>I operator|(I, I)</constraint>
                        <constraint>I operator^(I, I)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_KeySelectionFunction_719538A539328921CB0D528AECE6DCBE1B8C6E19">
                    <name>KeySelectionFunction&lt;T, Key, Value></name>
                    <groupName>KeySelectionFunction</groupName>
                    <syntax>public concept KeySelectionFunction&lt;T, Key, Value>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699489">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699490">
                            <name>Key</name>
                        </templateParameter>
                        <templateParameter id="8699491">
                            <name>Value</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_UnaryFunction_DDD936ABC21BA268C3B3C9F4820F5DFE1ACAA344"/>
                    <constraints>
                        <constraint>
                            <type ref="8699489"/>
                            <dot>ArgumentType</dot>
                            <connector>is</connector>
                            <type ref="8699491"/>
                            <connector>and</connector>
                            <type ref="8699489"/>
                            <dot>ResultType</dot>
                            <connector>is</connector>
                            <type ref="8699490"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_LessThanComparable_1379E4E0FDC9326039B5F717F269D6FD46537B48">
                    <name>LessThanComparable&lt;T, U></name>
                    <groupName>LessThanComparable</groupName>
                    <syntax>public concept LessThanComparable&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699446">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699447">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_Common_1761C757BC631D15B26D64D830742878B5E7D7F6"/>
                    <constraints>
                        <constraint>
                            <type ref="8699446"/>
                            <connector>is</connector>
                            <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                            <connector>and</connector>
                            <type ref="8699447"/>
                            <connector>is</connector>
                            <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                            <connector>and</connector>
                            CommonType<connector>is</connector>
                            <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5">
                    <name>LessThanComparable&lt;T></name>
                    <groupName>LessThanComparable</groupName>
                    <syntax>public concept LessThanComparable&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699444">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>bool operator&lt;(T, T)</constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>irreflexive(a)</name>
                            <axiomStatements>
                                <axiomStatement>!(a &lt; a);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>antisymmetric(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a &lt; b => !(b &lt; a);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>transitive(a, b, c)</name>
                            <axiomStatements>
                                <axiomStatement>a &lt; b &amp;&amp; b &lt; c => a &lt; c;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>total(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a &lt; b || a == b || a > b;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>greaterThan(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a > b &lt;=> b &lt; a;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>greaterThanOrEqualTo(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a >= b &lt;=> !(a &lt; b);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>lessThanOrEqualTo(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a &lt;= b &lt;=> !(b &lt; a);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D">
                    <name>Movable&lt;T></name>
                    <groupName>Movable</groupName>
                    <syntax>public concept Movable&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699435">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="8699435"/>
                            <connector>is</connector>
                            <concept ref="concept_MoveConstructible_21D36F4E96F5E3072DD6AAB34A26DF5F90FBC262"/>
                            <connector>and</connector>
                            <type ref="8699435"/>
                            <connector>is</connector>
                            <concept ref="concept_MoveAssignable_DF00F01AE5185608C8DBD5AB4BF79B2C07558F59"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_MoveAssignable_DF00F01AE5185608C8DBD5AB4BF79B2C07558F59">
                    <name>MoveAssignable&lt;T></name>
                    <groupName>MoveAssignable</groupName>
                    <syntax>public concept MoveAssignable&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699431">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>void operator=(T&amp;&amp;)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_MoveConstructible_21D36F4E96F5E3072DD6AAB34A26DF5F90FBC262">
                    <name>MoveConstructible&lt;T></name>
                    <groupName>MoveConstructible</groupName>
                    <syntax>public concept MoveConstructible&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699422">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>T(T&amp;&amp;)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_MultiplicativeGroup_157A1A41F23EF7E4F09D855F82CBFB2C95135E91">
                    <name>MultiplicativeGroup&lt;T></name>
                    <groupName>MultiplicativeGroup</groupName>
                    <syntax>public concept MultiplicativeGroup&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699531">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_MultiplicativeMonoid_2EC49957FA822229E3BB5F5014BA5E03C5EACC11"/>
                    <constraints>
                        <constraint>T operator/(T, T)</constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>multiplicativeInverseIsInverseOp(a)</name>
                            <axiomStatements>
                                <axiomStatement>a * (1/a) == 1 &amp;&amp; (1/a) * a == 1;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>division(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a / b == a * (1/b);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_MultiplicativeMonoid_2EC49957FA822229E3BB5F5014BA5E03C5EACC11">
                    <name>MultiplicativeMonoid&lt;T></name>
                    <groupName>MultiplicativeMonoid</groupName>
                    <syntax>public concept MultiplicativeMonoid&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699527">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_MultiplicativeSemigroup_E0D9C06FDD3386C79EFB595ABA20C0B553593F5B"/>
                    <constraints>
                        <constraint>
                            <concept ref="concept_ConversionFromSByte_A10776EEE4D79E1683CD6134446F23BF3CC9B5CA">
                                <params>
                                    <type ref="8699527"/>
                                </params>
                            </concept>
                            <connector>or</connector>
                            <concept ref="concept_ConversionFromByte_96924ABA4FA755E56F657E9BBC15C4233F878D12">
                                <params>
                                    <type ref="8699527"/>
                                </params>
                            </concept>
                        </constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>oneIsIdentityElement(a)</name>
                            <axiomStatements>
                                <axiomStatement>a * 1 == a &amp;&amp; 1 * a == a;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_MultiplicativeSemigroup_E0D9C06FDD3386C79EFB595ABA20C0B553593F5B">
                    <name>MultiplicativeSemigroup&lt;T></name>
                    <groupName>MultiplicativeSemigroup</groupName>
                    <syntax>public concept MultiplicativeSemigroup&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699515">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="8699515"/>
                            <connector>is</connector>
                            <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                        </constraint>
                        <constraint>T operator*(T, T)</constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>multiplicationIsAssociative(a, b, c)</name>
                            <axiomStatements>
                                <axiomStatement>(a * b) * c == a * (b * c);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_OrderedAdditiveGroup_816E7DDE277944194F8E6A9829101ABF9F3D1A31">
                    <name>OrderedAdditiveGroup&lt;T></name>
                    <groupName>OrderedAdditiveGroup</groupName>
                    <syntax>public concept OrderedAdditiveGroup&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699535">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_OrderedAdditiveMonoid_222CA37B033DDCCCC9468E66D20F79A23935055A"/>
                    <constraints>
                        <constraint>
                            <type ref="8699535"/>
                            <connector>is</connector>
                            <concept ref="concept_AdditiveGroup_F97CD80E909011A4ADD1F7D285678312B63559D8"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_OrderedAdditiveMonoid_222CA37B033DDCCCC9468E66D20F79A23935055A">
                    <name>OrderedAdditiveMonoid&lt;T></name>
                    <groupName>OrderedAdditiveMonoid</groupName>
                    <syntax>public concept OrderedAdditiveMonoid&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699533">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_OrderedAdditiveSemigroup_345BFD4A7343FC1E70CA50D3CF7D48A92261F57E"/>
                    <constraints>
                        <constraint>
                            <type ref="8699533"/>
                            <connector>is</connector>
                            <concept ref="concept_AdditiveMonoid_8D82C7092F575679F72B0CA8C2989C67C1966F37"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_OrderedAdditiveSemigroup_345BFD4A7343FC1E70CA50D3CF7D48A92261F57E">
                    <name>OrderedAdditiveSemigroup&lt;T></name>
                    <groupName>OrderedAdditiveSemigroup</groupName>
                    <syntax>public concept OrderedAdditiveSemigroup&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699517">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_AdditiveSemigroup_A6AEA5AA906561975AEB0E030818D6AB2DFEE63A"/>
                    <constraints>
                        <constraint>
                            <type ref="8699517"/>
                            <connector>is</connector>
                            <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                        </constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>additionPreservesOrder(a, b, c)</name>
                            <axiomStatements>
                                <axiomStatement>a &lt; b => a + c &lt; b + c;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_OrderedMultiplicativeSemigroup_FC830022C42780AE3A7B2B551D66117747F51D2E">
                    <name>OrderedMultiplicativeSemigroup&lt;T></name>
                    <groupName>OrderedMultiplicativeSemigroup</groupName>
                    <syntax>public concept OrderedMultiplicativeSemigroup&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699519">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_MultiplicativeSemigroup_E0D9C06FDD3386C79EFB595ABA20C0B553593F5B"/>
                    <constraints>
                        <constraint>
                            <type ref="8699519"/>
                            <connector>is</connector>
                            <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_OutputIterator_A454885B47A3648BC107033D34E4A3F5AF8202EC">
                    <name>OutputIterator&lt;T></name>
                    <groupName>OutputIterator</groupName>
                    <syntax>public concept OutputIterator&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699458">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_TrivialIterator_63C9CBDE8700FA0C9E6E0CA6C6C65B5DA24A13E5"/>
                    <constraints>
                        <constraint>T&amp; operator++()</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_RandomAccessContainer_7D44EBDB629CA332A20056356A52519C0BB1FADF">
                    <name>RandomAccessContainer&lt;T></name>
                    <groupName>RandomAccessContainer</groupName>
                    <syntax>public concept RandomAccessContainer&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699505">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_BidirectionalContainer_05A591605B349EDF6FDA457C4C7B21759F8E2BC7"/>
                    <constraints>
                        <constraint>
                            <type ref="8699505"/>
                            <dot>Iterator</dot>
                            <connector>is</connector>
                            <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                            <connector>and</connector>
                            <type ref="8699505"/>
                            <dot>ConstIterator</dot>
                            <connector>is</connector>
                            <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484">
                    <name>RandomAccessIterator&lt;T></name>
                    <groupName>RandomAccessIterator</groupName>
                    <syntax>public concept RandomAccessIterator&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699466">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                    <constraints>
                        <constraint>T.ReferenceType operator[](int)</constraint>
                        <constraint>T operator+(T, int)</constraint>
                        <constraint>T operator+(int, T)</constraint>
                        <constraint>T operator-(T, int)</constraint>
                        <constraint>int operator-(T, T)</constraint>
                        <constraint>
                            <type ref="8699466"/>
                            <connector>is</connector>
                            <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1">
                    <name>Regular&lt;T></name>
                    <groupName>Regular</groupName>
                    <syntax>public concept Regular&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699449">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    <constraints>
                        <constraint>
                            <type ref="8699449"/>
                            <connector>is</connector>
                            <concept ref="concept_EqualityComparable_CBC8491006C76A67817EB0837FEB706E443E77B6"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_Relation_34B41129EB756D944983CCCA612EDAA19318537E">
                    <name>Relation&lt;T, U, V></name>
                    <groupName>Relation</groupName>
                    <syntax>public concept Relation&lt;T, U, V>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699478">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699479">
                            <name>U</name>
                        </templateParameter>
                        <templateParameter id="8699480">
                            <name>V</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_BinaryPredicate_47B7E65D192BA156398E605E540F0BEF2A7473D7"/>
                    <constraints>
                        <constraint>
                            <type ref="8699478"/>
                            <dot>FirstArgumentType</dot>
                            <connector>is</connector>
                            <type ref="8699479"/>
                            <connector>and</connector>
                            <type ref="8699478"/>
                            <dot>SecondArgumentType</dot>
                            <connector>is</connector>
                            <type ref="8699480"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746">
                    <name>Relation&lt;T></name>
                    <groupName>Relation</groupName>
                    <syntax>public concept Relation&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699476">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_BinaryPredicate_47B7E65D192BA156398E605E540F0BEF2A7473D7"/>
                    <constraints>
                        <constraint>
                            <span class="kw">typename</span>
                             T.Domain</constraint>
                        <constraint>
                            <concept ref="concept_Same_DBCFA3D7303B9F160493F695D4DCB6973FFF06E3">
                                <params>
                                    <type ref="8699476"/>
                                    <dot>Domain</dot>
                                    <type ref="8699476"/>
                                    <dot>FirstArgumentType</dot>
                                </params>
                            </concept>
                            <connector>and</connector>
                            <concept ref="concept_Same_DBCFA3D7303B9F160493F695D4DCB6973FFF06E3">
                                <params>
                                    <type ref="8699476"/>
                                    <dot>SecondArgumentType</dot>
                                    <type ref="8699476"/>
                                    <dot>Domain</dot>
                                </params>
                            </concept>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7">
                    <name>Semiregular&lt;T></name>
                    <groupName>Semiregular</groupName>
                    <syntax>public concept Semiregular&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699437">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="8699437"/>
                            <connector>is</connector>
                            <concept ref="concept_DefaultConstructible_928F89FC5607554E7244359D8FE40432C96E53DC"/>
                            <connector>and</connector>
                            <openParen/>
                            <type ref="8699437"/>
                            <connector>is</connector>
                            <concept ref="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D"/>
                            <connector>or</connector>
                            <type ref="8699437"/>
                            <connector>is</connector>
                            <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                            <closeParen/>
                            <connector>and</connector>
                            <type ref="8699437"/>
                            <connector>is</connector>
                            <concept ref="concept_Destructible_0524F34CBA010FC34882287B0116D474909E0966"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_Semiring_4F0D08D0EFBCF87C6267476FBB2CA9239568FA20">
                    <name>Semiring&lt;T></name>
                    <groupName>Semiring</groupName>
                    <syntax>public concept Semiring&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699537">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_AdditiveMonoid_8D82C7092F575679F72B0CA8C2989C67C1966F37"/>
                    <constraints>
                        <constraint>
                            <type ref="8699537"/>
                            <connector>is</connector>
                            <concept ref="concept_MultiplicativeMonoid_2EC49957FA822229E3BB5F5014BA5E03C5EACC11"/>
                        </constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>zeroIsNotOne</name>
                            <axiomStatements>
                                <axiomStatement>0 != 1;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>multiplyingByZeroYieldsZero(a)</name>
                            <axiomStatements>
                                <axiomStatement>0 * a == 0 &amp;&amp; a * 0 == 0;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>distributivity(a, b, c)</name>
                            <axiomStatements>
                                <axiomStatement>a * (b + c) == a * b + a * c &amp;&amp; (b + c) * a == b * a + c * a;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_SignedInteger_1433E09EDE31E4C6382A074E0B77CDD99D989804">
                    <name>SignedInteger&lt;I></name>
                    <groupName>SignedInteger</groupName>
                    <syntax>public concept SignedInteger&lt;I>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699509">
                            <name>I</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="8699509"/>
                            <connector>is</connector>
                            <concept ref="concept_Integer_FCDB80A4361DAD68848DDECFDCE105F2560B0B0A"/>
                        </constraint>
                        <constraint>I(sbyte)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_TotallyOrdered_40CD71CFED7B3E26AA555259C8C3A14D6CE666EC">
                    <name>TotallyOrdered&lt;T, U></name>
                    <groupName>TotallyOrdered</groupName>
                    <syntax>public concept TotallyOrdered&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699453">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="8699454">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_Common_1761C757BC631D15B26D64D830742878B5E7D7F6"/>
                    <constraints>
                        <constraint>
                            <type ref="8699453"/>
                            <connector>is</connector>
                            <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            <connector>and</connector>
                            <type ref="8699454"/>
                            <connector>is</connector>
                            <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            <connector>and</connector>
                            CommonType<connector>is</connector>
                            <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2">
                    <name>TotallyOrdered&lt;T></name>
                    <groupName>TotallyOrdered</groupName>
                    <syntax>public concept TotallyOrdered&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699451">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                    <constraints>
                        <constraint>
                            <type ref="8699451"/>
                            <connector>is</connector>
                            <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_TrivialIterator_63C9CBDE8700FA0C9E6E0CA6C6C65B5DA24A13E5">
                    <name>TrivialIterator&lt;T></name>
                    <groupName>TrivialIterator</groupName>
                    <syntax>public concept TrivialIterator&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699456">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="8699456"/>
                            <connector>is</connector>
                            <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        </constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.ValueType</constraint>
                        <constraint>
                            <type ref="8699456"/>
                            <dot>ValueType</dot>
                            <connector>is</connector>
                            <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        </constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.ReferenceType</constraint>
                        <constraint>
                            <type ref="8699456"/>
                            <dot>ReferenceType</dot>
                            <connector>is</connector>
                            <type ref="8699456"/>
                            <dot>ValueType</dot>
                            <qualifier>&amp;</qualifier>
                        </constraint>
                        <constraint>T.ReferenceType operator*()</constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.PointerType</constraint>
                        <constraint>
                            <type ref="8699456"/>
                            <dot>PointerType</dot>
                            <connector>is</connector>
                            <type ref="8699456"/>
                            <dot>ValueType</dot>
                            <qualifier>*</qualifier>
                        </constraint>
                        <constraint>T.PointerType operator->()</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_UnaryFunction_DDD936ABC21BA268C3B3C9F4820F5DFE1ACAA344">
                    <name>UnaryFunction&lt;T></name>
                    <groupName>UnaryFunction</groupName>
                    <syntax>public concept UnaryFunction&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699468">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="8699468"/>
                            <connector>is</connector>
                            <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        </constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.ArgumentType</constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.ResultType</constraint>
                        <constraint>
                            <type ref="8699468"/>
                            <dot>ArgumentType</dot>
                            <connector>is</connector>
                            <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        </constraint>
                        <constraint>T.ResultType operator()(T.ArgumentType)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_UnaryOperation_A42C7312D25FC827BE924605B8EB6CAF29F5668A">
                    <name>UnaryOperation&lt;T></name>
                    <groupName>UnaryOperation</groupName>
                    <syntax>public concept UnaryOperation&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699482">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_UnaryFunction_DDD936ABC21BA268C3B3C9F4820F5DFE1ACAA344"/>
                    <constraints>
                        <constraint>
                            <type ref="8699482"/>
                            <dot>ResultType</dot>
                            <connector>is</connector>
                            <type ref="8699482"/>
                            <dot>ArgumentType</dot>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_UnaryPredicate_817CC9DCD26C0954E03389EC0C9357DB1879C53F">
                    <name>UnaryPredicate&lt;T></name>
                    <groupName>UnaryPredicate</groupName>
                    <syntax>public concept UnaryPredicate&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699472">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_UnaryFunction_DDD936ABC21BA268C3B3C9F4820F5DFE1ACAA344"/>
                    <constraints>
                        <constraint>
                            <type ref="8699472"/>
                            <dot>ResultType</dot>
                            <connector>is</connector>
                            <type ref="type.8699065"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_UnsignedInteger_FBFA16F1BC6E6222A9D123737D6648E8035C07E7">
                    <name>UnsignedInteger&lt;U></name>
                    <groupName>UnsignedInteger</groupName>
                    <syntax>public concept UnsignedInteger&lt;U>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699511">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="8699511"/>
                            <connector>is</connector>
                            <concept ref="concept_Integer_FCDB80A4361DAD68848DDECFDCE105F2560B0B0A"/>
                        </constraint>
                        <constraint>U(byte)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
            </concepts>
        </namespace>
        <namespace id="System.IO">
            <name>System.IO</name>
            <classes>
                <class id="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC">
                    <name>BinaryReader</name>
                    <groupName>BinaryReader</groupName>
                    <syntax> public class BinaryReader;</syntax>
                    <constructors>
                        <constructor id="constructor_BinaryReader_0176E0961F1A1E6073932B0F20713FF3BB42D269">
                            <name>BinaryReader(const SharedPtr&lt;System.IO.ByteStream>&amp; stream_)</name>
                            <syntax>public nothrow BinaryReader(const SharedPtr&lt;System.IO.ByteStream>&amp; stream_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stream_</name>
                                    <type ref="type.8700173"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_ContainedStream_BinaryReader_BBDB6FC0C99821482A1F3A230DE85E6AA35BFF54">
                            <name>ContainedStream()</name>
                            <syntax>public nothrow const SharedPtr&lt;System.IO.ByteStream>&amp; ContainedStream();</syntax>
                            <returnType ref="type.8700173"/>
                        </function>
                        <function id="member_function_ReadBool_BinaryReader_7D4150B79E085499041382212B1D995103D13FFF">
                            <name>ReadBool()</name>
                            <syntax>public bool ReadBool();</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_ReadByte_BinaryReader_5E8D1300279F520DFB342439697BB27B81D7C26E">
                            <name>ReadByte()</name>
                            <syntax>public byte ReadByte();</syntax>
                            <returnType ref="type.8699067"/>
                        </function>
                        <function id="member_function_ReadChar_BinaryReader_82E6BD374D335D3F9C3FCD0505EF2F7F0381BE2E">
                            <name>ReadChar()</name>
                            <syntax>public char ReadChar();</syntax>
                            <returnType ref="type.8699076"/>
                        </function>
                        <function id="member_function_ReadDouble_BinaryReader_E764E3A97099C9163B89B8FBCC17FC9D14086D2A">
                            <name>ReadDouble()</name>
                            <syntax>public double ReadDouble();</syntax>
                            <returnType ref="type.8699075"/>
                        </function>
                        <function id="member_function_ReadFloat_BinaryReader_31F488ED2AAD86D826B21791511107667A014FBD">
                            <name>ReadFloat()</name>
                            <syntax>public float ReadFloat();</syntax>
                            <returnType ref="type.8699074"/>
                        </function>
                        <function id="member_function_ReadInt_BinaryReader_5273915AB773625DEE066896143C4CD6F700B882">
                            <name>ReadInt()</name>
                            <syntax>public int ReadInt();</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_ReadLong_BinaryReader_5C57E3D81A94519DE0B35290F20625D887EFD7F1">
                            <name>ReadLong()</name>
                            <syntax>public long ReadLong();</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_ReadSByte_BinaryReader_E96448DCC609D7D981127DDC3769F3279E979B8F">
                            <name>ReadSByte()</name>
                            <syntax>public sbyte ReadSByte();</syntax>
                            <returnType ref="type.8699066"/>
                        </function>
                        <function id="member_function_ReadShort_BinaryReader_3D66677E3B6C1DA57A2473CCF4CB639C1C40DB21">
                            <name>ReadShort()</name>
                            <syntax>public short ReadShort();</syntax>
                            <returnType ref="type.8699068"/>
                        </function>
                        <function id="member_function_ReadString_BinaryReader_D215B9FD2A82F33D48F36F0919AB07214ED09B6B">
                            <name>ReadString()</name>
                            <syntax>public String&lt;char> ReadString();</syntax>
                            <returnType ref="type.8700206"/>
                        </function>
                        <function id="member_function_ReadUChar_BinaryReader_EADED62463D66516C3DD1A57BB5EC41CE4E068AC">
                            <name>ReadUChar()</name>
                            <syntax>public uchar ReadUChar();</syntax>
                            <returnType ref="type.8699078"/>
                        </function>
                        <function id="member_function_ReadUInt_BinaryReader_AE65B957E533FCDEA46D538020C2692C11622B03">
                            <name>ReadUInt()</name>
                            <syntax>public uint ReadUInt();</syntax>
                            <returnType ref="type.8699071"/>
                        </function>
                        <function id="member_function_ReadULong_BinaryReader_7ABAC55009638C490EADBCDD0A5B4AD0896EFDC4">
                            <name>ReadULong()</name>
                            <syntax>public ulong ReadULong();</syntax>
                            <returnType ref="type.8699073"/>
                        </function>
                        <function id="member_function_ReadUShort_BinaryReader_FC1EA022CA108DE022829DCD653ADD7D3189B625">
                            <name>ReadUShort()</name>
                            <syntax>public ushort ReadUShort();</syntax>
                            <returnType ref="type.8699069"/>
                        </function>
                        <function id="member_function_ReadUString_BinaryReader_181BF99C9C37F81BB93F72E171A2B36A54E0C2FB">
                            <name>ReadUString()</name>
                            <syntax>public String&lt;uchar> ReadUString();</syntax>
                            <returnType ref="type.8700294"/>
                        </function>
                        <function id="member_function_ReadWChar_BinaryReader_5AA272210FDE0A74067CC50E2796F6F3EA1ED7CD">
                            <name>ReadWChar()</name>
                            <syntax>public wchar ReadWChar();</syntax>
                            <returnType ref="type.8699077"/>
                        </function>
                        <function id="member_function_ReadWString_BinaryReader_F0AAD035C242A0E502FA20B685C22872606F3A85">
                            <name>ReadWString()</name>
                            <syntax>public String&lt;wchar> ReadWString();</syntax>
                            <returnType ref="type.8700249"/>
                        </function>
                        <function id="member_function_Seek_BinaryReader_A543CD581EA8EDACAF6FE5CB6015BEB0E47E4C17">
                            <name>Seek(long pos, Origin origin)</name>
                            <syntax>public void Seek(long pos, Origin origin);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                                <parameter>
                                    <name>origin</name>
                                    <type ref="enumerated_type_Origin_A770811A120AA0D85B3AD4E90D4A9AF5ADC90D70"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Tell_BinaryReader_3AC0B4D725ABDCA48BF57B62F214E9F33148EBD0">
                            <name>Tell()</name>
                            <syntax>public long Tell();</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                    </functions>
                </class>
                <class id="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2">
                    <name>BinaryWriter</name>
                    <groupName>BinaryWriter</groupName>
                    <syntax> public class BinaryWriter;</syntax>
                    <constructors>
                        <constructor id="constructor_BinaryWriter_3114A06E296BAC1FD79F898D8B1D444C88A1683E">
                            <name>BinaryWriter(const SharedPtr&lt;System.IO.ByteStream>&amp; stream_)</name>
                            <syntax>public nothrow BinaryWriter(const SharedPtr&lt;System.IO.ByteStream>&amp; stream_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stream_</name>
                                    <type ref="type.8700173"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_ContainedStream_BinaryWriter_0A671074BD5B2E64DCF48D9B716E0830B959D0FE">
                            <name>ContainedStream()</name>
                            <syntax>public nothrow const SharedPtr&lt;System.IO.ByteStream>&amp; ContainedStream();</syntax>
                            <returnType ref="type.8700173"/>
                        </function>
                        <function id="member_function_Seek_BinaryWriter_262B3437137B7CB628B09D89D968370AC3BE4806">
                            <name>Seek(long pos, Origin origin)</name>
                            <syntax>public void Seek(long pos, Origin origin);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                                <parameter>
                                    <name>origin</name>
                                    <type ref="enumerated_type_Origin_A770811A120AA0D85B3AD4E90D4A9AF5ADC90D70"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Tell_BinaryWriter_B7409AF463074AD4CBE04D145DF48C56F62FE440">
                            <name>Tell()</name>
                            <syntax>public long Tell();</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="function_group_Write_867352E1CE0ACA6E11F4DA21926AC3B016757EDB">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_BinaryWriter_9227A4172AF0D4304FF220A3D5E8CF7497B623C0">
                                    <name>Write(bool x)</name>
                                    <syntax>public void Write(bool x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699065"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_49130F748DFF829AF5A1651D891A8C6890B897DD">
                                    <name>Write(byte x)</name>
                                    <syntax>public void Write(byte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699067"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_71FFD84DC1DA8A65AAB8081B228A0B7E2B9D464D">
                                    <name>Write(char x)</name>
                                    <syntax>public void Write(char x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699076"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_42759A137A9CCC36E5D886D61C3CFD42E1EEE7E8">
                                    <name>Write(const String&lt;char>&amp; x)</name>
                                    <syntax>public void Write(const String&lt;char>&amp; x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8700211"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_83FAEB9317DB8F2175C9E6338B6BA553B03B27F3">
                                    <name>Write(const String&lt;uchar>&amp; x)</name>
                                    <syntax>public void Write(const String&lt;uchar>&amp; x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8700299"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_514D0BE8134A791F3398D7CE3F1792AC4BD3A6BA">
                                    <name>Write(const String&lt;wchar>&amp; x)</name>
                                    <syntax>public void Write(const String&lt;wchar>&amp; x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8700254"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_F340C15574EBD7B958032EFBE3369CE30C39413A">
                                    <name>Write(double x)</name>
                                    <syntax>public void Write(double x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699075"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_6B3CAC640FBF81A8D9BC4C81842918800ECC0AD8">
                                    <name>Write(float x)</name>
                                    <syntax>public void Write(float x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699074"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_6A7A93107B2EB695CBEB979A8EDDE35032D9CD56">
                                    <name>Write(int x)</name>
                                    <syntax>public void Write(int x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699070"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_E899BA0D165F10634A9658689F4CB2B4C023A11F">
                                    <name>Write(long x)</name>
                                    <syntax>public void Write(long x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_8A1E5BAF3645A8253A99A1A1D82142F9F3C0843B">
                                    <name>Write(sbyte x)</name>
                                    <syntax>public void Write(sbyte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699066"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_079CD4DEC5E3CCE15688293D6201AA9FBD27447D">
                                    <name>Write(short x)</name>
                                    <syntax>public void Write(short x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699068"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_42732279991BCAAD1B0C91FE9F624C935BF87D75">
                                    <name>Write(uchar x)</name>
                                    <syntax>public void Write(uchar x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699078"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_22B6E7472E4D1153FC6F1888C85D9F955AEF7229">
                                    <name>Write(uint x)</name>
                                    <syntax>public void Write(uint x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699071"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_C5D22BDE73ED243BD2E06087985E120D37B5274D">
                                    <name>Write(ulong x)</name>
                                    <syntax>public void Write(ulong x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699073"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_912311787C89D7CC5678A6B513A2F9049A9BED8D">
                                    <name>Write(ushort x)</name>
                                    <syntax>public void Write(ushort x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699069"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_345AB5DEE5D1A6B17FCC3C9E2E61FCD5EF8D037F">
                                    <name>Write(wchar x)</name>
                                    <syntax>public void Write(wchar x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699077"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573">
                    <name>BufferedByteStream</name>
                    <groupName>BufferedByteStream</groupName>
                    <syntax> public class BufferedByteStream;</syntax>
                    <baseClass ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
                    <constructors>
                        <constructor id="constructor_BufferedByteStream_3150B9CE61F22373F3FF70A553C1F0302CA0CEA9">
                            <name>BufferedByteStream(const SharedPtr&lt;System.IO.ByteStream>&amp; baseStream_)</name>
                            <syntax>public nothrow BufferedByteStream(const SharedPtr&lt;System.IO.ByteStream>&amp; baseStream_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>baseStream_</name>
                                    <type ref="type.8700173"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BufferedByteStream_7C39B6520A40CDD7A947C88237E1C16E2C5CA5A2">
                            <name>BufferedByteStream(const SharedPtr&lt;System.IO.ByteStream>&amp; baseStream_, long bufferSize_)</name>
                            <syntax>public nothrow BufferedByteStream(const SharedPtr&lt;System.IO.ByteStream>&amp; baseStream_, long bufferSize_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>baseStream_</name>
                                    <type ref="type.8700173"/>
                                </parameter>
                                <parameter>
                                    <name>bufferSize_</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_ContainedStream_BufferedByteStream_3E1EA9E0787129D34F15AC15C1BF23FAD497EBD8">
                            <name>ContainedStream()</name>
                            <syntax>public nothrow const SharedPtr&lt;System.IO.ByteStream>&amp; ContainedStream();</syntax>
                            <returnType ref="type.8700173"/>
                        </function>
                        <function id="member_function_Flush_BufferedByteStream_C190054D9E247609DEBDA46585A479AB3B5FB598">
                            <name>Flush()</name>
                            <syntax>public override void Flush();</syntax>
                        </function>
                        <function id="member_function_Read_BufferedByteStream_7731798CF1D3ADF175EBC9F66EDC6C6951699080">
                            <name>Read(byte* buf, long count)</name>
                            <syntax>public override long Read(byte* buf, long count);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.8699087"/>
                                </parameter>
                                <parameter>
                                    <name>count</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_ReadByte_BufferedByteStream_3A2AAD44A0C2362A5292653C0C8D76DA20F5ABFA">
                            <name>ReadByte()</name>
                            <syntax>public override int ReadByte();</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_Seek_BufferedByteStream_577B82B981103BEA42DCB3521AB2335AF16E1DF7">
                            <name>Seek(long pos, Origin origin)</name>
                            <syntax>public override void Seek(long pos, Origin origin);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                                <parameter>
                                    <name>origin</name>
                                    <type ref="enumerated_type_Origin_A770811A120AA0D85B3AD4E90D4A9AF5ADC90D70"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Tell_BufferedByteStream_7AD5B566CE4A4EB80A8DD7C43703DEBEA6682DE6">
                            <name>Tell()</name>
                            <syntax>public override long Tell();</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="function_group_Write_7A0BF8F5EAD509509E2E8B2EE0EF6B2ADD9F80AE">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_BufferedByteStream_F6C2A5A7E93788CB03C14A4D720FD805EBC1EF76">
                                    <name>Write(byte x)</name>
                                    <syntax>public override void Write(byte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699067"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BufferedByteStream_AE1AA6C721ECF393C6C934954B245BA2E015C766">
                                    <name>Write(byte* buf, long count)</name>
                                    <syntax>public override void Write(byte* buf, long count);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>buf</name>
                                            <type ref="type.8699087"/>
                                        </parameter>
                                        <parameter>
                                            <name>count</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F">
                    <name>ByteStream</name>
                    <groupName>ByteStream</groupName>
                    <syntax>abstract public class ByteStream;</syntax>
                    <constructors>
                        <constructor id="move_constructor_ByteStream_79C9D690CE6C3AE37E3ED5CCACF1950640749162">
                            <name>ByteStream(ByteStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default ByteStream(ByteStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8700370"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_CopyTo_50D26BA5574889FBF6BCCE7346EA0401D2F24AE0">
                            <name>CopyTo</name>
                            <overloads>
                                <overload id="member_function_CopyTo_ByteStream_0492E0CBFB6B3F30EF00802A23577E7067B981A0">
                                    <name>CopyTo(ByteStream&amp; destination)</name>
                                    <syntax>public void CopyTo(ByteStream&amp; destination);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>destination</name>
                                            <type ref="type.8699410"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_CopyTo_ByteStream_09F8EA0997885DD83562B277CD430D46040BB611">
                                    <name>CopyTo(ByteStream&amp; destination, long bufferSize)</name>
                                    <syntax>public void CopyTo(ByteStream&amp; destination, long bufferSize);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>destination</name>
                                            <type ref="type.8699410"/>
                                        </parameter>
                                        <parameter>
                                            <name>bufferSize</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Flush_ByteStream_B359C6583A0F7B15600ACAFE7CAC23020693AEBB">
                            <name>Flush()</name>
                            <syntax>public virtual void Flush();</syntax>
                        </function>
                        <function id="member_function_Read_ByteStream_026763BB61037CC329F0EC41074406529C920B49">
                            <name>Read(byte* buf, long count)</name>
                            <syntax>public abstract long Read(byte* buf, long count);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.8699087"/>
                                </parameter>
                                <parameter>
                                    <name>count</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_ReadByte_ByteStream_00F33B1B22C620EA630EFF170682AF0914E4E568">
                            <name>ReadByte()</name>
                            <syntax>public abstract int ReadByte();</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_Seek_ByteStream_6127E9DEF97F05A69D099D8E1CED2CCA9FD5F9B3">
                            <name>Seek(long pos, Origin origin)</name>
                            <syntax>public virtual void Seek(long pos, Origin origin);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                                <parameter>
                                    <name>origin</name>
                                    <type ref="enumerated_type_Origin_A770811A120AA0D85B3AD4E90D4A9AF5ADC90D70"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Tell_ByteStream_163EFD5A892885A5804810B26BDF0BA74083B8D7">
                            <name>Tell()</name>
                            <syntax>public virtual long Tell();</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="function_group_Write_424A07E8A91E3325445B9A66F6B4153C8AF04F02">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_ByteStream_B16019C1887E69858F8B4AADB6B9CE65537722E2">
                                    <name>Write(byte x)</name>
                                    <syntax>public abstract void Write(byte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699067"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_ByteStream_E19BFE5AE2C372D12C30E7858F26083DF778BC5D">
                                    <name>Write(byte* buf, long count)</name>
                                    <syntax>public abstract void Write(byte* buf, long count);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>buf</name>
                                            <type ref="type.8699087"/>
                                        </parameter>
                                        <parameter>
                                            <name>count</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="move_assignment_op_assign_ByteStream_15F91751C8166EF74B764D28C21985D119070C22">
                            <name>operator=(ByteStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(ByteStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8700370"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_File_85477685F364D5CA8DD10F980720D3A3446A5D8A">
                    <name>File</name>
                    <groupName>File</groupName>
                    <syntax> public static class File;</syntax>
                    <staticMemberFunctions>
                        <function id="member_function_AppendText_File_643A8FED35EB760E56C6629EF3A3EE6E7F96215F">
                            <name>AppendText(const String&lt;char>&amp; filePath)</name>
                            <syntax>public static StreamWriter AppendText(const String&lt;char>&amp; filePath);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
                        </function>
                        <function id="member_function_CreateBinary_File_5A4B549AD41ABE0BCEA7A20302A5E25BD0EC1ADD">
                            <name>CreateBinary(const String&lt;char>&amp; filePath)</name>
                            <syntax>public static BinaryWriter CreateBinary(const String&lt;char>&amp; filePath);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
                        </function>
                        <function id="member_function_CreateText_File_2EF9CAB30DD21BABC54A82CCB9FF835510E74DC2">
                            <name>CreateText(const String&lt;char>&amp; filePath)</name>
                            <syntax>public static StreamWriter CreateText(const String&lt;char>&amp; filePath);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
                        </function>
                        <function id="member_function_Exists_File_FC6BD11DC4C17349F599B2729C5A76449EDB46F3">
                            <name>Exists(const String&lt;char>&amp; filePath)</name>
                            <syntax>public static nothrow bool Exists(const String&lt;char>&amp; filePath);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_LastWriteTimeLess_File_2A1F7CAC91487015802222F0432A9071D3DA8880">
                            <name>LastWriteTimeLess(const String&lt;char>&amp; filePath1, const String&lt;char>&amp; filePath2)</name>
                            <syntax>public static nothrow bool LastWriteTimeLess(const String&lt;char>&amp; filePath1, const String&lt;char>&amp; filePath2);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath1</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>filePath2</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_OpenBinary_File_2EEB4F10A5AC3B2E46AC66A79EEDF83EA7A16170">
                            <name>OpenBinary(const String&lt;char>&amp; filePath)</name>
                            <syntax>public static BinaryReader OpenBinary(const String&lt;char>&amp; filePath);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
                        </function>
                        <function id="member_function_OpenRead_File_E47873D844B9D94ACA693A28F299A0CCF71AD6B6">
                            <name>OpenRead(const String&lt;char>&amp; filePath)</name>
                            <syntax>public static StreamReader OpenRead(const String&lt;char>&amp; filePath);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_StreamReader_8A8267CD81BA8B198AF295474A8CB0B2DFBB7B57"/>
                        </function>
                        <function id="member_function_ReadAllLines_File_DC86B4CEA779764618F3663F4CC2710BDFCAA04E">
                            <name>ReadAllLines(const String&lt;char>&amp; filePath)</name>
                            <syntax>public static List&lt;String&lt;char>> ReadAllLines(const String&lt;char>&amp; filePath);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700228"/>
                        </function>
                        <function id="member_function_ReadAllText_File_BF69423F5ECED3BABCA2932C268CBA63196E46E4">
                            <name>ReadAllText(const String&lt;char>&amp; filePath)</name>
                            <syntax>public static String&lt;char> ReadAllText(const String&lt;char>&amp; filePath);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_FileByteStream_B5032C95DE0C760ED2354356BEFFAFF5F1422919">
                    <name>FileByteStream</name>
                    <groupName>FileByteStream</groupName>
                    <syntax> public class FileByteStream;</syntax>
                    <baseClass ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
                    <constructors>
                        <constructor id="move_constructor_FileByteStream_729CF33EAEBA21E76D547F4EDD705803C28520A9">
                            <name>FileByteStream(FileByteStream&amp;&amp; that)</name>
                            <syntax>public nothrow FileByteStream(FileByteStream&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8700406"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_FileByteStream_A44C625B3794E09E830DB7A6CAA0B9E08A6611E1">
                            <name>FileByteStream(const String&lt;char>&amp; filePath, OpenMode openMode)</name>
                            <syntax>public FileByteStream(const String&lt;char>&amp; filePath, OpenMode openMode);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>openMode</name>
                                    <type ref="enumerated_type_OpenMode_063ACAC8B31C29229F5F485205B9D6C7EB9D6810"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_FileByteStream_11778080A4AEBA57BAC595A5098CBBAFB165BE5B">
                            <name>FileByteStream(int fileHandle_)</name>
                            <syntax>public nothrow FileByteStream(int fileHandle_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>fileHandle_</name>
                                    <type ref="type.8699070"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Close_FileByteStream_508760CCC28C72F859D17B8C210EE37412247094">
                            <name>Close()</name>
                            <syntax>public void Close();</syntax>
                        </function>
                        <function id="member_function_IsOpen_FileByteStream_2FDFFDFCA65D0FF034D17B1AAAD7235139A1095C">
                            <name>IsOpen() const</name>
                            <syntax>public nothrow inline bool IsOpen() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Open_FileByteStream_4B07581C99CA524D4BB46F91CA6A0D2EE25F1BD2">
                            <name>Open(const String&lt;char>&amp; filePath, OpenMode openMode)</name>
                            <syntax>public void Open(const String&lt;char>&amp; filePath, OpenMode openMode);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>openMode</name>
                                    <type ref="enumerated_type_OpenMode_063ACAC8B31C29229F5F485205B9D6C7EB9D6810"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Read_FileByteStream_38D0DD0A25D7059AC5F2521D5BE1CC43B5F8C111">
                            <name>Read(byte* buf, long count)</name>
                            <syntax>public override long Read(byte* buf, long count);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.8699087"/>
                                </parameter>
                                <parameter>
                                    <name>count</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_ReadByte_FileByteStream_54AB9146421A7FE5DABEB61EDCAA8BE35DB33918">
                            <name>ReadByte()</name>
                            <syntax>public override int ReadByte();</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_Seek_FileByteStream_D4EEE71F94CCBD0C14FCCDC69A53D78D2A580020">
                            <name>Seek(long pos, Origin origin)</name>
                            <syntax>public override void Seek(long pos, Origin origin);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                                <parameter>
                                    <name>origin</name>
                                    <type ref="enumerated_type_Origin_A770811A120AA0D85B3AD4E90D4A9AF5ADC90D70"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Tell_FileByteStream_5672A01D687DA2B72DA0E0635AFBAEEA20331944">
                            <name>Tell()</name>
                            <syntax>public override long Tell();</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="function_group_Write_0A37E9C0BF7D2C1DE77039018E57D4379FEBB319">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_FileByteStream_C6C2AAFCFD4E06B7ECD656D005C9D01A973ED1D3">
                                    <name>Write(byte x)</name>
                                    <syntax>public override void Write(byte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699067"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_FileByteStream_DD3F9E7577CED3D3AFD13C3B48300615E3B14A6B">
                                    <name>Write(byte* buf, long count)</name>
                                    <syntax>public override void Write(byte* buf, long count);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>buf</name>
                                            <type ref="type.8699087"/>
                                        </parameter>
                                        <parameter>
                                            <name>count</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="move_assignment_op_assign_FileByteStream_DE379FD729C7B3ECB902FAAF2DBF197151DAB71D">
                            <name>operator=(FileByteStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(FileByteStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8700406"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A">
                    <name>FileSystemException</name>
                    <groupName>FileSystemException</groupName>
                    <syntax> public class FileSystemException;</syntax>
                    <baseClass ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                    <constructors>
                        <constructor id="constructor_FileSystemException_0E10B74628849BBEDA9615E53923669F0A0DB677">
                            <name>FileSystemException(const String&lt;char>&amp; message_)</name>
                            <syntax>public nothrow FileSystemException(const String&lt;char>&amp; message_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
                <class id="class_IOBuffer_7AC61842AD3FCA40A4176E0D72E981B672D7E222">
                    <name>IOBuffer</name>
                    <groupName>IOBuffer</groupName>
                    <syntax> public class IOBuffer;</syntax>
                    <constructors>
                        <constructor id="move_constructor_IOBuffer_453CDC5253461D697E0E33A87D5E9177F5635C90">
                            <name>IOBuffer(IOBuffer&amp;&amp; that)</name>
                            <syntax>public nothrow IOBuffer(IOBuffer&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8700374"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_IOBuffer_B543F7FC50F67D2B3A944E23EDC9526BBC474E1D">
                            <name>IOBuffer(long size_)</name>
                            <syntax>public nothrow IOBuffer(long size_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>size_</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Mem_IOBuffer_996BF7317F966ED0127C18F3E362F5BE3EABCC8A">
                            <name>Mem() const</name>
                            <syntax>public nothrow inline void* Mem() const;</syntax>
                            <returnType ref="type.8699217"/>
                        </function>
                        <function id="member_function_Size_IOBuffer_554ABD8BBEF2D56AE5DE7C8001AA8F9F9BD8CDBE">
                            <name>Size() const</name>
                            <syntax>public nothrow inline long Size() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="move_assignment_op_assign_IOBuffer_54A9D09456ABA40EA25F67E2E7EFC2E9F773B000">
                            <name>operator=(IOBuffer&amp;&amp; that)</name>
                            <syntax>public nothrow default void operator=(IOBuffer&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8700374"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_op_index_08F14CACE6DEDD9E5D9E72DAE9453D1A1C63DDE2">
                            <name>operator[]</name>
                            <overloads>
                                <overload id="member_function_op_index_IOBuffer_E0DD9215CA5FC5BC24785E9308C6420A1002B600">
                                    <name>operator[](long index)</name>
                                    <syntax>public nothrow inline byte&amp; operator[](long index);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>index</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699088"/>
                                </overload>
                                <overload id="member_function_op_index_IOBuffer_8B770CF51C05B37CDB6ED63BB2DA73EC88D2E531">
                                    <name>operator[](long index) const</name>
                                    <syntax>public nothrow inline byte operator[](long index) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>index</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699067"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_InputFileStream_D716B24DACCF956B86E85D3953020F7FF92665A3">
                    <name>InputFileStream</name>
                    <groupName>InputFileStream</groupName>
                    <syntax> public class InputFileStream;</syntax>
                    <baseClass ref="class_InputStream_B895ABA4BFD9E6393A7395627FF850EE42AE55EB"/>
                    <constructors>
                        <constructor id="default_constructor_InputFileStream_F69F4295ABA9DB4FE31F575C4D0210031B0CF599">
                            <name>InputFileStream()</name>
                            <syntax>public nothrow InputFileStream();</syntax>
                        </constructor>
                        <constructor id="move_constructor_InputFileStream_B912DD2F7042A7FA1B9973A917C4D21BF70B009C">
                            <name>InputFileStream(InputFileStream&amp;&amp; that)</name>
                            <syntax>public nothrow InputFileStream(InputFileStream&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8700414"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_InputFileStream_B4B632C2CD3D67F5273DB5F2C8ADCBE452CA6D4B">
                            <name>InputFileStream(const String&lt;char>&amp; filePath_)</name>
                            <syntax>public InputFileStream(const String&lt;char>&amp; filePath_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_InputFileStream_7868C0C1357B4800DC263B5B06AD798D39891C54">
                            <name>InputFileStream(const String&lt;char>&amp; filePath_, long bufferSize_)</name>
                            <syntax>public InputFileStream(const String&lt;char>&amp; filePath_, long bufferSize_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>bufferSize_</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_InputFileStream_EAD1EB01063A5AFB32F7B461DDC8570A19DA0858">
                            <name>InputFileStream(const String&lt;char>&amp; filePath_, long bufferSize_, OpenMode openMode_)</name>
                            <syntax>public InputFileStream(const String&lt;char>&amp; filePath_, long bufferSize_, OpenMode openMode_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>bufferSize_</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                                <parameter>
                                    <name>openMode_</name>
                                    <type ref="enumerated_type_OpenMode_063ACAC8B31C29229F5F485205B9D6C7EB9D6810"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_InputFileStream_6A4B860129634600140B6832AD9952ACECB96101">
                            <name>InputFileStream(int fileHandle_)</name>
                            <syntax>public nothrow InputFileStream(int fileHandle_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>fileHandle_</name>
                                    <type ref="type.8699070"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_InputFileStream_777F3062A6453AB1214EA7BEFAE9A3361DC1EB55">
                            <name>InputFileStream(int fileHandle_, long bufferSize_)</name>
                            <syntax>public nothrow InputFileStream(int fileHandle_, long bufferSize_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>fileHandle_</name>
                                    <type ref="type.8699070"/>
                                </parameter>
                                <parameter>
                                    <name>bufferSize_</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Close_InputFileStream_7A332AF93425C02E2489297EAA8F4145E6FE6138">
                            <name>Close()</name>
                            <syntax>public void Close();</syntax>
                        </function>
                        <function id="member_function_EndOfStream_InputFileStream_22132038E3CC6F458831270D1164FE7BB0D3FDC8">
                            <name>EndOfStream() const</name>
                            <syntax>public nothrow override bool EndOfStream() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_FileHandle_InputFileStream_26B2B4315240CF9604FAF4C6E8621BB3B7EC4C3B">
                            <name>FileHandle() const</name>
                            <syntax>public nothrow inline int FileHandle() const;</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_FilePath_InputFileStream_BA3DAE011E62CAE9A945FB9B57E3BBB1693F0359">
                            <name>FilePath() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; FilePath() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                        <function id="member_function_Open_InputFileStream_9FA60BB71E42AC01385ED46C54958462325C6755">
                            <name>Open(const String&lt;char>&amp; filePath_, OpenMode openMode)</name>
                            <syntax>public void Open(const String&lt;char>&amp; filePath_, OpenMode openMode);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>openMode</name>
                                    <type ref="enumerated_type_OpenMode_063ACAC8B31C29229F5F485205B9D6C7EB9D6810"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Opened_InputFileStream_4542C97DEF03B6740583F0F6AB65EFCA15BF8606">
                            <name>Opened() const</name>
                            <syntax>public nothrow inline bool Opened() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Read_InputFileStream_247B0488DD2FC14E4175A8FD79FD9C9825BA8D09">
                            <name>Read()</name>
                            <syntax>public override int Read();</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_ReadLine_InputFileStream_147B56A0CE10C6326F6E1BACBB7054D39896058B">
                            <name>ReadLine()</name>
                            <syntax>public override String&lt;char> ReadLine();</syntax>
                            <returnType ref="type.8700206"/>
                        </function>
                        <function id="member_function_ReadToEnd_InputFileStream_464FA6766B51305CE3AB5CEB2E043BBDDC30020A">
                            <name>ReadToEnd()</name>
                            <syntax>public override String&lt;char> ReadToEnd();</syntax>
                            <returnType ref="type.8700206"/>
                        </function>
                        <function id="move_assignment_op_assign_InputFileStream_5E0662F4D267918E67056707963DD83E95294FE1">
                            <name>operator=(InputFileStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(InputFileStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8700414"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                    <constants>
                        <constant id="constant_defaultBufferSize_7B64991F89249E9B47914DD67D09589E6F266D05">
                            <name>defaultBufferSize</name>
                            <syntax>public const long defaultBufferSize = 4096;</syntax>
                            <type ref="type.8699072"/>
                            <value>4096</value>
                        </constant>
                    </constants>
                </class>
                <class id="class_InputStream_B895ABA4BFD9E6393A7395627FF850EE42AE55EB">
                    <name>InputStream</name>
                    <groupName>InputStream</groupName>
                    <syntax>abstract public class InputStream;</syntax>
                    <constructors>
                        <constructor id="default_constructor_InputStream_7D5649B84C4C91D763347586CD9848423E6B49C8">
                            <name>InputStream()</name>
                            <syntax>public nothrow default InputStream();</syntax>
                        </constructor>
                        <constructor id="move_constructor_InputStream_7027EA0240D5245013841AC728460D7C7DB13593">
                            <name>InputStream(InputStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default InputStream(InputStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8700413"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_EndOfStream_InputStream_1ED62A5082C00BAE3F4982D9A09631A6D4AC0E38">
                            <name>EndOfStream() const</name>
                            <syntax>public nothrow abstract bool EndOfStream() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Read_InputStream_3E924A8C5C07B4DB3929F035B7C89790369DD893">
                            <name>Read()</name>
                            <syntax>public abstract int Read();</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_ReadLine_InputStream_98BB0109EF356D058A3DBE4817DF1AF984A57BE2">
                            <name>ReadLine()</name>
                            <syntax>public abstract String&lt;char> ReadLine();</syntax>
                            <returnType ref="type.8700206"/>
                        </function>
                        <function id="member_function_ReadToEnd_InputStream_ADEBA2FF8EA641934E7FC7A34C6F28693F58D7EB">
                            <name>ReadToEnd()</name>
                            <syntax>public abstract String&lt;char> ReadToEnd();</syntax>
                            <returnType ref="type.8700206"/>
                        </function>
                        <function id="move_assignment_op_assign_InputStream_AF663758DBDB898DA41A882A9DB7AAD2DF24B054">
                            <name>operator=(InputStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(InputStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8700413"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_InputStringStream_5711AC4066734B8F1EDAE3C055CF6DFF3ED3EF8F">
                    <name>InputStringStream</name>
                    <groupName>InputStringStream</groupName>
                    <syntax> public class InputStringStream;</syntax>
                    <baseClass ref="class_InputStream_B895ABA4BFD9E6393A7395627FF850EE42AE55EB"/>
                    <constructors>
                        <constructor id="default_constructor_InputStringStream_E308EE8FCE946794596E4CDAAB2C9A7B674B836C">
                            <name>InputStringStream()</name>
                            <syntax>public nothrow InputStringStream();</syntax>
                        </constructor>
                        <constructor id="move_constructor_InputStringStream_D3FD377194155EA456283921A357D4A60DBC3272">
                            <name>InputStringStream(InputStringStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default InputStringStream(InputStringStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8702998"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_InputStringStream_A78A1756586A4A65B8383DF364AB9C1EA0A0890D">
                            <name>InputStringStream(const String&lt;char>&amp; str_)</name>
                            <syntax>public nothrow InputStringStream(const String&lt;char>&amp; str_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_EndOfStream_InputStringStream_EF0177354F8CBD424E2CA8E3F48C266CD759CD30">
                            <name>EndOfStream() const</name>
                            <syntax>public nothrow override bool EndOfStream() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Read_InputStringStream_35DD009FA6D8F6DE45C1C7E7721D68BC6743E08D">
                            <name>Read()</name>
                            <syntax>public override int Read();</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_ReadLine_InputStringStream_18005D51A30D5E4E6A106F5B0A72D4AFB048D7A0">
                            <name>ReadLine()</name>
                            <syntax>public override String&lt;char> ReadLine();</syntax>
                            <returnType ref="type.8700206"/>
                        </function>
                        <function id="member_function_ReadToEnd_InputStringStream_0FA2E58A37D4A53A755E9FD91743B6B560B76D01">
                            <name>ReadToEnd()</name>
                            <syntax>public override String&lt;char> ReadToEnd();</syntax>
                            <returnType ref="type.8700206"/>
                        </function>
                        <function id="member_function_SetStr_InputStringStream_794243427F33C70B7C8445EDB534AB80B4D72C36">
                            <name>SetStr(const String&lt;char>&amp; str_)</name>
                            <syntax>public nothrow void SetStr(const String&lt;char>&amp; str_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Str_InputStringStream_F20453FF6A5ABB6B23F325073D2BA6DF77FC2D0C">
                            <name>Str() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Str() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                        <function id="move_assignment_op_assign_InputStringStream_7F32901E547BFB5897F63EF38B1D30F75A9E2423">
                            <name>operator=(InputStringStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(InputStringStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8702998"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA">
                    <name>InvalidPathException</name>
                    <groupName>InvalidPathException</groupName>
                    <syntax> public class InvalidPathException;</syntax>
                    <baseClass ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                    <constructors>
                        <constructor id="constructor_InvalidPathException_0009AC36139F3F68F2A657B1F4AD4C2B90F89FD0">
                            <name>InvalidPathException(const String&lt;char>&amp; message_)</name>
                            <syntax>public nothrow InvalidPathException(const String&lt;char>&amp; message_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
                <class id="class_MemoryByteStream_4165F89E3A15BB2E93A82F4868A08724955E8045">
                    <name>MemoryByteStream</name>
                    <groupName>MemoryByteStream</groupName>
                    <syntax> public class MemoryByteStream;</syntax>
                    <baseClass ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
                    <constructors>
                        <constructor id="default_constructor_MemoryByteStream_D4C674712CC0F0B5CDBDD339749D61EE9F48F051">
                            <name>MemoryByteStream()</name>
                            <syntax>public MemoryByteStream();</syntax>
                        </constructor>
                        <constructor id="move_constructor_MemoryByteStream_A312C35CF9E8FB67F61CED06EBB565948213F02F">
                            <name>MemoryByteStream(MemoryByteStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default MemoryByteStream(MemoryByteStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8701679"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_MemoryByteStream_B44F50238BEAF5514E2AFA5CDFD0AEEA6DE03C91">
                            <name>MemoryByteStream(byte* data, long count)</name>
                            <syntax>public MemoryByteStream(byte* data, long count);</syntax>
                            <parameters>
                                <parameter>
                                    <name>data</name>
                                    <type ref="type.8699087"/>
                                </parameter>
                                <parameter>
                                    <name>count</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Count_MemoryByteStream_34040823255DB957F9D719775B10DE8E8A8DE5F9">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_Data_MemoryByteStream_F05CDA4D0E77170FC1ED0DD78C826DD155AC8100">
                            <name>Data() const</name>
                            <syntax>public nothrow inline const byte* Data() const;</syntax>
                            <returnType ref="type.8701680"/>
                        </function>
                        <function id="member_function_Read_MemoryByteStream_A42A980BE289489969C04CD3ADB3A84981C46681">
                            <name>Read(byte* buf, long count)</name>
                            <syntax>public override long Read(byte* buf, long count);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.8699087"/>
                                </parameter>
                                <parameter>
                                    <name>count</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_ReadByte_MemoryByteStream_CE764D2E275BCC21DC474FFECB48B64295BCDB82">
                            <name>ReadByte()</name>
                            <syntax>public override int ReadByte();</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_ReadPos_MemoryByteStream_454693B5F0F9B0671C0CE49608E18B0F1B329F9C">
                            <name>ReadPos() const</name>
                            <syntax>public nothrow inline long ReadPos() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_Seek_MemoryByteStream_68DFFE7C5E531FDB4693E549BFD16E742688DF71">
                            <name>Seek(long pos, Origin origin)</name>
                            <syntax>public override void Seek(long pos, Origin origin);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                                <parameter>
                                    <name>origin</name>
                                    <type ref="enumerated_type_Origin_A770811A120AA0D85B3AD4E90D4A9AF5ADC90D70"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Tell_MemoryByteStream_609680823D00A38FF4F449F36F09C0226814DE55">
                            <name>Tell()</name>
                            <syntax>public override long Tell();</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="function_group_Write_B1B7FFB7EAEFE7D5736049A814054DF8D29C0A3D">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_MemoryByteStream_E30C18DA4B213548A37ED73D0C11B9A636883326">
                                    <name>Write(byte x)</name>
                                    <syntax>public override void Write(byte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699067"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_MemoryByteStream_C74BFD856C29E1AB9BA1BF21842AC003415AB333">
                                    <name>Write(byte* buf, long count)</name>
                                    <syntax>public override void Write(byte* buf, long count);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>buf</name>
                                            <type ref="type.8699087"/>
                                        </parameter>
                                        <parameter>
                                            <name>count</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="move_assignment_op_assign_MemoryByteStream_1A5761A4529DCBCFE74DAC7545678BDFC24B9228">
                            <name>operator=(MemoryByteStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(MemoryByteStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8701679"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_OutputFileStream_329086250911017BCF31063FCD14A24814C228C1">
                    <name>OutputFileStream</name>
                    <groupName>OutputFileStream</groupName>
                    <syntax> public class OutputFileStream;</syntax>
                    <baseClass ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
                    <constructors>
                        <constructor id="default_constructor_OutputFileStream_41DF3A83BF44C6B2A65CAF3A46B255BA115F98B7">
                            <name>OutputFileStream()</name>
                            <syntax>public nothrow OutputFileStream();</syntax>
                        </constructor>
                        <constructor id="move_constructor_OutputFileStream_BD7C043B3B807B427F418CA92BCB14A9FF679811">
                            <name>OutputFileStream(OutputFileStream&amp;&amp; that)</name>
                            <syntax>public nothrow OutputFileStream(OutputFileStream&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8700418"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_OutputFileStream_89EE0264DEF49005BDDC8547D00AEC46881CB07D">
                            <name>OutputFileStream(const String&lt;char>&amp; filePath_)</name>
                            <syntax>public OutputFileStream(const String&lt;char>&amp; filePath_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_OutputFileStream_8AFA770943F4B890C1B99EB8ED98BF6DD43F1B29">
                            <name>OutputFileStream(const String&lt;char>&amp; filePath_, OpenMode openMode)</name>
                            <syntax>public OutputFileStream(const String&lt;char>&amp; filePath_, OpenMode openMode);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>openMode</name>
                                    <type ref="enumerated_type_OpenMode_063ACAC8B31C29229F5F485205B9D6C7EB9D6810"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_OutputFileStream_3B98D3587FC4116AF9E477BA3329BEC3CFD2A668">
                            <name>OutputFileStream(int fileHandle_)</name>
                            <syntax>public nothrow OutputFileStream(int fileHandle_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>fileHandle_</name>
                                    <type ref="type.8699070"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Close_OutputFileStream_A40F48CCBA24D176C51016924FA0A79C12AD4FCF">
                            <name>Close()</name>
                            <syntax>public void Close();</syntax>
                        </function>
                        <function id="member_function_FileHandle_OutputFileStream_6070F44F17B594275A88D2C5174B1CBA57D3F319">
                            <name>FileHandle() const</name>
                            <syntax>public nothrow inline int FileHandle() const;</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_FilePath_OutputFileStream_ACCD766DD86D74ECFAA8E9D42144A3D52C16D9DC">
                            <name>FilePath() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; FilePath() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                        <function id="member_function_Open_OutputFileStream_C3DCEFD24E63E476CF2290EC39BF9A4BE4CB8572">
                            <name>Open(const String&lt;char>&amp; filePath_, OpenMode openMode)</name>
                            <syntax>public void Open(const String&lt;char>&amp; filePath_, OpenMode openMode);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>openMode</name>
                                    <type ref="enumerated_type_OpenMode_063ACAC8B31C29229F5F485205B9D6C7EB9D6810"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Opened_OutputFileStream_5ADCF6AB706B3B1D7B479AFC9FA9F8F6B0438DE8">
                            <name>Opened() const</name>
                            <syntax>public nothrow inline bool Opened() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="function_group_Write_040BD90AADDF6CC373CC000B9EBB47AAED22DE2E">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_OutputFileStream_E07CAD8206FD94D8459A5A1C902FE7F7DFB591A4">
                                    <name>Write(bool b)</name>
                                    <syntax>public override void Write(bool b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.8699065"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_45D2E59511EF932ACDF64517D7A7B4CE883FAE51">
                                    <name>Write(byte b)</name>
                                    <syntax>public override void Write(byte b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.8699067"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_8399C5A438F207289390E71DBD9DCAA977C5576E">
                                    <name>Write(char c)</name>
                                    <syntax>public override void Write(char c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.8699076"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_679C0C4742933D302A974221BAD1AC5978B38189">
                                    <name>Write(const Date&amp; date)</name>
                                    <syntax>public override void Write(const Date&amp; date);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>date</name>
                                            <type ref="type.8699946"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_C73986BCBCC91CA60E7BBAFE1B843B8564ABDD0A">
                                    <name>Write(const DateTime&amp; dateTime)</name>
                                    <syntax>public override void Write(const DateTime&amp; dateTime);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>dateTime</name>
                                            <type ref="type.8699952"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_B9DE3072DF85BA810C6BDA3FCF7893F966D665EF">
                                    <name>Write(const String&lt;char>&amp; s)</name>
                                    <syntax>public override void Write(const String&lt;char>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700211"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_5D8FE40C37AEC66530436A4FF1AC1865BC58C26C">
                                    <name>Write(const String&lt;uchar>&amp; s)</name>
                                    <syntax>public override void Write(const String&lt;uchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700299"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_AB20D07758F4C00AD4064CF6CB62CE6879B62B48">
                                    <name>Write(const String&lt;wchar>&amp; s)</name>
                                    <syntax>public override void Write(const String&lt;wchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700254"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_972276CBEC07BE7E283137484AFDC29E45DACD0D">
                                    <name>Write(const char* s)</name>
                                    <syntax>public override void Write(const char* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699214"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_9525A6BB74DFE154EB90479A70D4C1ABCB2E7980">
                                    <name>Write(const uchar* s)</name>
                                    <syntax>public override void Write(const uchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700301"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_44EC11DAF513D16430D9495CAE8CC031691E76AE">
                                    <name>Write(const wchar* s)</name>
                                    <syntax>public override void Write(const wchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700256"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_93ADE14C88AB2169B5731EAD609757DEF63AF049">
                                    <name>Write(double d)</name>
                                    <syntax>public override void Write(double d);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>d</name>
                                            <type ref="type.8699075"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_994B703E5E8D54BE0F9A8145F4CE8C278D063F38">
                                    <name>Write(float f)</name>
                                    <syntax>public override void Write(float f);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>f</name>
                                            <type ref="type.8699074"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_283FE7905A1EA44A4128FC5E7FFEFA414D3AD79E">
                                    <name>Write(int i)</name>
                                    <syntax>public override void Write(int i);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>i</name>
                                            <type ref="type.8699070"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_51CD7A081C2548F93BA7D250D3843C81B6669B90">
                                    <name>Write(long l)</name>
                                    <syntax>public override void Write(long l);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>l</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_D94FB9738889DBDC7F702479EDEE778217B6D793">
                                    <name>Write(sbyte s)</name>
                                    <syntax>public override void Write(sbyte s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699066"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_736547D4736098C7653F778F55535AFEF3ED9D7E">
                                    <name>Write(short s)</name>
                                    <syntax>public override void Write(short s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699068"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_BC8B945B31D78531C57141272C4C0E422A398438">
                                    <name>Write(uchar c)</name>
                                    <syntax>public override void Write(uchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.8699078"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_221D8F40E71E8FEA7D32EC3D7BA402D224EED2DB">
                                    <name>Write(uint u)</name>
                                    <syntax>public override void Write(uint u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699071"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_19212B37322C0AF2C8243CE669E67EB2F2D3EE3F">
                                    <name>Write(ulong u)</name>
                                    <syntax>public override void Write(ulong u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699073"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_25D09804E1BD7B1DA74C8B67646D5B416D543251">
                                    <name>Write(ushort u)</name>
                                    <syntax>public override void Write(ushort u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699069"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_DB2F61DA6EB19155ED341F61ABBDD97B0FA65383">
                                    <name>Write(wchar c)</name>
                                    <syntax>public override void Write(wchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.8699077"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_WriteLine_1BB327F6ADE3886899C7F36B262B58D09EF229AD">
                            <name>WriteLine</name>
                            <overloads>
                                <overload id="member_function_WriteLine_OutputFileStream_EECA0B198E735B767C83CF0496C2F1E969B60459">
                                    <name>WriteLine()</name>
                                    <syntax>public override void WriteLine();</syntax>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_93BBA84F11EFA118E1B41C1EC0DA232A32195D31">
                                    <name>WriteLine(bool b)</name>
                                    <syntax>public override void WriteLine(bool b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.8699065"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_6DB6D34E924E32B0BAE15D17830129999D436CAF">
                                    <name>WriteLine(byte b)</name>
                                    <syntax>public override void WriteLine(byte b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.8699067"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_8E201B927C807E58B14ACBF6D29943B74CFF2BA7">
                                    <name>WriteLine(char c)</name>
                                    <syntax>public override void WriteLine(char c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.8699076"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_D24550B0691F44930F190DE131C057D3646C821D">
                                    <name>WriteLine(const Date&amp; date)</name>
                                    <syntax>public override void WriteLine(const Date&amp; date);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>date</name>
                                            <type ref="type.8699946"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_662D55B7B75C2C2563A89B8CFCA65B06F6503F62">
                                    <name>WriteLine(const DateTime&amp; dateTime)</name>
                                    <syntax>public override void WriteLine(const DateTime&amp; dateTime);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>dateTime</name>
                                            <type ref="type.8699952"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_AC77016B8D538970A08842242093C214C3F2EBDE">
                                    <name>WriteLine(const String&lt;char>&amp; s)</name>
                                    <syntax>public override void WriteLine(const String&lt;char>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700211"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_84B84B3324838748BBD74399E17DEAA46C03AE33">
                                    <name>WriteLine(const String&lt;uchar>&amp; s)</name>
                                    <syntax>public override void WriteLine(const String&lt;uchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700299"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_AE5832F4E5D6012D09D90CCCA0D68506F9A332C6">
                                    <name>WriteLine(const String&lt;wchar>&amp; s)</name>
                                    <syntax>public override void WriteLine(const String&lt;wchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700254"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_5795630D9948805160B9B97C9061312FB74C7215">
                                    <name>WriteLine(const char* s)</name>
                                    <syntax>public override void WriteLine(const char* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699214"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_5C6AB8A5FFB5F1E410FDE3ED29537BDC349085BE">
                                    <name>WriteLine(const uchar* s)</name>
                                    <syntax>public override void WriteLine(const uchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700301"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_33F11D7948FB498B372BAA347072B4493C2F16C9">
                                    <name>WriteLine(const wchar* s)</name>
                                    <syntax>public override void WriteLine(const wchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700256"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_0AD27FE5AD6D4BE9529ECBD600D38902FBEBD0C1">
                                    <name>WriteLine(double d)</name>
                                    <syntax>public override void WriteLine(double d);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>d</name>
                                            <type ref="type.8699075"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_70CCD9B8FB21BA8F6FC48ED558F1FCDDE3A902CD">
                                    <name>WriteLine(float f)</name>
                                    <syntax>public override void WriteLine(float f);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>f</name>
                                            <type ref="type.8699074"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_EAE090195E4500D6672321E8F085827F35106DDF">
                                    <name>WriteLine(int i)</name>
                                    <syntax>public override void WriteLine(int i);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>i</name>
                                            <type ref="type.8699070"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_B5D58C42083B9BFAF1E7F4C50A47483851856C74">
                                    <name>WriteLine(long l)</name>
                                    <syntax>public override void WriteLine(long l);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>l</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_81966467470FD62EBFFC2013C9EC1DC0B2D78F9F">
                                    <name>WriteLine(sbyte s)</name>
                                    <syntax>public override void WriteLine(sbyte s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699066"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_D05C9B3E0C9ED554AF1A80B4FF619DF6C25E5520">
                                    <name>WriteLine(short s)</name>
                                    <syntax>public override void WriteLine(short s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699068"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_D7DB0B45F46C166BE9E911B61A08B0073FD741B4">
                                    <name>WriteLine(uchar c)</name>
                                    <syntax>public override void WriteLine(uchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.8699078"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_A7A765085691A6465F2CDF7D13F3E1912B6F5DC2">
                                    <name>WriteLine(uint u)</name>
                                    <syntax>public override void WriteLine(uint u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699071"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_937907CEC2221007F2C43F77A8B208997E7AA809">
                                    <name>WriteLine(ulong u)</name>
                                    <syntax>public override void WriteLine(ulong u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699073"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_F33516150A1B7A8D1AC11DA9A8695D080E9C3380">
                                    <name>WriteLine(ushort u)</name>
                                    <syntax>public override void WriteLine(ushort u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699069"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_D7AB0B4BBE44060D5E853E3FBDF89A07B00AABDD">
                                    <name>WriteLine(wchar c)</name>
                                    <syntax>public override void WriteLine(wchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.8699077"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="move_assignment_op_assign_OutputFileStream_FB33B27C7E6C035F64565D166E76FA3805E970FD">
                            <name>operator=(OutputFileStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(OutputFileStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8700418"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452">
                    <name>OutputStream</name>
                    <groupName>OutputStream</groupName>
                    <syntax>abstract public class OutputStream;</syntax>
                    <constructors>
                        <constructor id="default_constructor_OutputStream_9717706E7E516F622EBF564BB05E8D84C42E6449">
                            <name>OutputStream()</name>
                            <syntax>public nothrow default OutputStream();</syntax>
                        </constructor>
                        <constructor id="move_constructor_OutputStream_78D26119EA2468CCD190FA508BE342A5750B255D">
                            <name>OutputStream(OutputStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default OutputStream(OutputStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8700417"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Write_189DB08CED127A1B6274DD212E8644767105EC7C">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_OutputStream_F241FF4731110C8A2FA0401A54B6169129AEAD65">
                                    <name>Write(bool b)</name>
                                    <syntax>public abstract void Write(bool b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.8699065"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_4C79F03EA108188534CBA31771D339DF1E5DE3A9">
                                    <name>Write(byte b)</name>
                                    <syntax>public abstract void Write(byte b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.8699067"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_2AC43272071C47BBC77FD399BB96F6AE663AA0A8">
                                    <name>Write(char c)</name>
                                    <syntax>public abstract void Write(char c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.8699076"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_5250B0CFEAD21196322860725DBDB20363351591">
                                    <name>Write(const Date&amp; date)</name>
                                    <syntax>public abstract void Write(const Date&amp; date);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>date</name>
                                            <type ref="type.8699946"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_70E11395AB807802CC40012718ACCFB213D11DDE">
                                    <name>Write(const DateTime&amp; dateTime)</name>
                                    <syntax>public abstract void Write(const DateTime&amp; dateTime);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>dateTime</name>
                                            <type ref="type.8699952"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_FE237A2CD12AFACC0433DA63E59C8B2EED7EF816">
                                    <name>Write(const String&lt;char>&amp; s)</name>
                                    <syntax>public abstract void Write(const String&lt;char>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700211"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_BCA89A14B38B84F2518D3F334C7C53BDA8310E20">
                                    <name>Write(const String&lt;uchar>&amp; s)</name>
                                    <syntax>public abstract void Write(const String&lt;uchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700299"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_2D93CDA2859CAC0D0B03CF18A57DA0686DF075AF">
                                    <name>Write(const String&lt;wchar>&amp; s)</name>
                                    <syntax>public abstract void Write(const String&lt;wchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700254"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_14381E50002DA57FA60435068EC59336539E4336">
                                    <name>Write(const char* s)</name>
                                    <syntax>public abstract void Write(const char* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699214"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_E5E8FEAE93DE2BEB1C7B1A5565856BA351F8CF0E">
                                    <name>Write(const uchar* s)</name>
                                    <syntax>public abstract void Write(const uchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700301"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_645CD4BB53ADD4FFA6DDBC11122EDD501E45A2AE">
                                    <name>Write(const wchar* s)</name>
                                    <syntax>public abstract void Write(const wchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700256"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_E84F5BF2CE2855E02AA424CFD622630ECFDE366B">
                                    <name>Write(double d)</name>
                                    <syntax>public abstract void Write(double d);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>d</name>
                                            <type ref="type.8699075"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_10BB29CC18D44EB86F582E957118C9925EF27ADA">
                                    <name>Write(float f)</name>
                                    <syntax>public abstract void Write(float f);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>f</name>
                                            <type ref="type.8699074"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_CF5AE02C47D0DADA399E97625AD877CD20296E05">
                                    <name>Write(int i)</name>
                                    <syntax>public abstract void Write(int i);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>i</name>
                                            <type ref="type.8699070"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_084C20C518BB23F8DBB5888683753710F9B9A7F5">
                                    <name>Write(long l)</name>
                                    <syntax>public abstract void Write(long l);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>l</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_CED0AE5CF45015272BB34134D2EB53080E00B9D8">
                                    <name>Write(sbyte s)</name>
                                    <syntax>public abstract void Write(sbyte s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699066"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_263B5DF158BE603ADC3F7615B6E304BD58B26AAD">
                                    <name>Write(short s)</name>
                                    <syntax>public abstract void Write(short s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699068"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_6DC04E8AFDE36F6614CF1F1BFD7CE1FE51255FF3">
                                    <name>Write(uchar c)</name>
                                    <syntax>public abstract void Write(uchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.8699078"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_FD5E635B53DC75C29A751204A7322C674250B9F1">
                                    <name>Write(uint u)</name>
                                    <syntax>public abstract void Write(uint u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699071"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_8ABFE3BF010613E18223C1CF3374D3183EBDBC0F">
                                    <name>Write(ulong u)</name>
                                    <syntax>public abstract void Write(ulong u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699073"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_2710022DCA96CC490A4057F08D2DA0E5AFFD5083">
                                    <name>Write(ushort u)</name>
                                    <syntax>public abstract void Write(ushort u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699069"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_321FA1AB9A790DEBA67BC46C202106CF29B43CF2">
                                    <name>Write(wchar c)</name>
                                    <syntax>public abstract void Write(wchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.8699077"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_WriteLine_40C09EEBF21ABB674DBD23C3173AC7AD906D7C25">
                            <name>WriteLine</name>
                            <overloads>
                                <overload id="member_function_WriteLine_OutputStream_A1C626A588CF5C150737D66E04D529E4BDD75A74">
                                    <name>WriteLine()</name>
                                    <syntax>public abstract void WriteLine();</syntax>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_DBB82ECCC0F44DDC02F8BC30417C12F91ED1C58A">
                                    <name>WriteLine(bool b)</name>
                                    <syntax>public abstract void WriteLine(bool b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.8699065"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_A20B9BD7A5F67A45F48CA30D26E44E62E595603E">
                                    <name>WriteLine(byte b)</name>
                                    <syntax>public abstract void WriteLine(byte b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.8699067"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_E487F80977733522AD5345B22FD5FDD2067353CA">
                                    <name>WriteLine(char c)</name>
                                    <syntax>public abstract void WriteLine(char c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.8699076"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_7060ED70B797BF9AAFA3E8EB459EA72743AF4E49">
                                    <name>WriteLine(const Date&amp; date)</name>
                                    <syntax>public abstract void WriteLine(const Date&amp; date);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>date</name>
                                            <type ref="type.8699946"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_D7A0A48AC2DBDD31CA034840206A38B1E7AC1334">
                                    <name>WriteLine(const DateTime&amp; dateTime)</name>
                                    <syntax>public abstract void WriteLine(const DateTime&amp; dateTime);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>dateTime</name>
                                            <type ref="type.8699952"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_DD08702CFFDA4D40ED5AD6BCA11811782D9462C2">
                                    <name>WriteLine(const String&lt;char>&amp; s)</name>
                                    <syntax>public abstract void WriteLine(const String&lt;char>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700211"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_12D3BFF746EE0551E34567E7BD3486BF5339BDAB">
                                    <name>WriteLine(const String&lt;uchar>&amp; s)</name>
                                    <syntax>public abstract void WriteLine(const String&lt;uchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700299"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_EABCFB9CE867A7B33198944E8CAAD397931C4E5F">
                                    <name>WriteLine(const String&lt;wchar>&amp; s)</name>
                                    <syntax>public abstract void WriteLine(const String&lt;wchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700254"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_4FB0F1757F6B8C2F59A073817EDD001E71AC90AC">
                                    <name>WriteLine(const char* s)</name>
                                    <syntax>public abstract void WriteLine(const char* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699214"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_605965794173F719977C43C40DCBB7EAE752E967">
                                    <name>WriteLine(const uchar* s)</name>
                                    <syntax>public abstract void WriteLine(const uchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700301"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_9521351A816AA02134A4B26D09306276D1BF5B2B">
                                    <name>WriteLine(const wchar* s)</name>
                                    <syntax>public abstract void WriteLine(const wchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700256"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_F469F229CCAEE14D835D19087353D46A310E8582">
                                    <name>WriteLine(double d)</name>
                                    <syntax>public abstract void WriteLine(double d);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>d</name>
                                            <type ref="type.8699075"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_BDECEB1EB819F38921A695A24E873DBA55B4E2E4">
                                    <name>WriteLine(float f)</name>
                                    <syntax>public abstract void WriteLine(float f);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>f</name>
                                            <type ref="type.8699074"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_A783F07F95AAEBC3C6120C3EA20D4DA451562633">
                                    <name>WriteLine(int i)</name>
                                    <syntax>public abstract void WriteLine(int i);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>i</name>
                                            <type ref="type.8699070"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_520C161212D27DC2140677E10AE943E78059890E">
                                    <name>WriteLine(long l)</name>
                                    <syntax>public abstract void WriteLine(long l);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>l</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_F38F53441D2C83BF85C60269EDB0CCF8E3E7E243">
                                    <name>WriteLine(sbyte s)</name>
                                    <syntax>public abstract void WriteLine(sbyte s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699066"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_A1CFDFDA4FB88475B8B65A5F6C41D927DD936761">
                                    <name>WriteLine(short s)</name>
                                    <syntax>public abstract void WriteLine(short s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699068"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_122B46FFEA55338D27C9427ED332CD44958D5B66">
                                    <name>WriteLine(uchar c)</name>
                                    <syntax>public abstract void WriteLine(uchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.8699078"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_4C732656D3B17B032C90CFB603D63E235F050C68">
                                    <name>WriteLine(uint u)</name>
                                    <syntax>public abstract void WriteLine(uint u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699071"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_3FD8E7B119F957AA6E2257066FFA928E6469EF91">
                                    <name>WriteLine(ulong u)</name>
                                    <syntax>public abstract void WriteLine(ulong u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699073"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_E658D2A94A8DD5DC25A755EE3011032DC892AC54">
                                    <name>WriteLine(ushort u)</name>
                                    <syntax>public abstract void WriteLine(ushort u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699069"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_4C64D22BEDDF6DFC90B27A3BA170F3C2402FA13E">
                                    <name>WriteLine(wchar c)</name>
                                    <syntax>public abstract void WriteLine(wchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.8699077"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="move_assignment_op_assign_OutputStream_B4C7791665430951D4B05B8DD50776C069710A09">
                            <name>operator=(OutputStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(OutputStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8700417"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_OutputStringStream_8F218027BFFB6474E691BDF3B8611AF5171C9174">
                    <name>OutputStringStream</name>
                    <groupName>OutputStringStream</groupName>
                    <syntax> public class OutputStringStream;</syntax>
                    <baseClass ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
                    <constructors>
                        <constructor id="default_constructor_OutputStringStream_C3D16FD003F2010C06863EB267EE0F3086C1E608">
                            <name>OutputStringStream()</name>
                            <syntax>public nothrow OutputStringStream();</syntax>
                        </constructor>
                        <constructor id="move_constructor_OutputStringStream_F920A5D954C98A480C95BAB026AD512F5F605027">
                            <name>OutputStringStream(OutputStringStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default OutputStringStream(OutputStringStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8702999"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_OutputStringStream_C0EFF38BBCC371B12D6273F0FCF7E22A93CDBF34">
                            <name>OutputStringStream(const String&lt;char>&amp; str_)</name>
                            <syntax>public nothrow OutputStringStream(const String&lt;char>&amp; str_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_SetStr_OutputStringStream_8B184DEC00128553967C9E939646EF2C26FC5ACF">
                            <name>SetStr(const String&lt;char>&amp; str_)</name>
                            <syntax>public nothrow void SetStr(const String&lt;char>&amp; str_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Str_OutputStringStream_9B4AE16D57AD12C6871283FA13C1A504A02589D9">
                            <name>Str() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Str() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                        <function id="function_group_Write_DDA0B26C940EDAC0307A2199A41F6D562BFFCD81">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_OutputStringStream_29A2E31F6CFEE166DBCC151D2B4F1DEA4BABE403">
                                    <name>Write(bool b)</name>
                                    <syntax>public override void Write(bool b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.8699065"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_F9EDE2E2E47E0E795E3801CAB1CBE2EBFE324426">
                                    <name>Write(byte b)</name>
                                    <syntax>public override void Write(byte b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.8699067"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_47C9D17B1D42A5D294809DDC686BC159FA0E88B2">
                                    <name>Write(char c)</name>
                                    <syntax>public override void Write(char c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.8699076"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_D0ABFB5171B0EC8809ECE46960C924FDB5CD500A">
                                    <name>Write(const Date&amp; date)</name>
                                    <syntax>public override void Write(const Date&amp; date);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>date</name>
                                            <type ref="type.8699946"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_30CCFF72A757BA112477206571D4993F06A919E9">
                                    <name>Write(const DateTime&amp; dateTime)</name>
                                    <syntax>public override void Write(const DateTime&amp; dateTime);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>dateTime</name>
                                            <type ref="type.8699952"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_10D5A005E25639D2A350913A12D293281F3207A2">
                                    <name>Write(const String&lt;char>&amp; s)</name>
                                    <syntax>public override void Write(const String&lt;char>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700211"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_3384B169F360AB4039F3C4349AB2ADAD30E6E59C">
                                    <name>Write(const String&lt;uchar>&amp; s)</name>
                                    <syntax>public override void Write(const String&lt;uchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700299"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_39B78D99712437846F61C478B36B22C1E512F4C5">
                                    <name>Write(const String&lt;wchar>&amp; s)</name>
                                    <syntax>public override void Write(const String&lt;wchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700254"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_D1316C7DA80CE17313888F8A3B0E221E4A6CF077">
                                    <name>Write(const char* s)</name>
                                    <syntax>public override void Write(const char* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699214"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_81D82A9E45E95C3743AF5734B051D9EA491C329B">
                                    <name>Write(const uchar* s)</name>
                                    <syntax>public override void Write(const uchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700301"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_E0CC2A0CD975EB41F02F994A8A0BE6C72548BD7E">
                                    <name>Write(const wchar* s)</name>
                                    <syntax>public override void Write(const wchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700256"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_37A5414BD176A891323B5C6F2D417F2720229AE7">
                                    <name>Write(double d)</name>
                                    <syntax>public override void Write(double d);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>d</name>
                                            <type ref="type.8699075"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_A645C20C15488ED794890239A63251730A0475A7">
                                    <name>Write(float f)</name>
                                    <syntax>public override void Write(float f);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>f</name>
                                            <type ref="type.8699074"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_D8C835A8FBE725F363F5C495E0446DB97E9AEFB5">
                                    <name>Write(int i)</name>
                                    <syntax>public override void Write(int i);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>i</name>
                                            <type ref="type.8699070"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_2AF176EF0DF40024EEB65006149C84572AE468DA">
                                    <name>Write(long l)</name>
                                    <syntax>public override void Write(long l);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>l</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_CD5FBFDFC404D95A2F23CC8043C8667FC8A26652">
                                    <name>Write(sbyte s)</name>
                                    <syntax>public override void Write(sbyte s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699066"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_92D1E8E0514FF044EFE02C3F289431D4976EF73B">
                                    <name>Write(short s)</name>
                                    <syntax>public override void Write(short s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699068"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_572A2135155D3E1E31A6717C0D89723F904CA8C3">
                                    <name>Write(uchar c)</name>
                                    <syntax>public override void Write(uchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.8699078"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_BAC361697C6C20303A78FA97CA6A200B019C151B">
                                    <name>Write(uint u)</name>
                                    <syntax>public override void Write(uint u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699071"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_0F0B7A96E1325C69E16E8F12BDE80A76FCCEF5C1">
                                    <name>Write(ulong u)</name>
                                    <syntax>public override void Write(ulong u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699073"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_C240ACFC3702B22217A41E2B5E7340B5A555BD53">
                                    <name>Write(ushort u)</name>
                                    <syntax>public override void Write(ushort u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699069"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_1CADD06A33D310560BEAD63B5750B631F4F105D9">
                                    <name>Write(wchar c)</name>
                                    <syntax>public override void Write(wchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.8699077"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_WriteLine_45E9BA38BEDF55C2D89BF5D6C2C6D35E89C8600A">
                            <name>WriteLine</name>
                            <overloads>
                                <overload id="member_function_WriteLine_OutputStringStream_62153AED1CAF3A4D2DD867AD44261B6B3E75B34C">
                                    <name>WriteLine()</name>
                                    <syntax>public override void WriteLine();</syntax>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_22CE311F697DB6ED32922BF56AD39589488BF03D">
                                    <name>WriteLine(bool b)</name>
                                    <syntax>public override void WriteLine(bool b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.8699065"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_B1C14F768B651C6A17CBD10EEECAD952E9F0FA0C">
                                    <name>WriteLine(byte b)</name>
                                    <syntax>public override void WriteLine(byte b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.8699067"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_4080EFC70D133C9251BADDA65F1F5CFC63AE1B77">
                                    <name>WriteLine(char c)</name>
                                    <syntax>public override void WriteLine(char c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.8699076"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_0E0EC32B1FF05DDF5AAFFC7DE050B5614B9916E3">
                                    <name>WriteLine(const Date&amp; date)</name>
                                    <syntax>public override void WriteLine(const Date&amp; date);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>date</name>
                                            <type ref="type.8699946"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_8FE6CE3D024C652B6B08EED349FF9CF6E31E0784">
                                    <name>WriteLine(const DateTime&amp; dateTime)</name>
                                    <syntax>public override void WriteLine(const DateTime&amp; dateTime);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>dateTime</name>
                                            <type ref="type.8699952"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_194F3593621CB5073C1F2AFC433D2B686900C741">
                                    <name>WriteLine(const String&lt;char>&amp; s)</name>
                                    <syntax>public override void WriteLine(const String&lt;char>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700211"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_4067A8B3435C642EB52F1C27C796B86792B3C08F">
                                    <name>WriteLine(const String&lt;uchar>&amp; s)</name>
                                    <syntax>public override void WriteLine(const String&lt;uchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700299"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_4DB25202A5271CE5B68E07D4BD1515C2CE322259">
                                    <name>WriteLine(const String&lt;wchar>&amp; s)</name>
                                    <syntax>public override void WriteLine(const String&lt;wchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700254"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_80C1C25F00813E99AA5FAEC76A4DEDC7767DD652">
                                    <name>WriteLine(const char* s)</name>
                                    <syntax>public override void WriteLine(const char* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699214"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_C6AF10A1F7952F8017919A9CEFF06F12CCED25FB">
                                    <name>WriteLine(const uchar* s)</name>
                                    <syntax>public override void WriteLine(const uchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700301"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_01BDAB315C160780AE11F5AC0A616952154FE485">
                                    <name>WriteLine(const wchar* s)</name>
                                    <syntax>public override void WriteLine(const wchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8700256"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_22E282B7621B76BE622E6230A35C87FA0922959D">
                                    <name>WriteLine(double d)</name>
                                    <syntax>public override void WriteLine(double d);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>d</name>
                                            <type ref="type.8699075"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_16379A13B9AA49502A872D575A727B9A293E20B6">
                                    <name>WriteLine(float f)</name>
                                    <syntax>public override void WriteLine(float f);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>f</name>
                                            <type ref="type.8699074"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_D9E98A1E3E13539A4A1E570E8C8BFE0EDC27A4DE">
                                    <name>WriteLine(int i)</name>
                                    <syntax>public override void WriteLine(int i);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>i</name>
                                            <type ref="type.8699070"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_8AA2A463A88077EC6CE5E0CE1A876598C726826C">
                                    <name>WriteLine(long l)</name>
                                    <syntax>public override void WriteLine(long l);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>l</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_5918C0D08C6B974EA3636B47E9A2FD8BBE861B12">
                                    <name>WriteLine(sbyte s)</name>
                                    <syntax>public override void WriteLine(sbyte s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699066"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_6BAB20CB8319B3D8E1D7004B002DFD9B15BABD5D">
                                    <name>WriteLine(short s)</name>
                                    <syntax>public override void WriteLine(short s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.8699068"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_F5DAEEDD5D47B14DE0F4F1EB2B12C9E177B26C30">
                                    <name>WriteLine(uchar c)</name>
                                    <syntax>public override void WriteLine(uchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.8699078"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_A2A5C1C44DE5154D67977EC9C39D96533A393EED">
                                    <name>WriteLine(uint u)</name>
                                    <syntax>public override void WriteLine(uint u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699071"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_1EA95BCA4F5A25539A30F2FC8BFCF491FEF9733B">
                                    <name>WriteLine(ulong u)</name>
                                    <syntax>public override void WriteLine(ulong u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699073"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_BA428FBD6A1EE2BE0D4963B88C87BF7AC75E39F7">
                                    <name>WriteLine(ushort u)</name>
                                    <syntax>public override void WriteLine(ushort u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.8699069"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_580BE7E08BBCE4D9270834B9D19AEF50385E91F8">
                                    <name>WriteLine(wchar c)</name>
                                    <syntax>public override void WriteLine(wchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.8699077"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="move_assignment_op_assign_OutputStringStream_6774B729B1EA2C9F411D3E58876305CACA763BB6">
                            <name>operator=(OutputStringStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(OutputStringStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8702999"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Path_B0E1FFEB70B93FC23B5C8F52471855FFA604AAE2">
                    <name>Path</name>
                    <groupName>Path</groupName>
                    <syntax> public static class Path;</syntax>
                    <staticMemberFunctions>
                        <function id="member_function_ChangeExtension_Path_FE18DB61DE92E21F825C5D138FDD4A726C75DAD5">
                            <name>ChangeExtension(const String&lt;char>&amp; path, const String&lt;char>&amp; extension)</name>
                            <syntax>public static nothrow String&lt;char> ChangeExtension(const String&lt;char>&amp; path, const String&lt;char>&amp; extension);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>extension</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </function>
                        <function id="member_function_Combine_Path_EEE5590F5182CEE3714A9225C9FCFFC05A6B6921">
                            <name>Combine(const String&lt;char>&amp; path1, const String&lt;char>&amp; path2)</name>
                            <syntax>public static nothrow String&lt;char> Combine(const String&lt;char>&amp; path1, const String&lt;char>&amp; path2);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path1</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>path2</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </function>
                        <function id="member_function_GetDirectoryName_Path_0D159749B0A641F90F6DEBEC1C543D2199787AF1">
                            <name>GetDirectoryName(const String&lt;char>&amp; path)</name>
                            <syntax>public static nothrow String&lt;char> GetDirectoryName(const String&lt;char>&amp; path);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </function>
                        <function id="member_function_GetExtension_Path_55BED9B5DA43E33150A50E8B7FF94DF3AB269C55">
                            <name>GetExtension(const String&lt;char>&amp; path)</name>
                            <syntax>public static nothrow String&lt;char> GetExtension(const String&lt;char>&amp; path);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </function>
                        <function id="member_function_GetFileName_Path_D28BB26E9970CF2D0DAD8DD68FAB4EDB431FEBC9">
                            <name>GetFileName(const String&lt;char>&amp; path)</name>
                            <syntax>public static nothrow String&lt;char> GetFileName(const String&lt;char>&amp; path);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </function>
                        <function id="member_function_GetFileNameWithoutExtension_Path_E04D0F05773D663FB286C284C3776D2988B83A28">
                            <name>GetFileNameWithoutExtension(const String&lt;char>&amp; path)</name>
                            <syntax>public static nothrow String&lt;char> GetFileNameWithoutExtension(const String&lt;char>&amp; path);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </function>
                        <function id="member_function_GetParent_Path_A8D66872339722D01C96331356331EEFBD27FA57">
                            <name>GetParent(const String&lt;char>&amp; path)</name>
                            <syntax>public static String&lt;char> GetParent(const String&lt;char>&amp; path);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </function>
                        <function id="member_function_HasExtension_Path_D1659726FDEA62078FFD294D264B739299A88728">
                            <name>HasExtension(const String&lt;char>&amp; path)</name>
                            <syntax>public static nothrow bool HasExtension(const String&lt;char>&amp; path);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_IsAbsolute_Path_5876B9C7624B8A41143795D78464A7ECA8FB2E09">
                            <name>IsAbsolute(const String&lt;char>&amp; path)</name>
                            <syntax>public static nothrow bool IsAbsolute(const String&lt;char>&amp; path);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_IsRelative_Path_A1A23B45BD691E61B6F198FB1A468047548AB6F7">
                            <name>IsRelative(const String&lt;char>&amp; path)</name>
                            <syntax>public static nothrow bool IsRelative(const String&lt;char>&amp; path);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_MakeCanonical_Path_91E7748771C9AB443ABB765C39E339EB93F8BD13">
                            <name>MakeCanonical(const String&lt;char>&amp; path)</name>
                            <syntax>public static nothrow String&lt;char> MakeCanonical(const String&lt;char>&amp; path);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700206"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_StreamReader_8A8267CD81BA8B198AF295474A8CB0B2DFBB7B57">
                    <name>StreamReader</name>
                    <groupName>StreamReader</groupName>
                    <syntax> public class StreamReader;</syntax>
                    <constructors>
                        <constructor id="constructor_StreamReader_6B64F553446E4EE1C81EC31CE778E2C82613A06A">
                            <name>StreamReader(const SharedPtr&lt;System.IO.ByteStream>&amp; stream_)</name>
                            <syntax>public StreamReader(const SharedPtr&lt;System.IO.ByteStream>&amp; stream_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stream_</name>
                                    <type ref="type.8700173"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_ContainedStream_StreamReader_C67528560188EA35C5F890761454431AEDF0C99F">
                            <name>ContainedStream()</name>
                            <syntax>public nothrow const SharedPtr&lt;System.IO.ByteStream>&amp; ContainedStream();</syntax>
                            <returnType ref="type.8700173"/>
                        </function>
                        <function id="member_function_EndOfStream_StreamReader_3E3AFC729107C51A18FF81B227D9C46BBC31044C">
                            <name>EndOfStream() const</name>
                            <syntax>public nothrow inline bool EndOfStream() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Peek_StreamReader_8C7A5A22C2FB3890FA94BAB9735FCA167702A7F6">
                            <name>Peek()</name>
                            <syntax>public int Peek();</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_PutBack_StreamReader_EFDC78F77A20B864B8AF47F2A4F2CCAB6616D63C">
                            <name>PutBack(byte b)</name>
                            <syntax>public void PutBack(byte b);</syntax>
                            <parameters>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.8699067"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Read_StreamReader_E63E627889CCE346F441A3011D212F273219B3C0">
                            <name>Read()</name>
                            <syntax>public int Read();</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_ReadLine_StreamReader_9BF8D209DC6D7233678E4026C4D3AC5000CAE57B">
                            <name>ReadLine()</name>
                            <syntax>public String&lt;char> ReadLine();</syntax>
                            <returnType ref="type.8700206"/>
                        </function>
                        <function id="member_function_ReadToEnd_StreamReader_1BA4CAC8B6B7E8346C8F6A672F32398DC8D4C75C">
                            <name>ReadToEnd()</name>
                            <syntax>public String&lt;char> ReadToEnd();</syntax>
                            <returnType ref="type.8700206"/>
                        </function>
                    </functions>
                </class>
                <class id="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311">
                    <name>StreamWriter</name>
                    <groupName>StreamWriter</groupName>
                    <syntax> public class StreamWriter;</syntax>
                    <constructors>
                        <constructor id="constructor_StreamWriter_95F84A8F273481D7A8A7CE9502247F1419E8E52D">
                            <name>StreamWriter(const SharedPtr&lt;System.IO.ByteStream>&amp; stream_)</name>
                            <syntax>public StreamWriter(const SharedPtr&lt;System.IO.ByteStream>&amp; stream_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stream_</name>
                                    <type ref="type.8700173"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_ContainedStream_StreamWriter_4AD13E5983537E1E684C039EE31A906AF00744B0">
                            <name>ContainedStream()</name>
                            <syntax>public nothrow const SharedPtr&lt;System.IO.ByteStream>&amp; ContainedStream();</syntax>
                            <returnType ref="type.8700173"/>
                        </function>
                        <function id="function_group_Write_8BECC84DD5658E296AB514BC09DB81E96EA0FB39">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_StreamWriter_D2A66AEDCEA497F515FAE04AB18828BB039E01DD">
                                    <name>Write(bool x)</name>
                                    <syntax>public void Write(bool x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699065"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_38AF5B0A23895CB4E29F32F8ADCDC1A5FDE335D1">
                                    <name>Write(byte x)</name>
                                    <syntax>public void Write(byte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699067"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_0A47768C17FA67E242B8248611F55650E56275BC">
                                    <name>Write(char x)</name>
                                    <syntax>public void Write(char x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699076"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_B0E4121CD2ED2759C2F8F828B9DC5821D9DE25F2">
                                    <name>Write(const Date&amp; date)</name>
                                    <syntax>public void Write(const Date&amp; date);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>date</name>
                                            <type ref="type.8699946"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_FB2F537EB189EC439D0BC25C15B6B423D4CBCF7A">
                                    <name>Write(const DateTime&amp; dateTime)</name>
                                    <syntax>public void Write(const DateTime&amp; dateTime);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>dateTime</name>
                                            <type ref="type.8699952"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_249840F2D046BE08B90C0342C45A6BB510E4DE04">
                                    <name>Write(const String&lt;char>&amp; x)</name>
                                    <syntax>public void Write(const String&lt;char>&amp; x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8700211"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_53DF96F315C1740810336E90699947E778760FC1">
                                    <name>Write(const String&lt;uchar>&amp; x)</name>
                                    <syntax>public void Write(const String&lt;uchar>&amp; x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8700299"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_71CF56BBA74FEB1CA12A93DFBE276B145468BE1E">
                                    <name>Write(const String&lt;wchar>&amp; x)</name>
                                    <syntax>public void Write(const String&lt;wchar>&amp; x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8700254"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_2741C0A3486A72D86314F83734582D50A22D13AE">
                                    <name>Write(double x)</name>
                                    <syntax>public void Write(double x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699075"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_774057BFB3E7A423B44F86F345F65A451E9BFED7">
                                    <name>Write(float x)</name>
                                    <syntax>public void Write(float x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699074"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_665F21B950E9D3AA500F6A24DEF297E7336B37EC">
                                    <name>Write(int x)</name>
                                    <syntax>public void Write(int x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699070"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_42A6549E4D379FF2719C7EE0F9313746BE75228A">
                                    <name>Write(long x)</name>
                                    <syntax>public void Write(long x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_F2FD62855077EB9EE7D25F2E5087B2DF7D41EB5D">
                                    <name>Write(sbyte x)</name>
                                    <syntax>public void Write(sbyte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699066"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_48F761195F844F347078E95240ED18BAF6D3D6ED">
                                    <name>Write(short x)</name>
                                    <syntax>public void Write(short x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699068"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_0C0983C74E8D690D8753B38BA639941344A4AFAB">
                                    <name>Write(uchar x)</name>
                                    <syntax>public void Write(uchar x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699078"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_84C891A5C34ACEFCCC1328E23360487455902198">
                                    <name>Write(uint x)</name>
                                    <syntax>public void Write(uint x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699071"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_BDDA4644BB455563840018358D66B0D68C3C17E4">
                                    <name>Write(ulong x)</name>
                                    <syntax>public void Write(ulong x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699073"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_D869E70689BB6A96B3228C22EE874F249E0D2A1E">
                                    <name>Write(ushort x)</name>
                                    <syntax>public void Write(ushort x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699069"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_3D855801B36797EEAE5AE2FE1E6F5C3A3E193DBA">
                                    <name>Write(wchar x)</name>
                                    <syntax>public void Write(wchar x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699077"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_WriteLine_6950F7E675C051EC270B972404A66B7034259903">
                            <name>WriteLine</name>
                            <overloads>
                                <overload id="member_function_WriteLine_StreamWriter_02277B0E0CBE686C10F1C56FCD88DA95CB7F843A">
                                    <name>WriteLine()</name>
                                    <syntax>public void WriteLine();</syntax>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_C402DD27FA22A9C2E58A12C19A60CCB50394CAC8">
                                    <name>WriteLine(bool x)</name>
                                    <syntax>public void WriteLine(bool x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699065"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_2DFA11DDD580C50B4F6F0A10C72CDF59030F4B98">
                                    <name>WriteLine(byte x)</name>
                                    <syntax>public void WriteLine(byte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699067"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_16CF24B9AFB52CC0632A2F271AA5AEDB29C3426D">
                                    <name>WriteLine(const Date&amp; date)</name>
                                    <syntax>public void WriteLine(const Date&amp; date);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>date</name>
                                            <type ref="type.8699946"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_3F1A03013D1967975958627219AC824D4DF04C5F">
                                    <name>WriteLine(const DateTime&amp; dateTime)</name>
                                    <syntax>public void WriteLine(const DateTime&amp; dateTime);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>dateTime</name>
                                            <type ref="type.8699952"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_CFF900998268ED1A8C9BF55CC5FC1A783558AAAD">
                                    <name>WriteLine(const String&lt;char>&amp; x)</name>
                                    <syntax>public void WriteLine(const String&lt;char>&amp; x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8700211"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_E8AE4BD042726A48AA28F0FDABECDC7151D3AAE4">
                                    <name>WriteLine(const String&lt;uchar>&amp; x)</name>
                                    <syntax>public void WriteLine(const String&lt;uchar>&amp; x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8700299"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_C2566BE23186EC2B6D438BED89827350FBEAABC2">
                                    <name>WriteLine(const String&lt;wchar>&amp; x)</name>
                                    <syntax>public void WriteLine(const String&lt;wchar>&amp; x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8700254"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_D983E4ACCCB831507F1DA13E6E6595288C5543BD">
                                    <name>WriteLine(double x)</name>
                                    <syntax>public void WriteLine(double x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699075"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_00F560CB0695CD8AA61057084EBC7929B83E1A01">
                                    <name>WriteLine(float x)</name>
                                    <syntax>public void WriteLine(float x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699074"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_B9E54AC6F4BE4B388C0D56D16CF498F9439DED9C">
                                    <name>WriteLine(int x)</name>
                                    <syntax>public void WriteLine(int x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699070"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_F72F3648CEF6DE1BBDDA2557832D4E86A2BDEB1F">
                                    <name>WriteLine(long x)</name>
                                    <syntax>public void WriteLine(long x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699072"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_5E77C580C0317CB662C40A33CF207FD8E29E8EAC">
                                    <name>WriteLine(sbyte x)</name>
                                    <syntax>public void WriteLine(sbyte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699066"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_88754B0DEDFAAF768236A884222812B70872256C">
                                    <name>WriteLine(short x)</name>
                                    <syntax>public void WriteLine(short x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699068"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_A1FBDAD503A0A55DCEAB5C8689FFFCC00AA45016">
                                    <name>WriteLine(uint x)</name>
                                    <syntax>public void WriteLine(uint x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699071"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_3757E6DF2F30E22A7F24947C61884A4AB1B037F9">
                                    <name>WriteLine(ulong x)</name>
                                    <syntax>public void WriteLine(ulong x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699073"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_575A1D3F7FCCBAEC78BF2D58297EA1ADEF6CC49B">
                                    <name>WriteLine(ushort x)</name>
                                    <syntax>public void WriteLine(ushort x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.8699069"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_GetCurrentWorkingDirectory_7FA9437AAFDD635DC36B66889EE1103E39DB168E">
                    <name>GetCurrentWorkingDirectory()</name>
                    <syntax>public String&lt;char> GetCurrentWorkingDirectory();</syntax>
                    <returnType ref="type.8700206"/>
                </function>
                <function id="function_GetFullPath_EEDC0F2DAF1CAE05BDA99910401713E2A0C46CB4">
                    <name>GetFullPath(const String&lt;char>&amp; path)</name>
                    <syntax>public String&lt;char> GetFullPath(const String&lt;char>&amp; path);</syntax>
                    <parameters>
                        <parameter>
                            <name>path</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700206"/>
                </function>
                <function id="function_ReadFile_B82E086686961755A9DC0B74A89A1D4129431B92">
                    <name>ReadFile(const String&lt;char>&amp; filePath)</name>
                    <syntax>public String&lt;char> ReadFile(const String&lt;char>&amp; filePath);</syntax>
                    <parameters>
                        <parameter>
                            <name>filePath</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700206"/>
                </function>
                <function id="function_group_op_shl_247FCBBC20E82D4A1D0D55C77A382CB9751F0C4C">
                    <name>operator&lt;&lt;</name>
                    <overloads>
                        <overload id="function_op_shl_F5A9436710D9E3BB22E14E8E995CCABF892C87A6">
                            <name>operator&lt;&lt;(OutputStream&amp; s, bool x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, bool x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_62754DB9C59BA5429BFE531B16CE1A7261206044">
                            <name>operator&lt;&lt;(OutputStream&amp; s, byte x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, byte x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699067"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_31FA515175D7E4EC3B71904ADBA56D0090FA7732">
                            <name>operator&lt;&lt;(OutputStream&amp; s, char x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, char x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699076"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_7B28E193E8389F87168C44B68E78DD2E329560F3">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const Date&amp; date)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const Date&amp; date);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>date</name>
                                    <type ref="type.8699946"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_18BBC67E67DC91AD02E3A722CC6E41E49468E13D">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const DateTime&amp; dateTime)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const DateTime&amp; dateTime);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>dateTime</name>
                                    <type ref="type.8699952"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_BB8970546F6C94A65B533B4538B8653882BB5CC4">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const Endl&amp; @p1)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const Endl&amp; @p1);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>@p1</name>
                                    <type ref="type.8702668"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_49892595972A7B033E1CECAFA86D8AFB4CA05757">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const String&lt;char>&amp; x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const String&lt;char>&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_EEF147124B24E3190EA9B8A49BC78146B179FC2B">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const String&lt;uchar>&amp; x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const String&lt;uchar>&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_C190C73F4712864327307E6C54FFC83EECEFDF57">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const String&lt;wchar>&amp; x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const String&lt;wchar>&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8700254"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_8B9C77002F9310427D2D2FD37D3335703C024074">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const char* x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const char* x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699214"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_1DCB89EAF22CF381018DA9F66F790498ADF5E452">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const uchar* x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const uchar* x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8700301"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_4E5017C76B162064D2EAF11A92D51EAC40489B5F">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const wchar* x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const wchar* x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8700256"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_AE9443E4627A138D220FFA50E2EFDB80D89D4217">
                            <name>operator&lt;&lt;(OutputStream&amp; s, double x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, double x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699075"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_4F9AB5F8DEA9E94762AE50D43A58944EFC08073B">
                            <name>operator&lt;&lt;(OutputStream&amp; s, float x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, float x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699074"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_DEABD1B6DC1CB605B5A503CA43A4E05CBB7DBE69">
                            <name>operator&lt;&lt;(OutputStream&amp; s, int x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, int x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699070"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_6D9D91D6E907C2FEEE5D6D786B550ECE9EBD2351">
                            <name>operator&lt;&lt;(OutputStream&amp; s, long x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, long x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_9327BF1AC396F8396C037B5416DF2256F0C5DA3E">
                            <name>operator&lt;&lt;(OutputStream&amp; s, sbyte x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, sbyte x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699066"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_096EFD72E9EF7C22D4B36DE53A21D33B6BD126E6">
                            <name>operator&lt;&lt;(OutputStream&amp; s, short x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, short x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699068"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_620F811676CBD8561C828EF292446BA6D028229A">
                            <name>operator&lt;&lt;(OutputStream&amp; s, uchar x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, uchar x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699078"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_7ABC9434B961059FD22ABBF578E8CA001D0EA66D">
                            <name>operator&lt;&lt;(OutputStream&amp; s, uint x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, uint x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699071"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_4969CA354E16A3D540C5A3D6C3481DCFDE45E380">
                            <name>operator&lt;&lt;(OutputStream&amp; s, ulong x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, ulong x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699073"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_26E7D2DE7417885151B17F2CB02D4C9180C76F5A">
                            <name>operator&lt;&lt;(OutputStream&amp; s, ushort x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, ushort x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699069"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_B22A6F11B5FAE2FD77F34A5D3E68FE0AB096736B">
                            <name>operator&lt;&lt;(OutputStream&amp; s, wchar x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, wchar x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.8699882"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699077"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699882"/>
                        </overload>
                        <overload id="function_op_shl_D9A1F019B44DAFB0E932F2BA7EA5C8A787B9CB83">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, bool x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, bool x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_4D3846DBD896094E14A16E4BACC74700D4572C7D">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, byte x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, byte x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699067"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_4B54118999F65B3800E5BAD1DE6978D8E5641C06">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, char x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, char x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699076"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_61A8F373785822C1644F1CB6005B22E9AE1C4170">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, const Date&amp; date)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, const Date&amp; date);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>date</name>
                                    <type ref="type.8699946"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_19F5AEDB5E45057BCC37C28221F606192EBAD206">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, const DateTime&amp; dateTime)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, const DateTime&amp; dateTime);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>dateTime</name>
                                    <type ref="type.8699952"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_9BBA8452586C0681B0A4496966F6A93DCC551076">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, const Endl&amp; @p1)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, const Endl&amp; @p1);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>@p1</name>
                                    <type ref="type.8702668"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_86F55C213033D1D97AA0D2FC34B913DE9429256A">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, const String&lt;char>&amp; x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, const String&lt;char>&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_3D3727FF26D2692BCDB7B8E9CEA53713ADBC44C5">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, const String&lt;uchar>&amp; x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, const String&lt;uchar>&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_848F340C989F6BBDFE6CBED712C845EBDCAA1232">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, const String&lt;wchar>&amp; x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, const String&lt;wchar>&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8700254"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_E86F54506381B02C312495685926A9A2510C6E1F">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, const char* x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, const char* x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699214"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_4272649BFA3A0B33FF5421AEDF485EA46EF645D3">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, const uchar* x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, const uchar* x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8700301"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_82EE30F656E5F74C5B48713020F8EBB566A1ABC5">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, const wchar* x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, const wchar* x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8700256"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_B7318A7FA41417D7483A2A86043148955866EF61">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, double x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, double x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699075"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_21EC78A58239FE686E7F57C739CEE534793303FF">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, float x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, float x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699074"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_B69EDB12D9A0000383619DED851110927159B426">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, int x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, int x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699070"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_311839DD2E039D702F3D2164F42D9B7DF5D92F6B">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, long x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, long x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_124FBE5B8083D15A3E6E62EDF3C6874594E59683">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, sbyte x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, sbyte x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699066"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_93C5DCCC82E5A157EFFCD78B14E04D4E0D2136BB">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, short x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, short x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699068"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_0F476BCCE532F036AA0E11DDBED2719754CD5B93">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, uchar x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, uchar x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699078"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_C16971E0C9953DFC9C2648CBC1B4A77D09EA20FE">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, uint x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, uint x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699071"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_A742CA859C7B34E9AECFDAC342EF28F427D182C1">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, ulong x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, ulong x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699073"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_203D9BE14A430F3053BBDBF1AD376DF5318C8C7C">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, ushort x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, ushort x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699069"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                        <overload id="function_op_shl_82BD5F39804AF6731E39C48D25A5353E509B3CA8">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, wchar x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, wchar x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.8699077"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699894"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_eq_EBB17CA8688213EE7E8C8D69B32D7CB0409C07D2">
                    <name>operator==</name>
                    <overloads>
                        <overload id="function_op_eq_7BBB08801CDC6235D21297AFE8841A5899D74E3E">
                            <name>operator==(OpenMode left, OpenMode right)</name>
                            <syntax>public bool operator==(OpenMode left, OpenMode right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_OpenMode_063ACAC8B31C29229F5F485205B9D6C7EB9D6810"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_OpenMode_063ACAC8B31C29229F5F485205B9D6C7EB9D6810"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_C373AEE7FDD24C09591B30AC15C107CEC04A65DA">
                            <name>operator==(Origin left, Origin right)</name>
                            <syntax>public bool operator==(Origin left, Origin right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_Origin_A770811A120AA0D85B3AD4E90D4A9AF5ADC90D70"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_Origin_A770811A120AA0D85B3AD4E90D4A9AF5ADC90D70"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
            </functions>
            <constants>
                <constant id="constant_stderr_9DE5B6DBCF427EE0C5DD7EF7F46F93B07C723B43">
                    <name>stderr</name>
                    <syntax>public const int stderr = 2;</syntax>
                    <type ref="type.8699070"/>
                    <value>2</value>
                </constant>
                <constant id="constant_stdin_FC41BF1330DD6025803C52F62CB1FBA3A97CD884">
                    <name>stdin</name>
                    <syntax>public const int stdin = 0;</syntax>
                    <type ref="type.8699070"/>
                    <value>0</value>
                </constant>
                <constant id="constant_stdout_B587483058DC45B1ABF1C9DDEB7EF3E8286B2CAF">
                    <name>stdout</name>
                    <syntax>public const int stdout = 1;</syntax>
                    <type ref="type.8699070"/>
                    <value>1</value>
                </constant>
            </constants>
            <enumerations>
                <enumeration id="enumerated_type_OpenMode_063ACAC8B31C29229F5F485205B9D6C7EB9D6810">
                    <name>OpenMode</name>
                    <syntax>public enum OpenMode;</syntax>
                    <underlyingType ref="type.8699067"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>read</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>write</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>append</name>
                        <value>4u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>binary</name>
                        <value>8u</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="enumerated_type_Origin_A770811A120AA0D85B3AD4E90D4A9AF5ADC90D70">
                    <name>Origin</name>
                    <syntax>public enum Origin;</syntax>
                    <underlyingType ref="type.8699067"/>
                    <enumConstant>
                        <name>seekSet</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>seekCur</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>seekEnd</name>
                        <value>2u</value>
                    </enumConstant>
                </enumeration>
            </enumerations>
        </namespace>
        <namespace id="System.Meta">
            <name>System.Meta</name>
            <functions>
                <function id="function_ArrayLength_123671BFA0878E74F1DEFC1EC94AB2502E69D91C">
                    <name>ArrayLength&lt;T>()</name>
                    <syntax>public long ArrayLength&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="37">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699072"/>
                </function>
                <function id="function_IsArrayType_774A544CB0D063F0ED6EC9796E1B743F793CBF70">
                    <name>IsArrayType&lt;T>()</name>
                    <syntax>public bool IsArrayType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="33">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsBasicType_49AE46CD9077E29859B95E5BD0AD9BA2113EB069">
                    <name>IsBasicType&lt;T>()</name>
                    <syntax>public bool IsBasicType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="7">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsBoolType_3FD9B4101B5D7927722DF4D3F94EC6F77C569241">
                    <name>IsBoolType&lt;T>()</name>
                    <syntax>public bool IsBoolType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="8">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsByteType_73B0C93D8E2C44691C5115DF08D8D41248FEA4C6">
                    <name>IsByteType&lt;T>()</name>
                    <syntax>public bool IsByteType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="10">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsCharType_876BBD68F05D1BCA500406CBC5C13B30EE59378B">
                    <name>IsCharType&lt;T>()</name>
                    <syntax>public bool IsCharType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="19">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsClassDelegateType_70E8BD495AE01537C8C5797CD4A7826B8DAB468D">
                    <name>IsClassDelegateType&lt;T>()</name>
                    <syntax>public bool IsClassDelegateType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="27">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsClassType_C93FE07E73CA46623BAF2C3FF3F6732CC1F0A629">
                    <name>IsClassType&lt;T>()</name>
                    <syntax>public bool IsClassType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="23">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsConstType_37C1AF38CE1EE8B35133086F259FEDC537F4E7E8">
                    <name>IsConstType&lt;T>()</name>
                    <syntax>public bool IsConstType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="29">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsDelegateType_48E956EA6C389E92F9603CB97B5F8EDCB7BE2995">
                    <name>IsDelegateType&lt;T>()</name>
                    <syntax>public bool IsDelegateType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="26">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsDoubleType_C123B143FB621E7EF2EEF50C13CDC85D906609CF">
                    <name>IsDoubleType&lt;T>()</name>
                    <syntax>public bool IsDoubleType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="18">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsEnumeratedType_31F8CFDACD5875B1343F868FD13EB73DBFC9F4F5">
                    <name>IsEnumeratedType&lt;T>()</name>
                    <syntax>public bool IsEnumeratedType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="28">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsFloatType_7AAA48F2BFCBC7D24B5D4406B4A654AE3C297B7B">
                    <name>IsFloatType&lt;T>()</name>
                    <syntax>public bool IsFloatType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="17">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsFloatingPointType_8356784EB64EB3E195AAB124FA3338E5E9158A59">
                    <name>IsFloatingPointType&lt;T>()</name>
                    <syntax>public bool IsFloatingPointType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="6">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsGenericPtrType_1ECE27124D2238AC0F2FD0F07B111E56966A1364">
                    <name>IsGenericPtrType&lt;T>()</name>
                    <syntax>public bool IsGenericPtrType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="35">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsIntType_E6B0A5B2164373E2DA4BA0C3E59439886A9552A4">
                    <name>IsIntType&lt;T>()</name>
                    <syntax>public bool IsIntType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="13">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsIntegralType_6E8707E326EEBC08EFAE8E0DBC7CA191DF2BCFD1">
                    <name>IsIntegralType&lt;T>()</name>
                    <syntax>public bool IsIntegralType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="3">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsInterfaceType_DC73AEA9C1A23FF45CC45529160A3934F0408AF8">
                    <name>IsInterfaceType&lt;T>()</name>
                    <syntax>public bool IsInterfaceType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="25">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsLongType_86BE6E454E42BDE475EB25EB47968B07B0EC9B91">
                    <name>IsLongType&lt;T>()</name>
                    <syntax>public bool IsLongType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="15">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsLvalueReferenceType_8BAD27EAD0399DD5E49FE8A7234BBDFCBA4D7731">
                    <name>IsLvalueReferenceType&lt;T>()</name>
                    <syntax>public bool IsLvalueReferenceType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="31">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsPointerType_910C23DEA0114C3239970D7E394BDD71B5D1C03B">
                    <name>IsPointerType&lt;T>()</name>
                    <syntax>public bool IsPointerType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="34">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsPolymorphicType_3AAC9ABAF2FC6877003A4F4F0BB5B8B80E815D65">
                    <name>IsPolymorphicType&lt;T>()</name>
                    <syntax>public bool IsPolymorphicType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="24">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsReferenceType_A1AA9E0DAF7C8AAC7CBCE2A5CAC277D1E89479E2">
                    <name>IsReferenceType&lt;T>()</name>
                    <syntax>public bool IsReferenceType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="30">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsRvalueReferenceType_F150AA0D8E743DC80057B45FDA85376D717C2A27">
                    <name>IsRvalueReferenceType&lt;T>()</name>
                    <syntax>public bool IsRvalueReferenceType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="32">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsSByteType_814BB5AE55A62B1F820F68A3D75C96768467910E">
                    <name>IsSByteType&lt;T>()</name>
                    <syntax>public bool IsSByteType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="9">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsShortType_F6A3DF1669F207A011AF5F854D16CAC5C8390A29">
                    <name>IsShortType&lt;T>()</name>
                    <syntax>public bool IsShortType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="11">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsSignedType_0B9DF1B7D3A2F5009A261A4B11849E60870D1728">
                    <name>IsSignedType&lt;T>()</name>
                    <syntax>public bool IsSignedType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="4">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsUCharType_82841786A18BBA1C032694732C31A1985421841E">
                    <name>IsUCharType&lt;T>()</name>
                    <syntax>public bool IsUCharType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="21">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsUIntType_DDE83DEC562C840B60E0ED457B8517A6D3965550">
                    <name>IsUIntType&lt;T>()</name>
                    <syntax>public bool IsUIntType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="14">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsULongType_AD4DDCA3C2914F62259F2BA0356A5829D7DF5AB4">
                    <name>IsULongType&lt;T>()</name>
                    <syntax>public bool IsULongType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="16">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsUShortType_8090488C3745F77FF0119A8E89ED347B89E49E4B">
                    <name>IsUShortType&lt;T>()</name>
                    <syntax>public bool IsUShortType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="12">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsUnsignedType_AB269006A70EE531EA94FC1547E3F385C1304C4E">
                    <name>IsUnsignedType&lt;T>()</name>
                    <syntax>public bool IsUnsignedType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="5">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsVoidType_F8E12CFFE3DFC995049980016030C9C70EE0520D">
                    <name>IsVoidType&lt;T>()</name>
                    <syntax>public bool IsVoidType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="22">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_IsWCharType_9D156D939B1C8395D75DD4053F5F068542AA78CD">
                    <name>IsWCharType&lt;T>()</name>
                    <syntax>public bool IsWCharType&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="20">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_PointerCount_2B0E2F8EA25D4C9C72238164A56EB5E57F63986E">
                    <name>PointerCount&lt;T>()</name>
                    <syntax>public int PointerCount&lt;T>();</syntax>
                    <templateParameters>
                        <templateParameter id="36">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <returnType ref="type.8699070"/>
                </function>
            </functions>
        </namespace>
        <namespace id="System.Text">
            <name>System.Text</name>
            <classes>
                <class id="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99">
                    <name>CodeFormatter</name>
                    <groupName>CodeFormatter</groupName>
                    <syntax> public class CodeFormatter;</syntax>
                    <constructors>
                        <constructor id="constructor_CodeFormatter_6A0AA15ED8227D7699C9DC4FFFD1615FA363C4F7">
                            <name>CodeFormatter(StreamWriter&amp; writer_)</name>
                            <syntax>public nothrow CodeFormatter(StreamWriter&amp; writer_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer_</name>
                                    <type ref="type.8699894"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AtBeginningOfLine_CodeFormatter_10D4FE026ECF215300D601523D92AECD3ED0F9B5">
                            <name>AtBeginningOfLine() const</name>
                            <syntax>public nothrow inline bool AtBeginningOfLine() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_CurrentIndent_CodeFormatter_E3F672BA905741350712FA931EBB98F3C8EBE055">
                            <name>CurrentIndent() const</name>
                            <syntax>public nothrow inline int CurrentIndent() const;</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_DecIndent_CodeFormatter_1E275319B540B72A042CB98221DCD273236EDDEA">
                            <name>DecIndent()</name>
                            <syntax>public nothrow inline void DecIndent();</syntax>
                        </function>
                        <function id="member_function_IncIndent_CodeFormatter_700FA7F3DA093C6C7D42FD96059EB58C25A33A96">
                            <name>IncIndent()</name>
                            <syntax>public nothrow inline void IncIndent();</syntax>
                        </function>
                        <function id="member_function_Indent_CodeFormatter_1797AE4C80C2CD52F6071B67C58FF55A02BD5351">
                            <name>Indent() const</name>
                            <syntax>public nothrow inline int Indent() const;</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_IndentSize_CodeFormatter_63F8C224DF59C7E062FF80EA995CB31D253E9D90">
                            <name>IndentSize() const</name>
                            <syntax>public nothrow inline int IndentSize() const;</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_Line_CodeFormatter_61E916FB9A539360198669B1E0CAACF27343BC10">
                            <name>Line() const</name>
                            <syntax>public nothrow inline int Line() const;</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_SetIndentSize_CodeFormatter_9CD18377944093FDAFF1B2C8F3BF1553F331AAF4">
                            <name>SetIndentSize(int indentSize_)</name>
                            <syntax>public nothrow inline void SetIndentSize(int indentSize_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>indentSize_</name>
                                    <type ref="type.8699070"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetLine_CodeFormatter_CEEE9D901342959F057D350AB9F7EE215898FE85">
                            <name>SetLine(int line_)</name>
                            <syntax>public nothrow inline void SetLine(int line_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>line_</name>
                                    <type ref="type.8699070"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetStart_CodeFormatter_4C0A364CCA324A3AA9418DBA2AC7FBA21A32C097">
                            <name>SetStart(bool start_)</name>
                            <syntax>public nothrow inline void SetStart(bool start_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>start_</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetStartText_CodeFormatter_F0BC84141919AA2DD45E3CF267089EECCD6AD435">
                            <name>SetStartText(const String&lt;char>&amp; startText_)</name>
                            <syntax>public nothrow void SetStartText(const String&lt;char>&amp; startText_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>startText_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Start_CodeFormatter_BC0E85B1E773C5E1111126D827A2621A0FF8A3C2">
                            <name>Start() const</name>
                            <syntax>public nothrow inline bool Start() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_StartText_CodeFormatter_A3190950E203FAE043177B7FE30E6ED239E37BB2">
                            <name>StartText() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; StartText() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                        <function id="member_function_Write_CodeFormatter_F2F2C62C0BE332761BAFA24ED67EF6898951346E">
                            <name>Write(const String&lt;char>&amp; text)</name>
                            <syntax>public void Write(const String&lt;char>&amp; text);</syntax>
                            <parameters>
                                <parameter>
                                    <name>text</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_WriteLine_5212623D88BD0ECF52F17733B1EFFEC593B6D03C">
                            <name>WriteLine</name>
                            <overloads>
                                <overload id="member_function_WriteLine_CodeFormatter_7C6105DB34DDB1A1431C51E81B6154B67C5E4432">
                                    <name>WriteLine()</name>
                                    <syntax>public void WriteLine();</syntax>
                                </overload>
                                <overload id="member_function_WriteLine_CodeFormatter_8E0C859095312D56953D79A5DE9FED23AAB3076B">
                                    <name>WriteLine(const String&lt;char>&amp; text)</name>
                                    <syntax>public void WriteLine(const String&lt;char>&amp; text);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>text</name>
                                            <type ref="type.8700211"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Writer_CodeFormatter_D57701AD3B687B9BB271D470EF0201E755FC3937">
                            <name>Writer()</name>
                            <syntax>public nothrow inline StreamWriter&amp; Writer();</syntax>
                            <returnType ref="type.8699894"/>
                        </function>
                    </functions>
                </class>
            </classes>
        </namespace>
        <namespace id="System.Threading">
            <name>System.Threading</name>
            <classes>
                <class id="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26">
                    <name>ConditionVariable</name>
                    <groupName>ConditionVariable</groupName>
                    <syntax> public class ConditionVariable;</syntax>
                    <constructors>
                        <constructor id="default_constructor_ConditionVariable_620A9B064CAD60B097DBF24FD760D938335688DD">
                            <name>ConditionVariable()</name>
                            <syntax>public nothrow ConditionVariable();</syntax>
                        </constructor>
                        <constructor id="move_constructor_ConditionVariable_D56FE4E62C576BCAF42E55AC383FF29451E5126D">
                            <name>ConditionVariable(ConditionVariable&amp;&amp; that)</name>
                            <syntax>public nothrow ConditionVariable(ConditionVariable&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8700394"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_NotifyAll_ConditionVariable_930172E440DB2A52950339718C12D077C0EB7698">
                            <name>NotifyAll()</name>
                            <syntax>public void NotifyAll();</syntax>
                        </function>
                        <function id="member_function_NotifyOne_ConditionVariable_BE3C3197CF5FB80DF9EB333CE8D93F95A0A8D571">
                            <name>NotifyOne()</name>
                            <syntax>public void NotifyOne();</syntax>
                        </function>
                        <function id="function_group_Wait_EC6EEF2F901463E188DBE4A134B099751E6DAEEE">
                            <name>Wait</name>
                            <overloads>
                                <overload id="member_function_Wait_ConditionVariable_7AC6F64C7C114AE6A79098D2BFF24BFA586D56DE">
                                    <name>Wait(RecursiveMutex&amp; mtx)</name>
                                    <syntax>public void Wait(RecursiveMutex&amp; mtx);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>mtx</name>
                                            <type ref="type.8699764"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Wait_ConditionVariable_E230264EF70FFDC585F23FB525C0E4249D157C1F">
                                    <name>Wait(RecursiveMutex&amp; mtx, Predicate predicate, void* arg)</name>
                                    <syntax>public void Wait(RecursiveMutex&amp; mtx, Predicate predicate, void* arg);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>mtx</name>
                                            <type ref="type.8699764"/>
                                        </parameter>
                                        <parameter>
                                            <name>predicate</name>
                                            <type ref="8699543"/>
                                        </parameter>
                                        <parameter>
                                            <name>arg</name>
                                            <type ref="type.8699217"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Wait_ConditionVariable_1E7DE8100450C76EC1FB66DCAA12372ED5C0C915">
                                    <name>Wait(RecursiveMutex&amp; mtx, PredicateMethod predicateMethod, void* arg)</name>
                                    <syntax>public void Wait(RecursiveMutex&amp; mtx, PredicateMethod predicateMethod, void* arg);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>mtx</name>
                                            <type ref="type.8699764"/>
                                        </parameter>
                                        <parameter>
                                            <name>predicateMethod</name>
                                            <type ref="8699544"/>
                                        </parameter>
                                        <parameter>
                                            <name>arg</name>
                                            <type ref="type.8699217"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_WaitFor_E04FCCA1FFDC2C168621872AF5253063F4993C0C">
                            <name>WaitFor</name>
                            <overloads>
                                <overload id="member_function_WaitFor_ConditionVariable_8EBD2B3DFA0868560FF823D29C73767ACB4239C8">
                                    <name>WaitFor(RecursiveMutex&amp; mtx, Predicate predicate, void* arg, const Duration&amp; duration)</name>
                                    <syntax>public bool WaitFor(RecursiveMutex&amp; mtx, Predicate predicate, void* arg, const Duration&amp; duration);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>mtx</name>
                                            <type ref="type.8699764"/>
                                        </parameter>
                                        <parameter>
                                            <name>predicate</name>
                                            <type ref="8699543"/>
                                        </parameter>
                                        <parameter>
                                            <name>arg</name>
                                            <type ref="type.8699217"/>
                                        </parameter>
                                        <parameter>
                                            <name>duration</name>
                                            <type ref="type.8699939"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699065"/>
                                </overload>
                                <overload id="member_function_WaitFor_ConditionVariable_C430B016B875BA31CD8CA79BC4A954F719C7E911">
                                    <name>WaitFor(RecursiveMutex&amp; mtx, PredicateMethod predicateMethod, void* arg, const Duration&amp; duration)</name>
                                    <syntax>public bool WaitFor(RecursiveMutex&amp; mtx, PredicateMethod predicateMethod, void* arg, const Duration&amp; duration);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>mtx</name>
                                            <type ref="type.8699764"/>
                                        </parameter>
                                        <parameter>
                                            <name>predicateMethod</name>
                                            <type ref="8699544"/>
                                        </parameter>
                                        <parameter>
                                            <name>arg</name>
                                            <type ref="type.8699217"/>
                                        </parameter>
                                        <parameter>
                                            <name>duration</name>
                                            <type ref="type.8699939"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699065"/>
                                </overload>
                                <overload id="member_function_WaitFor_ConditionVariable_CB27D528634A9ED2D5FDFCDC23208F28842EC142">
                                    <name>WaitFor(RecursiveMutex&amp; mtx, const Duration&amp; duration)</name>
                                    <syntax>public ConditionVariableStatus WaitFor(RecursiveMutex&amp; mtx, const Duration&amp; duration);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>mtx</name>
                                            <type ref="type.8699764"/>
                                        </parameter>
                                        <parameter>
                                            <name>duration</name>
                                            <type ref="type.8699939"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="enumerated_type_ConditionVariableStatus_996DE378267835377931621DD371B1C5CBA8C822"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_WaitUntil_5B4EBD2BC1519207F40C847E5F04F0B12A6890A5">
                            <name>WaitUntil</name>
                            <overloads>
                                <overload id="member_function_WaitUntil_ConditionVariable_57575CB2C14DA0FFF8D422F1BCFD5977CE81E18B">
                                    <name>WaitUntil(RecursiveMutex&amp; mtx, Predicate predicate, void* arg, const TimePoint&amp; tp)</name>
                                    <syntax>public bool WaitUntil(RecursiveMutex&amp; mtx, Predicate predicate, void* arg, const TimePoint&amp; tp);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>mtx</name>
                                            <type ref="type.8699764"/>
                                        </parameter>
                                        <parameter>
                                            <name>predicate</name>
                                            <type ref="8699543"/>
                                        </parameter>
                                        <parameter>
                                            <name>arg</name>
                                            <type ref="type.8699217"/>
                                        </parameter>
                                        <parameter>
                                            <name>tp</name>
                                            <type ref="type.8699933"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699065"/>
                                </overload>
                                <overload id="member_function_WaitUntil_ConditionVariable_F0110AC8D22BD8B95C3E7F8A592975C780DAF732">
                                    <name>WaitUntil(RecursiveMutex&amp; mtx, PredicateMethod predicateMethod, void* arg, const TimePoint&amp; tp)</name>
                                    <syntax>public bool WaitUntil(RecursiveMutex&amp; mtx, PredicateMethod predicateMethod, void* arg, const TimePoint&amp; tp);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>mtx</name>
                                            <type ref="type.8699764"/>
                                        </parameter>
                                        <parameter>
                                            <name>predicateMethod</name>
                                            <type ref="8699544"/>
                                        </parameter>
                                        <parameter>
                                            <name>arg</name>
                                            <type ref="type.8699217"/>
                                        </parameter>
                                        <parameter>
                                            <name>tp</name>
                                            <type ref="type.8699933"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699065"/>
                                </overload>
                                <overload id="member_function_WaitUntil_ConditionVariable_5719DE838B1775C1FE37E84E1B3604DC272532C7">
                                    <name>WaitUntil(RecursiveMutex&amp; mtx, const TimePoint&amp; tp)</name>
                                    <syntax>public ConditionVariableStatus WaitUntil(RecursiveMutex&amp; mtx, const TimePoint&amp; tp);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>mtx</name>
                                            <type ref="type.8699764"/>
                                        </parameter>
                                        <parameter>
                                            <name>tp</name>
                                            <type ref="type.8699933"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="enumerated_type_ConditionVariableStatus_996DE378267835377931621DD371B1C5CBA8C822"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="move_assignment_op_assign_ConditionVariable_93F8DB6F6C407FD02982C240816CF4F8385792A9">
                            <name>operator=(ConditionVariable&amp;&amp; that)</name>
                            <syntax>public nothrow void operator=(ConditionVariable&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8700394"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1">
                    <name>LockGuard&lt;Mtx></name>
                    <groupName>LockGuard</groupName>
                    <syntax> public class LockGuard&lt;Mtx>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699768">
                            <name>Mtx</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="8699768"/>
                        <connector>is</connector>
                        <concept ref="concept_Lockable_C55EF872C8BA4D0E56964832354652AEBEACD5E9"/>
                    </constraint>
                    <constructors>
                        <constructor id="constructor_LockGuard_Mtx_5D53BEAB4D0A3CA938AD79736F19808F82382DC7">
                            <name>LockGuard&lt;Mtx>(Mtx&amp; mtx_)</name>
                            <syntax>public nothrow LockGuard&lt;Mtx>(Mtx&amp; mtx_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>mtx_</name>
                                    <type ref="type.177"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
                <class id="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650">
                    <name>Mutex</name>
                    <groupName>Mutex</groupName>
                    <syntax> public class Mutex;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Mutex_DDE2F934CEC5F143D1AE16C06CC84DC08A4282B1">
                            <name>Mutex()</name>
                            <syntax>public nothrow Mutex();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Lock_Mutex_32BBE564158E95CC9F1AA18D65C62803C9AC7B1B">
                            <name>Lock()</name>
                            <syntax>public nothrow void Lock();</syntax>
                        </function>
                        <function id="member_function_Unlock_Mutex_54F34EE5DA0379E95ED71CEB793399684FFA271B">
                            <name>Unlock()</name>
                            <syntax>public nothrow void Unlock();</syntax>
                        </function>
                    </functions>
                </class>
                <class id="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82">
                    <name>RecursiveMutex</name>
                    <groupName>RecursiveMutex</groupName>
                    <syntax> public class RecursiveMutex;</syntax>
                    <constructors>
                        <constructor id="default_constructor_RecursiveMutex_B91005373F576F91E1CE302D4AE62547BD07BDD7">
                            <name>RecursiveMutex()</name>
                            <syntax>public nothrow RecursiveMutex();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Lock_RecursiveMutex_A2F81CC9C445644AA3A86C77332F7B596FAC6C0C">
                            <name>Lock()</name>
                            <syntax>public nothrow void Lock();</syntax>
                        </function>
                        <function id="member_function_Unlock_RecursiveMutex_241B167E3B6CC62AC9E1FC0B5BFC80F3074CADA7">
                            <name>Unlock()</name>
                            <syntax>public nothrow void Unlock();</syntax>
                        </function>
                    </functions>
                </class>
                <class id="class_Thread_805238682CDC09B4D1BB5C11ACA935F47C73BA4F">
                    <name>Thread</name>
                    <groupName>Thread</groupName>
                    <syntax> public class Thread;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Thread_4961D01D4A5CC3C834B97BD79DA663A565532BC2">
                            <name>Thread()</name>
                            <syntax>public nothrow Thread();</syntax>
                        </constructor>
                        <constructor id="move_constructor_Thread_F2752CE4A379EF08F786468A6DF941043E6DE642">
                            <name>Thread(Thread&amp;&amp; that)</name>
                            <syntax>public nothrow Thread(Thread&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.8703023"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Id_Thread_6C7B329592C962619064955569BE8B816B617CF9">
                            <name>Id() const</name>
                            <syntax>public nothrow inline int Id() const;</syntax>
                            <returnType ref="type.8699070"/>
                        </function>
                        <function id="member_function_Join_Thread_2321207B993A5A106E72F80F93CBAD2DA409A166">
                            <name>Join()</name>
                            <syntax>public void Join();</syntax>
                        </function>
                        <function id="move_assignment_op_assign_Thread_DC9C9BBAC52D5C9BBC8E4BBCAF595AA04A86770E">
                            <name>operator=(Thread&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(Thread&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.8703023"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="function_group_StartFunction_E0D09978A5887455FD28355B7E4566D4503346C0">
                            <name>StartFunction</name>
                            <overloads>
                                <overload id="member_function_StartFunction_Thread_1A1C4769AEF7CF35DCD25E3F8193972EEA5BB99C">
                                    <name>StartFunction(ParameterizedThreadStartFunction function, void* param)</name>
                                    <syntax>public static Thread StartFunction(ParameterizedThreadStartFunction function, void* param);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>function</name>
                                            <type ref="8699916"/>
                                        </parameter>
                                        <parameter>
                                            <name>param</name>
                                            <type ref="type.8699217"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="class_Thread_805238682CDC09B4D1BB5C11ACA935F47C73BA4F"/>
                                </overload>
                                <overload id="member_function_StartFunction_Thread_35152E8D625DBF73673BA88A274043C8A4EE04F0">
                                    <name>StartFunction(ThreadStartFunction function)</name>
                                    <syntax>public static Thread StartFunction(ThreadStartFunction function);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>function</name>
                                            <type ref="8699915"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="class_Thread_805238682CDC09B4D1BB5C11ACA935F47C73BA4F"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_StartMethod_FC8283BCBF05DB81E4B46FAD431305B24A966065">
                            <name>StartMethod</name>
                            <overloads>
                                <overload id="member_function_StartMethod_Thread_9A1E5DAD41902DF6DBA34A17DFA5A4040C16DA9A">
                                    <name>StartMethod(ParameterizedThreadStartMethod method, void* param)</name>
                                    <syntax>public static Thread StartMethod(ParameterizedThreadStartMethod method, void* param);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>method</name>
                                            <type ref="8699918"/>
                                        </parameter>
                                        <parameter>
                                            <name>param</name>
                                            <type ref="type.8699217"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="class_Thread_805238682CDC09B4D1BB5C11ACA935F47C73BA4F"/>
                                </overload>
                                <overload id="member_function_StartMethod_Thread_1C5AAD053E97EAFC77EEFD07BFBE02FD06828987">
                                    <name>StartMethod(ThreadStartMethod method)</name>
                                    <syntax>public static Thread StartMethod(ThreadStartMethod method);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>method</name>
                                            <type ref="8699917"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="class_Thread_805238682CDC09B4D1BB5C11ACA935F47C73BA4F"/>
                                </overload>
                            </overloads>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670">
                    <name>ThreadingException</name>
                    <groupName>ThreadingException</groupName>
                    <syntax> public class ThreadingException;</syntax>
                    <baseClass ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                    <constructors>
                        <constructor id="constructor_ThreadingException_2E2A0EC6E92F92EE6A7416C0BEC8FDECBDA99D6E">
                            <name>ThreadingException(const String&lt;char>&amp; message_)</name>
                            <syntax>public ThreadingException(const String&lt;char>&amp; message_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
            </classes>
            <functions>
                <function id="function_HardwareConcurrency_B1B8105140D7AEFC1E753360624D21D1C3947146">
                    <name>HardwareConcurrency()</name>
                    <syntax>public nothrow int HardwareConcurrency();</syntax>
                    <returnType ref="type.8699070"/>
                </function>
                <function id="function_group_op_eq_5F5A01C0F1A5E02DB47DDA01C368F09C50FE7DBA">
                    <name>operator==</name>
                    <overloads>
                        <overload id="function_op_eq_8EC031672EA5D80312FEAC482AC5FC1B9A30F899">
                            <name>operator==(ConditionVariableStatus left, ConditionVariableStatus right)</name>
                            <syntax>public bool operator==(ConditionVariableStatus left, ConditionVariableStatus right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_ConditionVariableStatus_996DE378267835377931621DD371B1C5CBA8C822"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_ConditionVariableStatus_996DE378267835377931621DD371B1C5CBA8C822"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_5AA4137CD2B5D3F412FE1E027B614EAFD4D0A124">
                            <name>operator==(ParameterizedThreadStartFunction left, ParameterizedThreadStartFunction right)</name>
                            <syntax>public bool operator==(ParameterizedThreadStartFunction left, ParameterizedThreadStartFunction right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="8699916"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="8699916"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_2BEA7423CB200DFC88B00B08009B2D65CF1A47EB">
                            <name>operator==(Predicate left, Predicate right)</name>
                            <syntax>public bool operator==(Predicate left, Predicate right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="8699543"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="8699543"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_CD590BEF38D1A984988464D463C557D59C8BAE8C">
                            <name>operator==(ThreadStartFunction left, ThreadStartFunction right)</name>
                            <syntax>public bool operator==(ThreadStartFunction left, ThreadStartFunction right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="8699915"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="8699915"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_61EA092CCF6BC8345E8D7B4289EBF2FA0FDC81D1">
                            <name>operator==(const ParameterizedThreadStartMethod&amp; left, const ParameterizedThreadStartMethod&amp; right)</name>
                            <syntax>public bool operator==(const ParameterizedThreadStartMethod&amp; left, const ParameterizedThreadStartMethod&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8703018"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8703018"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_571D10382DE639252D10E48934B59FC5E8B4EC3D">
                            <name>operator==(const PredicateMethod&amp; left, const PredicateMethod&amp; right)</name>
                            <syntax>public bool operator==(const PredicateMethod&amp; left, const PredicateMethod&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8700390"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8700390"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_865692635C4CA1B28735009AC0DD921A7E0E31E6">
                            <name>operator==(const ThreadStartMethod&amp; left, const ThreadStartMethod&amp; right)</name>
                            <syntax>public bool operator==(const ThreadStartMethod&amp; left, const ThreadStartMethod&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8703011"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8703011"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
            </functions>
            <concepts>
                <concept id="concept_Lockable_C55EF872C8BA4D0E56964832354652AEBEACD5E9">
                    <name>Lockable&lt;T></name>
                    <groupName>Lockable</groupName>
                    <syntax>public concept Lockable&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="8699766">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>void T.Lock()</constraint>
                        <constraint>void T.Unlock()</constraint>
                    </constraints>
                    <axioms/>
                </concept>
            </concepts>
            <delegates>
                <delegate id="8699916">
                    <name>ParameterizedThreadStartFunction</name>
                    <syntax>public delegate void ParameterizedThreadStartFunction(void* param);</syntax>
                    <parameters>
                        <parameter>
                            <name>param</name>
                            <type ref="type.8699217"/>
                        </parameter>
                    </parameters>
                </delegate>
                <delegate id="8699543">
                    <name>Predicate</name>
                    <syntax>public delegate bool Predicate(void* arg);</syntax>
                    <parameters>
                        <parameter>
                            <name>arg</name>
                            <type ref="type.8699217"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </delegate>
                <delegate id="8699915">
                    <name>ThreadStartFunction</name>
                    <syntax>public delegate void ThreadStartFunction();</syntax>
                </delegate>
            </delegates>
            <classDelegates>
                <classDelegate id="8699918">
                    <name>ParameterizedThreadStartMethod</name>
                    <syntax>public class delegate void ParameterizedThreadStartMethod(void* param);</syntax>
                    <parameters>
                        <parameter>
                            <name>param</name>
                            <type ref="type.8699217"/>
                        </parameter>
                    </parameters>
                </classDelegate>
                <classDelegate id="8699544">
                    <name>PredicateMethod</name>
                    <syntax>public class delegate bool PredicateMethod(void* arg);</syntax>
                    <parameters>
                        <parameter>
                            <name>arg</name>
                            <type ref="type.8699217"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </classDelegate>
                <classDelegate id="8699917">
                    <name>ThreadStartMethod</name>
                    <syntax>public class delegate void ThreadStartMethod();</syntax>
                </classDelegate>
            </classDelegates>
            <enumerations>
                <enumeration id="enumerated_type_ConditionVariableStatus_996DE378267835377931621DD371B1C5CBA8C822">
                    <name>ConditionVariableStatus</name>
                    <syntax>public enum ConditionVariableStatus;</syntax>
                    <underlyingType ref="type.8699070"/>
                    <enumConstant>
                        <name>timeout</name>
                        <value>0</value>
                    </enumConstant>
                    <enumConstant>
                        <name>no_timeout</name>
                        <value>1</value>
                    </enumConstant>
                </enumeration>
            </enumerations>
        </namespace>
        <namespace id="System.Unicode">
            <name>System.Unicode</name>
            <classes>
                <class id="class_Age_20ED92992C09B89F8F5B6F690EFAF17F626D7291">
                    <name>Age</name>
                    <groupName>Age</groupName>
                    <syntax> public class Age;</syntax>
                    <constructors>
                        <constructor id="constructor_Age_E175E6FA4C4FB82860CB50A3635B1AC77C7E4F95">
                            <name>Age(AgeId id_, const String&lt;char>&amp; version_)</name>
                            <syntax>public nothrow Age(AgeId id_, const String&lt;char>&amp; version_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                                </parameter>
                                <parameter>
                                    <name>version_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Id_Age_D8ED6FC65EE8729CEBEF73FCFE0B62DD2E513882">
                            <name>Id() const</name>
                            <syntax>public nothrow inline AgeId Id() const;</syntax>
                            <returnType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                        </function>
                        <function id="member_function_Version_Age_AD263532B6C886468DFB41857B3A715C0BBD3F3F">
                            <name>Version() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Version() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                    </functions>
                </class>
                <class id="class_AgeTable_2C086A707D70C073F820A6B1E5C3E9839D613039">
                    <name>AgeTable</name>
                    <groupName>AgeTable</groupName>
                    <syntax> public class AgeTable;</syntax>
                    <functions>
                        <function id="function_group_GetAge_FCB36C4A70B0B668613401AB63DE2AA504139675">
                            <name>GetAge</name>
                            <overloads>
                                <overload id="member_function_GetAge_AgeTable_9AAC80C8F3F35FB702548D39C7D03D18249EF74B">
                                    <name>GetAge(AgeId id) const</name>
                                    <syntax>public const Age* GetAge(AgeId id) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>id</name>
                                            <type ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699991"/>
                                </overload>
                                <overload id="member_function_GetAge_AgeTable_E3A107D1B2B6B0A1A40C518D17E907662D03DBE4">
                                    <name>GetAge(const String&lt;char>&amp; version) const</name>
                                    <syntax>public const Age* GetAge(const String&lt;char>&amp; version) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>version</name>
                                            <type ref="type.8700211"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8699991"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_AgeTable_9A60AD5BEAA4C722E88EBD80EB46FDCB99E0B22B">
                            <name>Instance()</name>
                            <syntax>public static AgeTable&amp; Instance();</syntax>
                            <returnType ref="type.8699998"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2">
                    <name>Alias</name>
                    <groupName>Alias</groupName>
                    <syntax> public class Alias;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Alias_0904F25622552B8426D09E17AFC7F19B263ED863">
                            <name>Alias()</name>
                            <syntax>public nothrow Alias();</syntax>
                        </constructor>
                        <constructor id="constructor_Alias_0B958B642386524CAEB6F41555454615A0E2D8D8">
                            <name>Alias(AliasTypeId typeId_, const String&lt;char>&amp; name_)</name>
                            <syntax>public nothrow Alias(AliasTypeId typeId_, const String&lt;char>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>typeId_</name>
                                    <type ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                                </parameter>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Name_Alias_570991BB15154DC28F3358396D1453FB5091E5A7">
                            <name>Name() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Name() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                        <function id="member_function_Read_Alias_A6BCDF10A8620F9C802108E8E98EF280D2FB51DC">
                            <name>Read(BinaryReader&amp; reader)</name>
                            <syntax>public void Read(BinaryReader&amp; reader);</syntax>
                            <parameters>
                                <parameter>
                                    <name>reader</name>
                                    <type ref="type.8699394"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_TypeId_Alias_BB81D3CD5A5C711098D9C359AE24C044C3D37C9A">
                            <name>TypeId() const</name>
                            <syntax>public nothrow inline AliasTypeId TypeId() const;</syntax>
                            <returnType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                        </function>
                    </functions>
                </class>
                <class id="class_AliasType_26C1BD4B52D4B4FA45C72272C56F7F26186F16BD">
                    <name>AliasType</name>
                    <groupName>AliasType</groupName>
                    <syntax> public class AliasType;</syntax>
                    <constructors>
                        <constructor id="constructor_AliasType_3A1EAC357A8C7300D5262DDEB100E9344F6CFA98">
                            <name>AliasType(AliasTypeId id_, const String&lt;char>&amp; name_)</name>
                            <syntax>public nothrow AliasType(AliasTypeId id_, const String&lt;char>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                                </parameter>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Id_AliasType_97B4D73390FC91606E3315CC0B2A042D3E0A5C89">
                            <name>Id() const</name>
                            <syntax>public nothrow inline AliasTypeId Id() const;</syntax>
                            <returnType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                        </function>
                        <function id="member_function_Name_AliasType_85553047BD1B9342BCAC28A5288F19C028055E4F">
                            <name>Name() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Name() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                    </functions>
                </class>
                <class id="class_AliasTypeTable_5D27F2122BC2C5367359CE5C354526AB494783FF">
                    <name>AliasTypeTable</name>
                    <groupName>AliasTypeTable</groupName>
                    <syntax> public class AliasTypeTable;</syntax>
                    <functions>
                        <function id="function_group_GetAliasType_3BE1E7FF9A43C6F18F8AF225BEF34F6FCD65E405">
                            <name>GetAliasType</name>
                            <overloads>
                                <overload id="member_function_GetAliasType_AliasTypeTable_F41CC77874654BE478B346B68452560B85A6936F">
                                    <name>GetAliasType(AliasTypeId id) const</name>
                                    <syntax>public const AliasType* GetAliasType(AliasTypeId id) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>id</name>
                                            <type ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8700062"/>
                                </overload>
                                <overload id="member_function_GetAliasType_AliasTypeTable_11333F5CC5F9A882B937505A5DCF86A26BEFC760">
                                    <name>GetAliasType(const String&lt;char>&amp; name) const</name>
                                    <syntax>public const AliasType* GetAliasType(const String&lt;char>&amp; name) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>name</name>
                                            <type ref="type.8700211"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.8700062"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_AliasTypeTable_35D2366A52CC94AEF1D587AFB203B22FFA264C93">
                            <name>Instance()</name>
                            <syntax>public static AliasTypeTable&amp; Instance();</syntax>
                            <returnType ref="type.8700069"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_BidiClass_C91AB3C9A69B59FAC907E2B6BF6ED6742175BB63">
                    <name>BidiClass</name>
                    <groupName>BidiClass</groupName>
                    <syntax> public class BidiClass;</syntax>
                    <constructors>
                        <constructor id="constructor_BidiClass_C1F1D830BD6543E72C953B6BFCA0B51325D8E8E3">
                            <name>BidiClass(BidiClassId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_)</name>
                            <syntax>public nothrow BidiClass(BidiClassId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                                </parameter>
                                <parameter>
                                    <name>shortName_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>longName_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Id_BidiClass_BEE92D758B48C2E4A9080BBEA1C44F6150C48F17">
                            <name>Id() const</name>
                            <syntax>public nothrow inline BidiClassId Id() const;</syntax>
                            <returnType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                        </function>
                        <function id="member_function_LongName_BidiClass_CB1F7B38F4448B0DB27843CA36E0FAF45E350671">
                            <name>LongName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; LongName() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                        <function id="member_function_ShortName_BidiClass_AE4B0B64AB887314F17C46835F4081068BA1CAD9">
                            <name>ShortName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; ShortName() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                    </functions>
                </class>
                <class id="class_BidiClassTable_C2D5046C361B79F9A690C84020C0EA764E7E73C5">
                    <name>BidiClassTable</name>
                    <groupName>BidiClassTable</groupName>
                    <syntax> public class BidiClassTable;</syntax>
                    <functions>
                        <function id="member_function_GetBidiClass_BidiClassTable_273D5F7F6EA51CE0F01F65AECA07D52FD2E5A239">
                            <name>GetBidiClass(BidiClassId id) const</name>
                            <syntax>public const BidiClass* GetBidiClass(BidiClassId id) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700036"/>
                        </function>
                        <function id="member_function_GetBidiClassByLongName_BidiClassTable_174868F8AD35D65C60002DDEC9A213BAE8C22CA0">
                            <name>GetBidiClassByLongName(const String&lt;char>&amp; longName) const</name>
                            <syntax>public const BidiClass* GetBidiClassByLongName(const String&lt;char>&amp; longName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>longName</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700036"/>
                        </function>
                        <function id="member_function_GetBidiClassByShortName_BidiClassTable_970010AA2E6A82BDD733E6F525E79A318BCE80B4">
                            <name>GetBidiClassByShortName(const String&lt;char>&amp; shortName) const</name>
                            <syntax>public const BidiClass* GetBidiClassByShortName(const String&lt;char>&amp; shortName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>shortName</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700036"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_BidiClassTable_35CA78EA8847B0551CCA73E106F19376832A1647">
                            <name>Instance()</name>
                            <syntax>public static BidiClassTable&amp; Instance();</syntax>
                            <returnType ref="type.8700043"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_BidiPairedBracketType_8577BAE017C9877F73B079DC41550D9EB6D2202C">
                    <name>BidiPairedBracketType</name>
                    <groupName>BidiPairedBracketType</groupName>
                    <syntax> public class BidiPairedBracketType;</syntax>
                    <constructors>
                        <constructor id="constructor_BidiPairedBracketType_F37A49B661ED90A0256F6C8D08CEED9F7F9FF343">
                            <name>BidiPairedBracketType(BidiPairedBracketTypeId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_)</name>
                            <syntax>public nothrow BidiPairedBracketType(BidiPairedBracketTypeId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                                </parameter>
                                <parameter>
                                    <name>shortName_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>longName_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Id_BidiPairedBracketType_CEEE09808FFF0CFC0F626F81CBA884CC0213E231">
                            <name>Id() const</name>
                            <syntax>public nothrow inline BidiPairedBracketTypeId Id() const;</syntax>
                            <returnType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                        </function>
                        <function id="member_function_LongName_BidiPairedBracketType_22BEAD4EA71B42615F72C7513C5424841BBA6A9F">
                            <name>LongName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; LongName() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                        <function id="member_function_ShortName_BidiPairedBracketType_76386A15AD0E14FEC011285E42CB62B9D9F3543F">
                            <name>ShortName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; ShortName() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                    </functions>
                </class>
                <class id="class_BidiPairedBracketTypeTable_0064D862A1F33AB5C9E09D707B6EC98CAC6E1BA7">
                    <name>BidiPairedBracketTypeTable</name>
                    <groupName>BidiPairedBracketTypeTable</groupName>
                    <syntax> public class BidiPairedBracketTypeTable;</syntax>
                    <functions>
                        <function id="member_function_GetBidiPairedBracketType_BidiPairedBracketTypeTable_810B5A1E852F5A22276D2C0C44A7035B910086FD">
                            <name>GetBidiPairedBracketType(BidiPairedBracketTypeId id) const</name>
                            <syntax>public const BidiPairedBracketType* GetBidiPairedBracketType(BidiPairedBracketTypeId id) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700049"/>
                        </function>
                        <function id="member_function_GetBidiPairedBracketTypeByLongName_BidiPairedBracketTypeTable_7E0DC49152384ABFA1A5E020402A1438F6F3A452">
                            <name>GetBidiPairedBracketTypeByLongName(const String&lt;char>&amp; longName) const</name>
                            <syntax>public const BidiPairedBracketType* GetBidiPairedBracketTypeByLongName(const String&lt;char>&amp; longName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>longName</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700049"/>
                        </function>
                        <function id="member_function_GetBidiPairedBracketTypeByShortName_BidiPairedBracketTypeTable_00C2EAE059AF50B996742984419CA4BFDEDD7382">
                            <name>GetBidiPairedBracketTypeByShortName(const String&lt;char>&amp; shortName) const</name>
                            <syntax>public const BidiPairedBracketType* GetBidiPairedBracketTypeByShortName(const String&lt;char>&amp; shortName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>shortName</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700049"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_BidiPairedBracketTypeTable_D4C6B5D7FAA6CD3846038E4F786F8BFA22BDD70D">
                            <name>Instance()</name>
                            <syntax>public static BidiPairedBracketTypeTable&amp; Instance();</syntax>
                            <returnType ref="type.8700056"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_BinaryProperty_9535AC1669FC6F9049F470BDFFC16D1B40ACA307">
                    <name>BinaryProperty</name>
                    <groupName>BinaryProperty</groupName>
                    <syntax> public class BinaryProperty;</syntax>
                    <constructors>
                        <constructor id="constructor_BinaryProperty_C7C21AE49D34C18698184C791E01EF001197CE02">
                            <name>BinaryProperty(BinaryPropertyId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_)</name>
                            <syntax>public nothrow BinaryProperty(BinaryPropertyId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                                </parameter>
                                <parameter>
                                    <name>shortName_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>longName_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Id_BinaryProperty_959F83F43B0C547BDC555B66D0BBBFE6880238DC">
                            <name>Id()</name>
                            <syntax>public nothrow inline BinaryPropertyId Id();</syntax>
                            <returnType ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                        </function>
                        <function id="member_function_LongName_BinaryProperty_4766B156AD06630D80DD9999B44FF217B561C0A1">
                            <name>LongName()</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; LongName();</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                        <function id="member_function_ShortName_BinaryProperty_C599525AB2BB3490202006F01F685087DA747A73">
                            <name>ShortName()</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; ShortName();</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                    </functions>
                </class>
                <class id="class_BinaryPropertyTable_D9F900B43A497D516547526966A7747D0329EEEA">
                    <name>BinaryPropertyTable</name>
                    <groupName>BinaryPropertyTable</groupName>
                    <syntax> public class BinaryPropertyTable;</syntax>
                    <functions>
                        <function id="member_function_GetBinaryProperty_BinaryPropertyTable_AAA53D0DE4F265E8F50924F6E70D6F3127995AF1">
                            <name>GetBinaryProperty(BinaryPropertyId id) const</name>
                            <syntax>public nothrow const BinaryProperty* GetBinaryProperty(BinaryPropertyId id) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8703036"/>
                        </function>
                        <function id="member_function_GetBinaryPropertyByLongName_BinaryPropertyTable_423BE664F7D4E1436473FA5AA5DB3863AB0AE391">
                            <name>GetBinaryPropertyByLongName(const String&lt;char>&amp; longName) const</name>
                            <syntax>public const BinaryProperty* GetBinaryPropertyByLongName(const String&lt;char>&amp; longName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>longName</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8703036"/>
                        </function>
                        <function id="member_function_GetBinaryPropertyByShortName_BinaryPropertyTable_2C87A1438F63D7217B0AC2FC8BDF22AA23EF4767">
                            <name>GetBinaryPropertyByShortName(const String&lt;char>&amp; shortName) const</name>
                            <syntax>public const BinaryProperty* GetBinaryPropertyByShortName(const String&lt;char>&amp; shortName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>shortName</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8703036"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_BinaryPropertyTable_D632D490E73A6081BCA22875DD2867DF2B20A7FA">
                            <name>Instance()</name>
                            <syntax>public static nothrow BinaryPropertyTable&amp; Instance();</syntax>
                            <returnType ref="type.8699965"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_Block_0DB05901DEB40B5847F018F2B06585EA00CE386B">
                    <name>Block</name>
                    <groupName>Block</groupName>
                    <syntax> public class Block;</syntax>
                    <constructors>
                        <constructor id="constructor_Block_0C733455CF30211C43FDAB04237C1E13B0504B5A">
                            <name>Block(BlockId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_, uchar start_, uchar end_)</name>
                            <syntax>public nothrow Block(BlockId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_, uchar start_, uchar end_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                                </parameter>
                                <parameter>
                                    <name>shortName_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>longName_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>start_</name>
                                    <type ref="type.8699078"/>
                                </parameter>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.8699078"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_End_Block_5B46378D7BE25976C02467D7E8D59D7944A5832C">
                            <name>End()</name>
                            <syntax>public nothrow inline uchar End();</syntax>
                            <returnType ref="type.8699078"/>
                        </function>
                        <function id="member_function_Id_Block_D53DE04CB09445FDDA63235E39FC985CA838B29A">
                            <name>Id()</name>
                            <syntax>public nothrow inline BlockId Id();</syntax>
                            <returnType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                        </function>
                        <function id="member_function_LongName_Block_DB6B17609079D844781B17EFEE51D3F5761A87BB">
                            <name>LongName()</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; LongName();</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                        <function id="member_function_ShortName_Block_089B50B84EB016A348FF723002F78D1BA2EBE4FD">
                            <name>ShortName()</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; ShortName();</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                        <function id="member_function_Start_Block_E4A97630C72F6F969D915935F16842C188589F0D">
                            <name>Start()</name>
                            <syntax>public nothrow inline uchar Start();</syntax>
                            <returnType ref="type.8699078"/>
                        </function>
                    </functions>
                </class>
                <class id="class_BlockTable_6443121076F39E567B3BAACE0620D0ABC989F5D7">
                    <name>BlockTable</name>
                    <groupName>BlockTable</groupName>
                    <syntax> public class BlockTable;</syntax>
                    <functions>
                        <function id="member_function_GetBlock_BlockTable_BBDFB407C8F410AADA68685890858A2867AD6478">
                            <name>GetBlock(BlockId id) const</name>
                            <syntax>public nothrow inline const Block* GetBlock(BlockId id) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8703268"/>
                        </function>
                        <function id="member_function_GetBlockByLongName_BlockTable_FFF2E67DF0DE4E3734B1EC7D4A7FB8654E7D380C">
                            <name>GetBlockByLongName(const String&lt;char>&amp; longName) const</name>
                            <syntax>public inline const Block* GetBlockByLongName(const String&lt;char>&amp; longName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>longName</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8703268"/>
                        </function>
                        <function id="member_function_GetBlockByShortName_BlockTable_E829EE5381754ADAF5974D4D9E4F58E08498A03C">
                            <name>GetBlockByShortName(const String&lt;char>&amp; shortName) const</name>
                            <syntax>public inline const Block* GetBlockByShortName(const String&lt;char>&amp; shortName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>shortName</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8703268"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_BlockTable_402D617371454807D45E1FE95490F8A1E58AA8FB">
                            <name>Instance()</name>
                            <syntax>public static BlockTable&amp; Instance();</syntax>
                            <returnType ref="type.8699975"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_CharacterInfo_E7387AE78EC58246E84889A73F5B953D7D1E7336">
                    <name>CharacterInfo</name>
                    <groupName>CharacterInfo</groupName>
                    <syntax> public class CharacterInfo;</syntax>
                    <constructors>
                        <constructor id="default_constructor_CharacterInfo_0E6141E7D2DB634775A0018D17DC3E3FBA1053A3">
                            <name>CharacterInfo()</name>
                            <syntax>public nothrow CharacterInfo();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AgeValue_CharacterInfo_CD560E4F4C9BD9881EC1B88A9FFAEA1B3939BEA8">
                            <name>AgeValue() const</name>
                            <syntax>public nothrow inline AgeId AgeValue() const;</syntax>
                            <returnType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                        </function>
                        <function id="member_function_BlockValue_CharacterInfo_BC95D974E9FD9F4209166AAA51B13B3F864BF0EF">
                            <name>BlockValue() const</name>
                            <syntax>public nothrow inline BlockId BlockValue() const;</syntax>
                            <returnType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                        </function>
                        <function id="member_function_Folding_CharacterInfo_C649ADAF9ADC77FAF8483326D2C358B9D91486AD">
                            <name>Folding() const</name>
                            <syntax>public nothrow inline uchar Folding() const;</syntax>
                            <returnType ref="type.8699078"/>
                        </function>
                        <function id="member_function_GeneralCategoryValue_CharacterInfo_F2188BCABC17D145AA80394189CDC1F430690C4B">
                            <name>GeneralCategoryValue() const</name>
                            <syntax>public nothrow inline GeneralCategoryId GeneralCategoryValue() const;</syntax>
                            <returnType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                        </function>
                        <function id="member_function_GetBinaryProperty_CharacterInfo_6800204473CA16BF842638795DABEAB7D737BBC7">
                            <name>GetBinaryProperty(BinaryPropertyId binaryPropertyId) const</name>
                            <syntax>public nothrow inline bool GetBinaryProperty(BinaryPropertyId binaryPropertyId) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>binaryPropertyId</name>
                                    <type ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_HasGeneralCategory_CharacterInfo_AE9B55685EFFB59DECB01B460231B695C85C103D">
                            <name>HasGeneralCategory(GeneralCategoryId generalCategory_) const</name>
                            <syntax>public nothrow inline bool HasGeneralCategory(GeneralCategoryId generalCategory_) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>generalCategory_</name>
                                    <type ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Lower_CharacterInfo_AEA52D4BACF9C95548C8D378B333331788109F17">
                            <name>Lower() const</name>
                            <syntax>public nothrow inline uchar Lower() const;</syntax>
                            <returnType ref="type.8699078"/>
                        </function>
                        <function id="member_function_Read_CharacterInfo_CFDAA2E46C9E48FA3F96CC407216755208BC660C">
                            <name>Read(BinaryReader&amp; reader)</name>
                            <syntax>public void Read(BinaryReader&amp; reader);</syntax>
                            <parameters>
                                <parameter>
                                    <name>reader</name>
                                    <type ref="type.8699394"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_ScriptValue_CharacterInfo_30986ABFE579871D094B6C3406B172194B5885BB">
                            <name>ScriptValue() const</name>
                            <syntax>public nothrow inline ScriptId ScriptValue() const;</syntax>
                            <returnType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                        </function>
                        <function id="member_function_Title_CharacterInfo_B8AB176A059984E478ABFCC3DB54425CFDB6B2AF">
                            <name>Title() const</name>
                            <syntax>public nothrow inline uchar Title() const;</syntax>
                            <returnType ref="type.8699078"/>
                        </function>
                        <function id="member_function_Upper_CharacterInfo_345D995EE1F9DFFB7BF2BB13B285337F41EE4763">
                            <name>Upper() const</name>
                            <syntax>public nothrow inline uchar Upper() const;</syntax>
                            <returnType ref="type.8699078"/>
                        </function>
                    </functions>
                </class>
                <class id="class_CharacterInfoPage_69DB089EE4A51A51BA9C5A5F28F2606E5F0A871D">
                    <name>CharacterInfoPage</name>
                    <groupName>CharacterInfoPage</groupName>
                    <syntax> public class CharacterInfoPage;</syntax>
                    <constructors>
                        <constructor id="default_constructor_CharacterInfoPage_BA46FD4FFBDDF49666B1A2B7476A1A56AF0A1A37">
                            <name>CharacterInfoPage()</name>
                            <syntax>public CharacterInfoPage();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Read_CharacterInfoPage_68D2C17CE56C883DBC450FF209ABD573145A96FB">
                            <name>Read(BinaryReader&amp; reader)</name>
                            <syntax>public void Read(BinaryReader&amp; reader);</syntax>
                            <parameters>
                                <parameter>
                                    <name>reader</name>
                                    <type ref="type.8699394"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_op_index_CharacterInfoPage_5FAA1CFCA336A7CBE84B50DEE225BFF81AE61F98">
                            <name>operator[](long index) const</name>
                            <syntax>public const CharacterInfo&amp; operator[](long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700017"/>
                        </function>
                    </functions>
                </class>
                <class id="class_CharacterTable_0A8C28D5AD9E5EB7406E88B0F6CD21F3D0C1F854">
                    <name>CharacterTable</name>
                    <groupName>CharacterTable</groupName>
                    <syntax> public class CharacterTable;</syntax>
                    <functions>
                        <function id="member_function_GetCharacterInfo_CharacterTable_55E951179608B83A36FBBD19BA6BEC95E40ECA40">
                            <name>GetCharacterInfo(uchar codePoint)</name>
                            <syntax>public const CharacterInfo&amp; GetCharacterInfo(uchar codePoint);</syntax>
                            <parameters>
                                <parameter>
                                    <name>codePoint</name>
                                    <type ref="type.8699078"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700017"/>
                        </function>
                        <function id="member_function_GetExtendedCharacterInfo_CharacterTable_B5ACF89D2899EA73E5963A50B2C52C059AF261D7">
                            <name>GetExtendedCharacterInfo(uchar codePoint)</name>
                            <syntax>public const ExtendedCharacterInfo&amp; GetExtendedCharacterInfo(uchar codePoint);</syntax>
                            <parameters>
                                <parameter>
                                    <name>codePoint</name>
                                    <type ref="type.8699078"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700081"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_CharacterTable_FFF763D4390483BDA7060CE6BD1418507E949CB5">
                            <name>Instance()</name>
                            <syntax>public static CharacterTable&amp; Instance();</syntax>
                            <returnType ref="type.8700102"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_ExtendedCharacterInfo_16A04F00C660DF07340D57AC4BB8303B8A7CBAD5">
                    <name>ExtendedCharacterInfo</name>
                    <groupName>ExtendedCharacterInfo</groupName>
                    <syntax> public class ExtendedCharacterInfo;</syntax>
                    <constructors>
                        <constructor id="default_constructor_ExtendedCharacterInfo_71C15B7DF5B99586244DBA2BCFAACDD56FE720EF">
                            <name>ExtendedCharacterInfo()</name>
                            <syntax>public nothrow ExtendedCharacterInfo();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Aliases_ExtendedCharacterInfo_B24744839A92D326628589D5D8F0AF5C089E68DF">
                            <name>Aliases() const</name>
                            <syntax>public nothrow inline const List&lt;System.Unicode.Alias>&amp; Aliases() const;</syntax>
                            <returnType ref="type.8704940"/>
                        </function>
                        <function id="member_function_BidiClassValue_ExtendedCharacterInfo_855EEA6F26CBD983C6B15517AA3DEB2033B210E9">
                            <name>BidiClassValue() const</name>
                            <syntax>public nothrow inline BidiClassId BidiClassValue() const;</syntax>
                            <returnType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                        </function>
                        <function id="member_function_BidiMirroringGlyph_ExtendedCharacterInfo_82512148496B2965744824DD1041393A383CDBAD">
                            <name>BidiMirroringGlyph() const</name>
                            <syntax>public nothrow inline uchar BidiMirroringGlyph() const;</syntax>
                            <returnType ref="type.8699078"/>
                        </function>
                        <function id="member_function_BidiPairedBracket_ExtendedCharacterInfo_35340D3D38098E4AF4D3DEA5BEEC70FC0DACED08">
                            <name>BidiPairedBracket()</name>
                            <syntax>public nothrow inline uchar BidiPairedBracket();</syntax>
                            <returnType ref="type.8699078"/>
                        </function>
                        <function id="member_function_BidiPairedBracketTypeValue_ExtendedCharacterInfo_2C8655B0D798048D5296FFAB8EA92B5B0E916FE8">
                            <name>BidiPairedBracketTypeValue() const</name>
                            <syntax>public nothrow inline BidiPairedBracketTypeId BidiPairedBracketTypeValue() const;</syntax>
                            <returnType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                        </function>
                        <function id="member_function_CanonicalCombiningClass_ExtendedCharacterInfo_B44F7BC0BD7F7BD6F42036F9AD61DD29804F8A80">
                            <name>CanonicalCombiningClass() const</name>
                            <syntax>public nothrow inline byte CanonicalCombiningClass() const;</syntax>
                            <returnType ref="type.8699067"/>
                        </function>
                        <function id="member_function_CharacterName_ExtendedCharacterInfo_476B7EED7965C4363F5DD40D1953117F65BE6C5F">
                            <name>CharacterName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; CharacterName() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                        <function id="member_function_FullFolding_ExtendedCharacterInfo_5C913DB4BE6EF915E83F3E6D3323E5FF4B4070EC">
                            <name>FullFolding() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; FullFolding() const;</syntax>
                            <returnType ref="type.8700299"/>
                        </function>
                        <function id="member_function_FullLower_ExtendedCharacterInfo_86528470BA5E5E1326BE7E18641696054AC05145">
                            <name>FullLower() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; FullLower() const;</syntax>
                            <returnType ref="type.8700299"/>
                        </function>
                        <function id="member_function_FullTitle_ExtendedCharacterInfo_42EE41AC1F7CBABB0AD2EED2361B536F891937BB">
                            <name>FullTitle() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; FullTitle() const;</syntax>
                            <returnType ref="type.8700299"/>
                        </function>
                        <function id="member_function_FullUpper_ExtendedCharacterInfo_7AC83F5353CDD53E8B7971325FA9A6121C0F5595">
                            <name>FullUpper() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; FullUpper() const;</syntax>
                            <returnType ref="type.8700299"/>
                        </function>
                        <function id="member_function_NumericTypeValue_ExtendedCharacterInfo_3F38E1AB167D89161B4C892FE39AB54AB4D27708">
                            <name>NumericTypeValue() const</name>
                            <syntax>public nothrow inline NumericTypeId NumericTypeValue() const;</syntax>
                            <returnType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                        </function>
                        <function id="member_function_NumericValue_ExtendedCharacterInfo_840D8E39A8928E5D0389C1BF8073D7AB51BE60C4">
                            <name>NumericValue() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; NumericValue() const;</syntax>
                            <returnType ref="type.8700299"/>
                        </function>
                        <function id="member_function_Read_ExtendedCharacterInfo_88C8D8BAABFD9A97A0A98B0DD8F04C563ACFF989">
                            <name>Read(BinaryReader&amp; reader)</name>
                            <syntax>public void Read(BinaryReader&amp; reader);</syntax>
                            <parameters>
                                <parameter>
                                    <name>reader</name>
                                    <type ref="type.8699394"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Unicode1Name_ExtendedCharacterInfo_89F86767C8D88D579C24498A073800C60DEAEDA5">
                            <name>Unicode1Name() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Unicode1Name() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                    </functions>
                </class>
                <class id="class_ExtendedCharacterInfoHeader_576C0EF15E9D47D0C66368F00AC7DC7E893196EA">
                    <name>ExtendedCharacterInfoHeader</name>
                    <groupName>ExtendedCharacterInfoHeader</groupName>
                    <syntax> public class ExtendedCharacterInfoHeader;</syntax>
                    <constructors>
                        <constructor id="default_constructor_ExtendedCharacterInfoHeader_2C53910ECC8A9879CE646F221F36B988281E2D0A">
                            <name>ExtendedCharacterInfoHeader()</name>
                            <syntax>public ExtendedCharacterInfoHeader();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Read_ExtendedCharacterInfoHeader_9AE07DC3EC802A42C08EBF4325BC51C5B6CDCEE8">
                            <name>Read(BinaryReader&amp; reader)</name>
                            <syntax>public void Read(BinaryReader&amp; reader);</syntax>
                            <parameters>
                                <parameter>
                                    <name>reader</name>
                                    <type ref="type.8699394"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_op_index_ExtendedCharacterInfoHeader_713E346877DD531D7741284C4010D2F781053F67">
                            <name>operator[](long index) const</name>
                            <syntax>public uint operator[](long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699071"/>
                        </function>
                    </functions>
                </class>
                <class id="class_ExtendedCharacterInfoPage_0C6801CB06DC546FE37445397210DCBF2F411EC7">
                    <name>ExtendedCharacterInfoPage</name>
                    <groupName>ExtendedCharacterInfoPage</groupName>
                    <syntax> public class ExtendedCharacterInfoPage;</syntax>
                    <constructors>
                        <constructor id="default_constructor_ExtendedCharacterInfoPage_EA52F08DA30138C286C485ED991923C3BFCE8A57">
                            <name>ExtendedCharacterInfoPage()</name>
                            <syntax>public ExtendedCharacterInfoPage();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Read_ExtendedCharacterInfoPage_AB62C5E9C849F03DE92908913713AE87AB50245B">
                            <name>Read(BinaryReader&amp; reader)</name>
                            <syntax>public void Read(BinaryReader&amp; reader);</syntax>
                            <parameters>
                                <parameter>
                                    <name>reader</name>
                                    <type ref="type.8699394"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_op_index_ExtendedCharacterInfoPage_8A8C5EB717EB590EA9D7571F9708CEE1FDBB42DB">
                            <name>operator[](long index) const</name>
                            <syntax>public const ExtendedCharacterInfo&amp; operator[](long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700081"/>
                        </function>
                    </functions>
                </class>
                <class id="class_GeneralCategory_86A96836F81F142768F75E4C134A416E3DB84E08">
                    <name>GeneralCategory</name>
                    <groupName>GeneralCategory</groupName>
                    <syntax> public class GeneralCategory;</syntax>
                    <constructors>
                        <constructor id="constructor_GeneralCategory_4E1790328BACE558AFFE0ED4B6A04CB60716D7A1">
                            <name>GeneralCategory(GeneralCategoryId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_)</name>
                            <syntax>public nothrow GeneralCategory(GeneralCategoryId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                                </parameter>
                                <parameter>
                                    <name>shortName_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>longName_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Id_GeneralCategory_B48432BB76D5AD97F2B0F71C53BAEB3E5A8F0933">
                            <name>Id()</name>
                            <syntax>public nothrow inline GeneralCategoryId Id();</syntax>
                            <returnType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                        </function>
                        <function id="member_function_LongName_GeneralCategory_75BE0C9C84EC7D1884F95EADBA5C804C05FB7138">
                            <name>LongName()</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; LongName();</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                        <function id="member_function_ShortName_GeneralCategory_2A12D1FDFD1E352D612E50F52908D70FC2CD0E3E">
                            <name>ShortName()</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; ShortName();</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                    </functions>
                </class>
                <class id="class_GeneralCategoryTable_3109B631555A0B27CBC86AC6578E1E5835FD0ADE">
                    <name>GeneralCategoryTable</name>
                    <groupName>GeneralCategoryTable</groupName>
                    <syntax> public class GeneralCategoryTable;</syntax>
                    <functions>
                        <function id="member_function_GetGeneralCategory_GeneralCategoryTable_839872350602275ABAFDF64E304D8B90B7894F6E">
                            <name>GetGeneralCategory(GeneralCategoryId id) const</name>
                            <syntax>public nothrow const GeneralCategory* GetGeneralCategory(GeneralCategoryId id) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8703479"/>
                        </function>
                        <function id="member_function_GetGeneralCategoryByLongName_GeneralCategoryTable_91954A63E6A4BFCB0EAD90EDF743928620ACE9CD">
                            <name>GetGeneralCategoryByLongName(const String&lt;char>&amp; longName) const</name>
                            <syntax>public const GeneralCategory* GetGeneralCategoryByLongName(const String&lt;char>&amp; longName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>longName</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8703479"/>
                        </function>
                        <function id="member_function_GetGeneralCategoryByShortName_GeneralCategoryTable_1EBFE833F51415997A79A808CCDEED714C4351F1">
                            <name>GetGeneralCategoryByShortName(const String&lt;char>&amp; shortName) const</name>
                            <syntax>public const GeneralCategory* GetGeneralCategoryByShortName(const String&lt;char>&amp; shortName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>shortName</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8703479"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_GeneralCategoryTable_3EC9058FD94696387EE023B151F74B2D4B2FE8D5">
                            <name>Instance()</name>
                            <syntax>public static GeneralCategoryTable&amp; Instance();</syntax>
                            <returnType ref="type.8699985"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_NumericType_67577CECB2CE245BF3E658544DD408CD213F0007">
                    <name>NumericType</name>
                    <groupName>NumericType</groupName>
                    <syntax> public class NumericType;</syntax>
                    <constructors>
                        <constructor id="constructor_NumericType_AA7CA9C59E2368C28DBAB97E8EF7E147F9DCECE9">
                            <name>NumericType(NumericTypeId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_)</name>
                            <syntax>public nothrow NumericType(NumericTypeId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                                </parameter>
                                <parameter>
                                    <name>shortName_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>longName_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Id_NumericType_4693FB042A4816CAFF36F95675C668C128E841CC">
                            <name>Id() const</name>
                            <syntax>public nothrow inline NumericTypeId Id() const;</syntax>
                            <returnType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                        </function>
                        <function id="member_function_LongName_NumericType_53B1812EBBE2A8FDBE886384AB0167A7B9534E1E">
                            <name>LongName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; LongName() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                        <function id="member_function_ShortName_NumericType_9DE261B510973BB42EBAF546FABF6D0651FC357D">
                            <name>ShortName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; ShortName() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                    </functions>
                </class>
                <class id="class_NumericTypeTable_D5D406F33CCAC2C03087278A817836F0F3A3D92A">
                    <name>NumericTypeTable</name>
                    <groupName>NumericTypeTable</groupName>
                    <syntax> public class NumericTypeTable;</syntax>
                    <functions>
                        <function id="member_function_GetNumericType_NumericTypeTable_C0998AA5D669A4D93B9A9F82603D42B6E38A6085">
                            <name>GetNumericType(NumericTypeId id) const</name>
                            <syntax>public const NumericType* GetNumericType(NumericTypeId id) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700023"/>
                        </function>
                        <function id="member_function_GetNumericTypeByLongName_NumericTypeTable_99CE247847BD56BED1C10BF12F902A7C2C48CB82">
                            <name>GetNumericTypeByLongName(const String&lt;char>&amp; longName) const</name>
                            <syntax>public const NumericType* GetNumericTypeByLongName(const String&lt;char>&amp; longName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>longName</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700023"/>
                        </function>
                        <function id="member_function_GetNumericTypeByShortName_NumericTypeTable_7751D60D774BCFA3CFE83F74D83AFA5BEBA2993D">
                            <name>GetNumericTypeByShortName(const String&lt;char>&amp; shortName) const</name>
                            <syntax>public const NumericType* GetNumericTypeByShortName(const String&lt;char>&amp; shortName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>shortName</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700023"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_NumericTypeTable_6087FA1AB8F8F6B39034A663400357AA7B208528">
                            <name>Instance()</name>
                            <syntax>public static NumericTypeTable&amp; Instance();</syntax>
                            <returnType ref="type.8700030"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_Script_B4DC79C213FBE18703FB167088AE40DA330EDFEE">
                    <name>Script</name>
                    <groupName>Script</groupName>
                    <syntax> public class Script;</syntax>
                    <constructors>
                        <constructor id="constructor_Script_E816BFE748DADE29FBD3A02C4C5588D16235967B">
                            <name>Script(ScriptId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_)</name>
                            <syntax>public nothrow Script(ScriptId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                                </parameter>
                                <parameter>
                                    <name>shortName_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>longName_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Id_Script_F700DD8C5AEC988E42E194572699C87B7A41C1E8">
                            <name>Id() const</name>
                            <syntax>public nothrow inline ScriptId Id() const;</syntax>
                            <returnType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                        </function>
                        <function id="member_function_LongName_Script_A0F8BE88A9ABF9FC1B61E2D249266CF19BEA43F4">
                            <name>LongName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; LongName() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                        <function id="member_function_ShortName_Script_37C0020F00B4103484FE454A62FE3B3E4A7DC47C">
                            <name>ShortName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; ShortName() const;</syntax>
                            <returnType ref="type.8700211"/>
                        </function>
                    </functions>
                </class>
                <class id="class_ScriptTable_CEB3F0C6961FADA195D3CEC50AC41CB1955D92CF">
                    <name>ScriptTable</name>
                    <groupName>ScriptTable</groupName>
                    <syntax> public class ScriptTable;</syntax>
                    <functions>
                        <function id="member_function_GetScript_ScriptTable_ACF79696A32FD77C4BC0FBDD323BCDACFAC19350">
                            <name>GetScript(ScriptId id) const</name>
                            <syntax>public const Script* GetScript(ScriptId id) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700004"/>
                        </function>
                        <function id="member_function_GetScriptByLongName_ScriptTable_FE1461489F277D6E6E9382AD7E1B6766AFE1B96C">
                            <name>GetScriptByLongName(const String&lt;char>&amp; longName) const</name>
                            <syntax>public const Script* GetScriptByLongName(const String&lt;char>&amp; longName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>longName</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700004"/>
                        </function>
                        <function id="member_function_GetScriptByShortName_ScriptTable_8F5C0AB4B1E54DA612BD20A7A978CB6FB4EAA22F">
                            <name>GetScriptByShortName(const String&lt;char>&amp; shortName) const</name>
                            <syntax>public const Script* GetScriptByShortName(const String&lt;char>&amp; shortName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>shortName</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700004"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_ScriptTable_6A04AA6099B4997361DBB78285F669E13364865A">
                            <name>Instance()</name>
                            <syntax>public static ScriptTable&amp; Instance();</syntax>
                            <returnType ref="type.8700011"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079">
                    <name>UnicodeException</name>
                    <groupName>UnicodeException</groupName>
                    <syntax> public class UnicodeException;</syntax>
                    <baseClass ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                    <constructors>
                        <constructor id="constructor_UnicodeException_2EAF7A972CD58C6D3406BA6864BD32D24A2B5955">
                            <name>UnicodeException(const String&lt;char>&amp; message_)</name>
                            <syntax>public nothrow UnicodeException(const String&lt;char>&amp; message_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
            </classes>
            <functions>
                <function id="function_group_GetAge_8C88A885DC339596A95BB5321DBB200083BA5B97">
                    <name>GetAge</name>
                    <overloads>
                        <overload id="function_GetAge_FCE043877EB3D76C87AA9CED298EC5B31A12CD3D">
                            <name>GetAge(AgeId id)</name>
                            <syntax>public const Age* GetAge(AgeId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699991"/>
                        </overload>
                        <overload id="function_GetAge_DF86DB9EC3916504F59D8CAEE32C50A460670971">
                            <name>GetAge(const String&lt;char>&amp; version)</name>
                            <syntax>public const Age* GetAge(const String&lt;char>&amp; version);</syntax>
                            <parameters>
                                <parameter>
                                    <name>version</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699991"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_GetAliasType_5BAD7D7E3328583145982BD542F327BFBDC3971B">
                    <name>GetAliasType</name>
                    <overloads>
                        <overload id="function_GetAliasType_5131EFDFD89738E0E33A23C971810844963D2119">
                            <name>GetAliasType(AliasTypeId id)</name>
                            <syntax>public const AliasType* GetAliasType(AliasTypeId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700062"/>
                        </overload>
                        <overload id="function_GetAliasType_606DABF861AB5B05A5E66D1699CD9F9591820458">
                            <name>GetAliasType(const String&lt;char>&amp; name)</name>
                            <syntax>public const AliasType* GetAliasType(const String&lt;char>&amp; name);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700062"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_GetBidiClass_17DCBD47B6BECC842977606746E459F559437820">
                    <name>GetBidiClass(BidiClassId id)</name>
                    <syntax>public const BidiClass* GetBidiClass(BidiClassId id);</syntax>
                    <parameters>
                        <parameter>
                            <name>id</name>
                            <type ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700036"/>
                </function>
                <function id="function_GetBidiClassByLongName_FC1E64B9296E1D0C2175EE07BE61239E516533B4">
                    <name>GetBidiClassByLongName(const String&lt;char>&amp; longName)</name>
                    <syntax>public const BidiClass* GetBidiClassByLongName(const String&lt;char>&amp; longName);</syntax>
                    <parameters>
                        <parameter>
                            <name>longName</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700036"/>
                </function>
                <function id="function_GetBidiClassByShortName_38207E9FCF55C4D784FC1475F9AE5C6FBCA5F7C8">
                    <name>GetBidiClassByShortName(const String&lt;char>&amp; shortName)</name>
                    <syntax>public const BidiClass* GetBidiClassByShortName(const String&lt;char>&amp; shortName);</syntax>
                    <parameters>
                        <parameter>
                            <name>shortName</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700036"/>
                </function>
                <function id="function_GetBidiPairedBracketType_73FF6C3125D90826758F5B6349002E7758476278">
                    <name>GetBidiPairedBracketType(BidiPairedBracketTypeId id)</name>
                    <syntax>public const BidiPairedBracketType* GetBidiPairedBracketType(BidiPairedBracketTypeId id);</syntax>
                    <parameters>
                        <parameter>
                            <name>id</name>
                            <type ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700049"/>
                </function>
                <function id="function_GetBidiPairedBracketTypeByLongName_CB25709E45980F333C345B0446451674EB6A93F5">
                    <name>GetBidiPairedBracketTypeByLongName(const String&lt;char>&amp; longName)</name>
                    <syntax>public const BidiPairedBracketType* GetBidiPairedBracketTypeByLongName(const String&lt;char>&amp; longName);</syntax>
                    <parameters>
                        <parameter>
                            <name>longName</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700049"/>
                </function>
                <function id="function_GetBidiPairedBracketTypeByShortName_DB49F723DCA73BAF29016748A69979AC71177AE8">
                    <name>GetBidiPairedBracketTypeByShortName(const String&lt;char>&amp; shortName)</name>
                    <syntax>public const BidiPairedBracketType* GetBidiPairedBracketTypeByShortName(const String&lt;char>&amp; shortName);</syntax>
                    <parameters>
                        <parameter>
                            <name>shortName</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700049"/>
                </function>
                <function id="function_GetBinaryProperty_8198EF7E65082C2AB644EF1A2FA02B7BD9009AA5">
                    <name>GetBinaryProperty(BinaryPropertyId id)</name>
                    <syntax>public nothrow const BinaryProperty* GetBinaryProperty(BinaryPropertyId id);</syntax>
                    <parameters>
                        <parameter>
                            <name>id</name>
                            <type ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8703036"/>
                </function>
                <function id="function_GetBinaryPropertyByLongName_3C1B0F6BFF56DDB70DF3742107C4953B94E3FEE1">
                    <name>GetBinaryPropertyByLongName(String&lt;char> longName)</name>
                    <syntax>public const BinaryProperty* GetBinaryPropertyByLongName(String&lt;char> longName);</syntax>
                    <parameters>
                        <parameter>
                            <name>longName</name>
                            <type ref="type.8700206"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8703036"/>
                </function>
                <function id="function_GetBinaryPropertyByShortName_E11C5F2428C638230169A4997DBCF8EA689B3550">
                    <name>GetBinaryPropertyByShortName(String&lt;char> shortName)</name>
                    <syntax>public const BinaryProperty* GetBinaryPropertyByShortName(String&lt;char> shortName);</syntax>
                    <parameters>
                        <parameter>
                            <name>shortName</name>
                            <type ref="type.8700206"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8703036"/>
                </function>
                <function id="function_GetBlock_06FA17E00D6A61AE8509A39E8651D430DC9E6AD2">
                    <name>GetBlock(BlockId id)</name>
                    <syntax>public const Block* GetBlock(BlockId id);</syntax>
                    <parameters>
                        <parameter>
                            <name>id</name>
                            <type ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8703268"/>
                </function>
                <function id="function_GetBlockByLongName_A8082383E7780D2E9F4A6015A8C1A603B5E08178">
                    <name>GetBlockByLongName(const String&lt;char>&amp; longName)</name>
                    <syntax>public const Block* GetBlockByLongName(const String&lt;char>&amp; longName);</syntax>
                    <parameters>
                        <parameter>
                            <name>longName</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8703268"/>
                </function>
                <function id="function_GetBlockByShortName_81199047E7D2FCA53FB3FF437F4B9D018255D839">
                    <name>GetBlockByShortName(const String&lt;char>&amp; shortName)</name>
                    <syntax>public const Block* GetBlockByShortName(const String&lt;char>&amp; shortName);</syntax>
                    <parameters>
                        <parameter>
                            <name>shortName</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8703268"/>
                </function>
                <function id="function_GetCharacterInfo_465CC400257EACCA66CBFC96F8C478EC51E17E30">
                    <name>GetCharacterInfo(uchar codePoint)</name>
                    <syntax>public const CharacterInfo&amp; GetCharacterInfo(uchar codePoint);</syntax>
                    <parameters>
                        <parameter>
                            <name>codePoint</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700017"/>
                </function>
                <function id="function_GetExtendedCharacterInfo_CFCDBF14EBABFEE49F0E79CD8CCC9484B278C0D4">
                    <name>GetExtendedCharacterInfo(uchar codePoint)</name>
                    <syntax>public const ExtendedCharacterInfo&amp; GetExtendedCharacterInfo(uchar codePoint);</syntax>
                    <parameters>
                        <parameter>
                            <name>codePoint</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700081"/>
                </function>
                <function id="function_group_GetGeneralCategory_D57C2C957FEC08D82983EC8283583DC3D0C85FEC">
                    <name>GetGeneralCategory</name>
                    <overloads>
                        <overload id="function_GetGeneralCategory_FBBF71A13ABFC72FA20C3594EB360207A00A3830">
                            <name>GetGeneralCategory(GeneralCategoryId id)</name>
                            <syntax>public const GeneralCategory* GetGeneralCategory(GeneralCategoryId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8703479"/>
                        </overload>
                        <overload id="function_GetGeneralCategory_A2012BAC60AF4743CCB019E77820FB4774BD54DE">
                            <name>GetGeneralCategory(uchar c)</name>
                            <syntax>public GeneralCategoryId GetGeneralCategory(uchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.8699078"/>
                                </parameter>
                            </parameters>
                            <returnType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_GetGeneralCategoryByLongName_B71E39F53B5E06F5483EA2504DD0FBDC7CF66600">
                    <name>GetGeneralCategoryByLongName(const String&lt;char>&amp; longName)</name>
                    <syntax>public const GeneralCategory* GetGeneralCategoryByLongName(const String&lt;char>&amp; longName);</syntax>
                    <parameters>
                        <parameter>
                            <name>longName</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8703479"/>
                </function>
                <function id="function_GetGeneralCategoryByShortName_691FC7D7C9482EE8EECC9BAEF72D54C19388AA14">
                    <name>GetGeneralCategoryByShortName(const String&lt;char>&amp; shortName)</name>
                    <syntax>public const GeneralCategory* GetGeneralCategoryByShortName(const String&lt;char>&amp; shortName);</syntax>
                    <parameters>
                        <parameter>
                            <name>shortName</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8703479"/>
                </function>
                <function id="function_group_GetHashCode_89A2042A5CD2F7E3D9338AA1067835C2275AD586">
                    <name>GetHashCode</name>
                    <overloads>
                        <overload id="function_GetHashCode_6DA6FBD0E06B013D02900342E67C32DD93E15A38">
                            <name>GetHashCode(AgeId id)</name>
                            <syntax>public nothrow inline ulong GetHashCode(AgeId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_GetHashCode_DCBFFB5D8E21AFFA4501ED91251F202CF3003336">
                            <name>GetHashCode(AliasTypeId id)</name>
                            <syntax>public nothrow inline ulong GetHashCode(AliasTypeId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_GetHashCode_A331739E7A65B0C2DDB0FDF09B81335E46E60DBE">
                            <name>GetHashCode(BidiClassId id)</name>
                            <syntax>public nothrow inline ulong GetHashCode(BidiClassId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_GetHashCode_761023A133597A58620B33042C4F2CA14AB31E72">
                            <name>GetHashCode(BidiPairedBracketTypeId id)</name>
                            <syntax>public nothrow inline ulong GetHashCode(BidiPairedBracketTypeId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_GetHashCode_AFC706E33C739B708850783869FC12B45BF953D7">
                            <name>GetHashCode(BinaryPropertyId id)</name>
                            <syntax>public nothrow inline ulong GetHashCode(BinaryPropertyId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_GetHashCode_EE310E4EDC0CB81009A5E4995AF2F8EA4A9E08C3">
                            <name>GetHashCode(BlockId blockId)</name>
                            <syntax>public nothrow inline ulong GetHashCode(BlockId blockId);</syntax>
                            <parameters>
                                <parameter>
                                    <name>blockId</name>
                                    <type ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_GetHashCode_5BBF1F15FD513F80527549420F4B05CF6242DD2C">
                            <name>GetHashCode(GeneralCategoryId id)</name>
                            <syntax>public nothrow inline const ulong GetHashCode(GeneralCategoryId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700352"/>
                        </overload>
                        <overload id="function_GetHashCode_6D457CDA60494E1F39A65C7FC07165E2F99ECFB8">
                            <name>GetHashCode(NumericTypeId id)</name>
                            <syntax>public nothrow inline ulong GetHashCode(NumericTypeId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                        <overload id="function_GetHashCode_3BD25774E2728761590BF06718263CF7DDA0584C">
                            <name>GetHashCode(ScriptId id)</name>
                            <syntax>public nothrow inline ulong GetHashCode(ScriptId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699073"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_GetNumericType_E7EC2FA4A40A1271DB0E4FE68D15B58547E1B0BB">
                    <name>GetNumericType(NumericTypeId id)</name>
                    <syntax>public const NumericType* GetNumericType(NumericTypeId id);</syntax>
                    <parameters>
                        <parameter>
                            <name>id</name>
                            <type ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700023"/>
                </function>
                <function id="function_GetNumericTypeByLongName_7410AF6CE718D1C2FE93C82E30121776AD17183C">
                    <name>GetNumericTypeByLongName(const String&lt;char>&amp; longName)</name>
                    <syntax>public const NumericType* GetNumericTypeByLongName(const String&lt;char>&amp; longName);</syntax>
                    <parameters>
                        <parameter>
                            <name>longName</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700023"/>
                </function>
                <function id="function_GetNumericTypeByShortName_9C8E6B2B6DA07FAC7C74CFA825C1EAE17AEA9BB3">
                    <name>GetNumericTypeByShortName(const String&lt;char>&amp; shortName)</name>
                    <syntax>public const NumericType* GetNumericTypeByShortName(const String&lt;char>&amp; shortName);</syntax>
                    <parameters>
                        <parameter>
                            <name>shortName</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700023"/>
                </function>
                <function id="function_GetScript_F1DCB244992D0D6766827D24FE60B576565B2E27">
                    <name>GetScript(ScriptId id)</name>
                    <syntax>public const Script* GetScript(ScriptId id);</syntax>
                    <parameters>
                        <parameter>
                            <name>id</name>
                            <type ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700004"/>
                </function>
                <function id="function_GetScriptByLongName_A753237FFEF1630A72F30B9C6C478BDBBBBB181A">
                    <name>GetScriptByLongName(const String&lt;char>&amp; longName)</name>
                    <syntax>public const Script* GetScriptByLongName(const String&lt;char>&amp; longName);</syntax>
                    <parameters>
                        <parameter>
                            <name>longName</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700004"/>
                </function>
                <function id="function_GetScriptByShortName_CDE61F43314096507222CAF8E79E5850026974FB">
                    <name>GetScriptByShortName(const String&lt;char>&amp; shortName)</name>
                    <syntax>public const Script* GetScriptByShortName(const String&lt;char>&amp; shortName);</syntax>
                    <parameters>
                        <parameter>
                            <name>shortName</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700004"/>
                </function>
                <function id="function_HasGeneralCategory_433C1196F6F5600F2CFD9428AEEC08DA42278C7B">
                    <name>HasGeneralCategory(uchar c, GeneralCategoryId generalCategory)</name>
                    <syntax>public bool HasGeneralCategory(uchar c, GeneralCategoryId generalCategory);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.8699078"/>
                        </parameter>
                        <parameter>
                            <name>generalCategory</name>
                            <type ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
                <function id="function_MakeCanonicalPropertyName_431B6D493A0B0C0ADB2BCEF9955C922DF2F74C1E">
                    <name>MakeCanonicalPropertyName(const String&lt;char>&amp; s)</name>
                    <syntax>public String&lt;char> MakeCanonicalPropertyName(const String&lt;char>&amp; s);</syntax>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700206"/>
                </function>
                <function id="function_PathToUcdBinFile_457C6951EB09C991B5FC8A5F72CDE66CF8949E4B">
                    <name>PathToUcdBinFile()</name>
                    <syntax>public String&lt;char> PathToUcdBinFile();</syntax>
                    <returnType ref="type.8700206"/>
                </function>
                <function id="function_PathToUnicodeDirectory_C1606E555D6C5C32BDDA57C3B6E4D8FAE0327F0C">
                    <name>PathToUnicodeDirectory()</name>
                    <syntax>public String&lt;char> PathToUnicodeDirectory();</syntax>
                    <returnType ref="type.8700206"/>
                </function>
                <function id="function_ThrowUnicodeException_51091169DBCE4D2D78BCCFC418E278FE7DC7A618">
                    <name>ThrowUnicodeException(const String&lt;char>&amp; message)</name>
                    <syntax>public void ThrowUnicodeException(const String&lt;char>&amp; message);</syntax>
                    <parameters>
                        <parameter>
                            <name>message</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_group_op_eq_113E99B94B6066F05BCB5D8853925A6908CA0763">
                    <name>operator==</name>
                    <overloads>
                        <overload id="function_op_eq_83A8B7FEB821A3E5376B401A7BF4EA90AB09B330">
                            <name>operator==(AgeId left, AgeId right)</name>
                            <syntax>public bool operator==(AgeId left, AgeId right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_67827E8957B60EE5DFE915D24522AAD7C26E2632">
                            <name>operator==(AliasTypeId left, AliasTypeId right)</name>
                            <syntax>public bool operator==(AliasTypeId left, AliasTypeId right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_6149115F4696250818CA959B79694D8992644D65">
                            <name>operator==(BidiClassId left, BidiClassId right)</name>
                            <syntax>public bool operator==(BidiClassId left, BidiClassId right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_BE9E5E35E1917F52586BBC2681FC2DB047C3D91A">
                            <name>operator==(BidiPairedBracketTypeId left, BidiPairedBracketTypeId right)</name>
                            <syntax>public bool operator==(BidiPairedBracketTypeId left, BidiPairedBracketTypeId right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_AFF4F76F08CDE93AA35B06C74A0E3ABF41C9CA4F">
                            <name>operator==(BinaryPropertyId left, BinaryPropertyId right)</name>
                            <syntax>public bool operator==(BinaryPropertyId left, BinaryPropertyId right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_5C7F33A8AD6D2B38731AA453E2568EAABA26EF4D">
                            <name>operator==(BlockId left, BlockId right)</name>
                            <syntax>public bool operator==(BlockId left, BlockId right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_56DD78300CDAA77EFA674B212F37C6DA6B4A8A25">
                            <name>operator==(GeneralCategoryId left, GeneralCategoryId right)</name>
                            <syntax>public bool operator==(GeneralCategoryId left, GeneralCategoryId right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_9D813DC24A843D463836CC5E8DFFA6C7BE28B4C8">
                            <name>operator==(NumericTypeId left, NumericTypeId right)</name>
                            <syntax>public bool operator==(NumericTypeId left, NumericTypeId right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                        <overload id="function_op_eq_0A3FE44ED63F035DA0D27F69D568AA9AA65BFC5D">
                            <name>operator==(ScriptId left, ScriptId right)</name>
                            <syntax>public bool operator==(ScriptId left, ScriptId right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8699065"/>
                        </overload>
                    </overloads>
                </function>
            </functions>
            <constants>
                <constant id="constant_characterInfoPageSize_1CFACF5D275D30BAA969366B45F004B8AABB4EF5">
                    <name>characterInfoPageSize</name>
                    <syntax>public const uint characterInfoPageSize = 32768u;</syntax>
                    <type ref="type.8699071"/>
                    <value>32768u</value>
                </constant>
                <constant id="constant_characterInfoSize_675F322735FDCA39CF3C4A82CAD21A7E2BDE4133">
                    <name>characterInfoSize</name>
                    <syntax>public const uint characterInfoSize = 32u;</syntax>
                    <type ref="type.8699071"/>
                    <value>32u</value>
                </constant>
                <constant id="constant_cmajor_ucd_version_1_26A3FD99ABF62AC00BDA25708F1A77BF73223BBD">
                    <name>cmajor_ucd_version_1</name>
                    <syntax>public const byte cmajor_ucd_version_1 = 49u;</syntax>
                    <type ref="type.8699067"/>
                    <value>49u</value>
                </constant>
                <constant id="constant_current_cmajor_ucd_version_FC285C4C47B9986B55F53C617D1038D02D9A6CEF">
                    <name>current_cmajor_ucd_version</name>
                    <syntax>public const byte current_cmajor_ucd_version = 49u;</syntax>
                    <type ref="type.8699067"/>
                    <value>49u</value>
                </constant>
                <constant id="constant_numInfosInPage_780066B664B17182EE3C0EC04EAEB023C2F867A3">
                    <name>numInfosInPage</name>
                    <syntax>public const long numInfosInPage = 1024;</syntax>
                    <type ref="type.8699072"/>
                    <value>1024</value>
                </constant>
            </constants>
            <enumerations>
                <enumeration id="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027">
                    <name>AgeId</name>
                    <syntax>public enum AgeId;</syntax>
                    <underlyingType ref="type.8699067"/>
                    <enumConstant>
                        <name>age_unassigned</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_1_1</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_2_0</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_2_1</name>
                        <value>3u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_3_0</name>
                        <value>4u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_3_1</name>
                        <value>5u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_3_2</name>
                        <value>6u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_4_0</name>
                        <value>7u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_4_1</name>
                        <value>8u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_5_0</name>
                        <value>9u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_5_1</name>
                        <value>10u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_5_2</name>
                        <value>11u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_6_0</name>
                        <value>12u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_6_1</name>
                        <value>13u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_6_2</name>
                        <value>14u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_6_3</name>
                        <value>15u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_7_0</name>
                        <value>16u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_8_0</name>
                        <value>17u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_9_0</name>
                        <value>18u</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27">
                    <name>AliasTypeId</name>
                    <syntax>public enum AliasTypeId;</syntax>
                    <underlyingType ref="type.8699067"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>correction</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>control</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>alternate</name>
                        <value>3u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>figment</name>
                        <value>4u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>abbreviation</name>
                        <value>5u</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7">
                    <name>BidiClassId</name>
                    <syntax>public enum BidiClassId;</syntax>
                    <underlyingType ref="type.8699067"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>al</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>an</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>b</name>
                        <value>3u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bn</name>
                        <value>4u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cs</name>
                        <value>5u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>en</name>
                        <value>6u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>es</name>
                        <value>7u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>et</name>
                        <value>8u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>fsi</name>
                        <value>9u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>l</name>
                        <value>10u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lre</name>
                        <value>11u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lri</name>
                        <value>12u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lro</name>
                        <value>13u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>nsm</name>
                        <value>14u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>on</name>
                        <value>15u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>pdf</name>
                        <value>16u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>pdi</name>
                        <value>17u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>r</name>
                        <value>18u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>rle</name>
                        <value>19u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>rli</name>
                        <value>20u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>rlo</name>
                        <value>21u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>s</name>
                        <value>22u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ws</name>
                        <value>23u</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0">
                    <name>BidiPairedBracketTypeId</name>
                    <syntax>public enum BidiPairedBracketTypeId;</syntax>
                    <underlyingType ref="type.8699067"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>o</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>c</name>
                        <value>2u</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E">
                    <name>BinaryPropertyId</name>
                    <syntax>public enum BinaryPropertyId;</syntax>
                    <underlyingType ref="type.8699067"/>
                    <enumConstant>
                        <name>asciiHexDigit</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>alphabetic</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bidiControl</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bidiMirrored</name>
                        <value>3u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cased</name>
                        <value>4u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>compositionExclusion</name>
                        <value>5u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>caseIgnorable</name>
                        <value>6u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>fullCompositionExclusion</name>
                        <value>7u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>changesWhenCasefolded</name>
                        <value>8u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>changesWhenCaseMapped</name>
                        <value>9u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>changesWhenNFKCCasefolded</name>
                        <value>10u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>changesWhenLowercased</name>
                        <value>11u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>changesWhenTitlecased</name>
                        <value>12u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>changesWhenUppercased</name>
                        <value>13u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>dash</name>
                        <value>14u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>deprecated</name>
                        <value>15u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>defaultIgnorableCodePoint</name>
                        <value>16u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>diacritic</name>
                        <value>17u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>extender</name>
                        <value>18u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>graphemeBase</name>
                        <value>19u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>graphemeExtend</name>
                        <value>20u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>graphemeLink</name>
                        <value>21u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hexDigit</name>
                        <value>22u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hyphen</name>
                        <value>23u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>idContinue</name>
                        <value>24u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ideographic</name>
                        <value>25u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>idStart</name>
                        <value>26u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>idsBinaryOperator</name>
                        <value>27u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>idsTrinaryOperator</name>
                        <value>28u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>joinControl</name>
                        <value>29u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>logicalOrderException</name>
                        <value>30u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lowercase</name>
                        <value>31u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>math</name>
                        <value>32u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>noncharacterCodePoint</name>
                        <value>33u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>otherAlphabetic</name>
                        <value>34u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>otherDefaultIgnorableCodePoint</name>
                        <value>35u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>otherGraphemeExtend</name>
                        <value>36u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>otherIdContinue</name>
                        <value>37u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>otherIdStart</name>
                        <value>38u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>otherLowercase</name>
                        <value>39u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>otherMath</name>
                        <value>40u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>otherUppercase</name>
                        <value>41u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>patternSyntax</name>
                        <value>42u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>patternWhiteSpace</name>
                        <value>43u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>prependedConcatenationMark</name>
                        <value>44u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>quotationMark</name>
                        <value>45u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>radical</name>
                        <value>46u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>softDotted</name>
                        <value>47u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sentenceterminal</name>
                        <value>48u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>terminalPunctuation</name>
                        <value>49u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>unifiedIdeograph</name>
                        <value>50u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>uppercase</name>
                        <value>51u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>variationSelector</name>
                        <value>52u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>whiteSpace</name>
                        <value>53u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>xidContinue</name>
                        <value>54u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>xidStart</name>
                        <value>55u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>expandsOnNFC</name>
                        <value>56u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>expandsOnNFD</name>
                        <value>57u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>expandsOnNFKC</name>
                        <value>58u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>expandsOnNFKD</name>
                        <value>59u</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370">
                    <name>BlockId</name>
                    <syntax>public enum BlockId;</syntax>
                    <underlyingType ref="type.8699069"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>adlam</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>aegeanNumbers</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ahom</name>
                        <value>3u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>alchemical</name>
                        <value>4u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>alphabeticPf</name>
                        <value>5u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>anatolianHieroglyphs</name>
                        <value>6u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ancientGreekMusic</name>
                        <value>7u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ancientGreekNumbers</name>
                        <value>8u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ancientSymbols</name>
                        <value>9u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>arabic</name>
                        <value>10u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>arabicExtA</name>
                        <value>11u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>arabicMath</name>
                        <value>12u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>arabicPfA</name>
                        <value>13u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>arabicPfB</name>
                        <value>14u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>arabicSup</name>
                        <value>15u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>armenian</name>
                        <value>16u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>arrows</name>
                        <value>17u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ascii</name>
                        <value>18u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>avestan</name>
                        <value>19u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>balinese</name>
                        <value>20u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bamum</name>
                        <value>21u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bamumSup</name>
                        <value>22u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bassaVah</name>
                        <value>23u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>batak</name>
                        <value>24u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bengali</name>
                        <value>25u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bhaisuki</name>
                        <value>26u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>blockElements</name>
                        <value>27u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bopomofo</name>
                        <value>28u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bopomofoExt</name>
                        <value>29u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>boxDrawing</name>
                        <value>30u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>brahmi</name>
                        <value>31u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>braille</name>
                        <value>32u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>buginese</name>
                        <value>33u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>buhid</name>
                        <value>34u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>byzantineMusic</name>
                        <value>35u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>carian</name>
                        <value>36u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>caucasianAlbanian</name>
                        <value>37u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>chakma</name>
                        <value>38u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cham</name>
                        <value>39u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cherokee</name>
                        <value>40u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cherokeeSup</name>
                        <value>41u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjk</name>
                        <value>42u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkCompat</name>
                        <value>43u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkCompatForms</name>
                        <value>44u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkCompatIdeographs</name>
                        <value>45u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkCompatIdeographsSup</name>
                        <value>46u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkExtA</name>
                        <value>47u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkExtB</name>
                        <value>48u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkExtC</name>
                        <value>49u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkExtD</name>
                        <value>50u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkExtE</name>
                        <value>51u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkRadicalsSup</name>
                        <value>52u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkStrokes</name>
                        <value>53u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkSymbols</name>
                        <value>54u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>compatJamo</name>
                        <value>55u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>controlPictures</name>
                        <value>56u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>coptic</name>
                        <value>57u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>copticEpactNumbers</name>
                        <value>58u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>countingRod</name>
                        <value>59u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cuneiform</name>
                        <value>60u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cuneiformNumbers</name>
                        <value>61u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>currencySymbols</name>
                        <value>62u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cypriotSyllabary</name>
                        <value>63u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cyrillic</name>
                        <value>64u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cyrillicExtA</name>
                        <value>65u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cyrillicExtB</name>
                        <value>66u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cyrillicExtC</name>
                        <value>67u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cyrillicSup</name>
                        <value>68u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>deseret</name>
                        <value>69u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>devanagari</name>
                        <value>70u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>devanagariExt</name>
                        <value>71u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>diacriticals</name>
                        <value>72u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>diariticalsForSymbols</name>
                        <value>73u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>diacriticalsSup</name>
                        <value>74u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>diacriticalsExt</name>
                        <value>75u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>dingbats</name>
                        <value>76u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>domino</name>
                        <value>77u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>duployan</name>
                        <value>78u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>earlyDynasticCuneiform</name>
                        <value>79u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>egyptianHieroglyphs</name>
                        <value>80u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>elbasan</name>
                        <value>81u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>emoticons</name>
                        <value>82u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>enclosedAlphanum</name>
                        <value>83u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>enclosedAlphanumSup</name>
                        <value>84u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>enclosedCjk</name>
                        <value>85u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>enclosedIdeographicSup</name>
                        <value>86u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ethiopic</name>
                        <value>87u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ethiopicExt</name>
                        <value>88u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ethiopicExtA</name>
                        <value>89u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ethiopicSup</name>
                        <value>90u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>geometricShapes</name>
                        <value>91u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>geometricShapesExt</name>
                        <value>92u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>georgian</name>
                        <value>93u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>georgianSup</name>
                        <value>94u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>glagolitic</name>
                        <value>95u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>glagoliticSup</name>
                        <value>96u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>gothic</name>
                        <value>97u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>grantha</name>
                        <value>98u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>greek</name>
                        <value>99u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>greekExt</name>
                        <value>100u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>gujarati</name>
                        <value>101u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>gurmukhi</name>
                        <value>102u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>halfAndFullForms</name>
                        <value>103u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>halfMarks</name>
                        <value>104u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hangul</name>
                        <value>105u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hanunoo</name>
                        <value>106u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hatran</name>
                        <value>107u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hebrew</name>
                        <value>108u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>highPuSurrogates</name>
                        <value>109u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>highSurrogates</name>
                        <value>110u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hiragana</name>
                        <value>111u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>idc</name>
                        <value>112u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ideographicSymbols</name>
                        <value>113u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>imperialAramaic</name>
                        <value>114u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>indicNumberForms</name>
                        <value>115u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>inscriptionalPahlavi</name>
                        <value>116u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>inscriptionalParthian</name>
                        <value>117u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ipaExt</name>
                        <value>118u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>jamo</name>
                        <value>119u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>jamoExtA</name>
                        <value>120u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>jamoExtB</name>
                        <value>121u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>javanese</name>
                        <value>122u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kaithi</name>
                        <value>123u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kanaSup</name>
                        <value>124u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kanbun</name>
                        <value>125u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kangxi</name>
                        <value>126u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kannada</name>
                        <value>127u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>katakana</name>
                        <value>128u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>katakanaExt</name>
                        <value>129u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kayahLi</name>
                        <value>130u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kharoshthi</name>
                        <value>131u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>khmer</name>
                        <value>132u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>khmerSymbols</name>
                        <value>133u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>khojki</name>
                        <value>134u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>khudawadi</name>
                        <value>135u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lao</name>
                        <value>136u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>latin1Sup</name>
                        <value>137u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>latinExtA</name>
                        <value>138u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>latinExtAdditional</name>
                        <value>139u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>latinExtB</name>
                        <value>140u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>latinExtC</name>
                        <value>141u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>latinExtD</name>
                        <value>142u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>latinExtE</name>
                        <value>143u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lepcha</name>
                        <value>144u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>letterlikeSymbols</name>
                        <value>145u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>limbu</name>
                        <value>146u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>linearA</name>
                        <value>147u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>linearBIdeograms</name>
                        <value>148u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>linearBSyllabary</name>
                        <value>149u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lisu</name>
                        <value>150u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lowSurrogates</name>
                        <value>151u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lycian</name>
                        <value>152u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lydian</name>
                        <value>153u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mahajani</name>
                        <value>154u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mahjong</name>
                        <value>155u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>malayalam</name>
                        <value>156u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mandaic</name>
                        <value>157u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>manichean</name>
                        <value>158u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>marchen</name>
                        <value>159u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mathAlphanum</name>
                        <value>160u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mathOperators</name>
                        <value>161u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>meeteiMayek</name>
                        <value>162u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>meeteiMayekExt</name>
                        <value>163u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mendeKikakui</name>
                        <value>164u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>meroiticCursive</name>
                        <value>165u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>meroiticHieroglyphs</name>
                        <value>166u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>miao</name>
                        <value>167u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>miscArrows</name>
                        <value>168u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>miscMathSymbolsA</name>
                        <value>169u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>miscMathSymbolsB</name>
                        <value>170u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>miscPictographs</name>
                        <value>171u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>miscSymbols</name>
                        <value>172u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>miscTechnical</name>
                        <value>173u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>modi</name>
                        <value>174u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>modifierLetters</name>
                        <value>175u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>modifierToneLetters</name>
                        <value>176u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mongolian</name>
                        <value>177u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mongolianSup</name>
                        <value>178u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mro</name>
                        <value>179u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>music</name>
                        <value>180u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>multani</name>
                        <value>181u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>myanmar</name>
                        <value>182u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>myanmarExtA</name>
                        <value>183u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>myanmarExtB</name>
                        <value>184u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>nabataean</name>
                        <value>185u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>nb</name>
                        <value>186u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>newTaiLue</name>
                        <value>187u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>newa</name>
                        <value>188u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>nko</name>
                        <value>189u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>numberForms</name>
                        <value>190u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ocr</name>
                        <value>191u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ogham</name>
                        <value>192u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>olChiki</name>
                        <value>193u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>oldHungarian</name>
                        <value>194u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>oldItalic</name>
                        <value>195u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>oldNorthArabian</name>
                        <value>196u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>oldPermic</name>
                        <value>197u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>oldPersian</name>
                        <value>198u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>oldSouthArabian</name>
                        <value>199u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>oldTurkic</name>
                        <value>200u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>oriya</name>
                        <value>201u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ornamentalDingbats</name>
                        <value>202u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>osage</name>
                        <value>203u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>osmanya</name>
                        <value>204u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>pahawhHmong</name>
                        <value>205u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>palmyrene</name>
                        <value>206u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>pauCinHau</name>
                        <value>207u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>phagsPa</name>
                        <value>208u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>phaistos</name>
                        <value>209u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>phoenician</name>
                        <value>210u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>phoneticExt</name>
                        <value>211u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>phoneticExtSup</name>
                        <value>212u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>playingCards</name>
                        <value>213u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>psalterPahlavi</name>
                        <value>214u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>pua</name>
                        <value>215u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>punctuation</name>
                        <value>216u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>rejang</name>
                        <value>217u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>rumi</name>
                        <value>218u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>runic</name>
                        <value>219u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>samaritan</name>
                        <value>220u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>saurashtra</name>
                        <value>221u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sharada</name>
                        <value>222u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>shavian</name>
                        <value>223u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>shorthandFormatControls</name>
                        <value>224u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>siddham</name>
                        <value>225u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sinhala</name>
                        <value>226u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sinhalaArchaicNumbers</name>
                        <value>227u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>smallForms</name>
                        <value>228u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>soraSompeng</name>
                        <value>229u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>specials</name>
                        <value>230u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sundanese</name>
                        <value>231u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sundaneseSup</name>
                        <value>232u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>supArrowsA</name>
                        <value>233u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>supArrowsB</name>
                        <value>234u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>supArrowsC</name>
                        <value>235u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>supMathOperators</name>
                        <value>236u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>supPuaA</name>
                        <value>237u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>supPuaB</name>
                        <value>238u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>supPunctuation</name>
                        <value>239u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>supSymbolsAndPictographs</name>
                        <value>240u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>superAndSub</name>
                        <value>241u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>suttonSignWriting</name>
                        <value>242u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sylotiNagri</name>
                        <value>243u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>syriac</name>
                        <value>244u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tagalog</name>
                        <value>245u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tagbanwa</name>
                        <value>246u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tags</name>
                        <value>247u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>taiLe</name>
                        <value>248u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>taiTham</name>
                        <value>249u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>taiViet</name>
                        <value>250u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>taiXuanJing</name>
                        <value>251u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>takri</name>
                        <value>252u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tamil</name>
                        <value>253u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tangut</name>
                        <value>254u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tangutComponents</name>
                        <value>255u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>telugu</name>
                        <value>256u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>thaana</name>
                        <value>257u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>thai</name>
                        <value>258u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tibetan</name>
                        <value>259u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tifinagh</name>
                        <value>260u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tirhuta</name>
                        <value>261u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>transportAndMap</name>
                        <value>262u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ucas</name>
                        <value>263u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ucasExt</name>
                        <value>264u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ugaritic</name>
                        <value>265u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>vai</name>
                        <value>266u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>vedicExt</name>
                        <value>267u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>verticalForms</name>
                        <value>268u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>vs</name>
                        <value>269u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>vsSup</name>
                        <value>270u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>warangCiti</name>
                        <value>271u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>yiRadicals</name>
                        <value>272u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>yiSyllables</name>
                        <value>273u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>yijing</name>
                        <value>274u</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A">
                    <name>GeneralCategoryId</name>
                    <syntax>public enum GeneralCategoryId;</syntax>
                    <underlyingType ref="type.8699071"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Lu</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Ll</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Lt</name>
                        <value>4u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Lm</name>
                        <value>8u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Lo</name>
                        <value>16u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>LC</name>
                        <value>7u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>L</name>
                        <value>31u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Mn</name>
                        <value>32u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Mc</name>
                        <value>64u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Me</name>
                        <value>128u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>M</name>
                        <value>224u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Nd</name>
                        <value>256u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Nl</name>
                        <value>512u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>No</name>
                        <value>1024u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>N</name>
                        <value>1792u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Pc</name>
                        <value>2048u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Pd</name>
                        <value>4096u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Ps</name>
                        <value>8192u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Pe</name>
                        <value>16384u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Pi</name>
                        <value>32768u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Pf</name>
                        <value>65536u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Po</name>
                        <value>131072u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>P</name>
                        <value>260096u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Sm</name>
                        <value>262144u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Sc</name>
                        <value>524288u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Sk</name>
                        <value>1048576u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>So</name>
                        <value>2097152u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>S</name>
                        <value>3932160u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Zs</name>
                        <value>4194304u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Zl</name>
                        <value>8388608u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Zp</name>
                        <value>16777216u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Z</name>
                        <value>29360128u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Cc</name>
                        <value>33554432u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Cf</name>
                        <value>67108864u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Cs</name>
                        <value>134217728u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Co</name>
                        <value>268435456u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Cn</name>
                        <value>536870912u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>C</name>
                        <value>1040187392u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>G</name>
                        <value>8388607u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>B</name>
                        <value>8388383u</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5">
                    <name>NumericTypeId</name>
                    <syntax>public enum NumericTypeId;</syntax>
                    <underlyingType ref="type.8699067"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>de</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>di</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>nu</name>
                        <value>3u</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7">
                    <name>ScriptId</name>
                    <syntax>public enum ScriptId;</syntax>
                    <underlyingType ref="type.8699067"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>adlm</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>aghb</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ahom</name>
                        <value>3u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>arab</name>
                        <value>4u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>armi</name>
                        <value>5u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>armn</name>
                        <value>6u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>avst</name>
                        <value>7u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bali</name>
                        <value>8u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bamu</name>
                        <value>9u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bass</name>
                        <value>10u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>batk</name>
                        <value>11u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>beng</name>
                        <value>12u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bhks</name>
                        <value>13u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bopo</name>
                        <value>14u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>brah</name>
                        <value>15u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>brai</name>
                        <value>16u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bugi</name>
                        <value>17u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>buhd</name>
                        <value>18u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cakm</name>
                        <value>19u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cans</name>
                        <value>20u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cari</name>
                        <value>21u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cham</name>
                        <value>22u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cher</name>
                        <value>23u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>copt</name>
                        <value>24u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cprt</name>
                        <value>25u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cyrl</name>
                        <value>26u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>deva</name>
                        <value>27u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>dsrt</name>
                        <value>28u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>dupl</name>
                        <value>29u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>elba</name>
                        <value>30u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>egyp</name>
                        <value>31u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ethi</name>
                        <value>32u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>geor</name>
                        <value>33u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>glag</name>
                        <value>34u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>goth</name>
                        <value>35u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>gran</name>
                        <value>36u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>grek</name>
                        <value>37u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>gujr</name>
                        <value>38u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>guru</name>
                        <value>39u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hang</name>
                        <value>40u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hani</name>
                        <value>41u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hano</name>
                        <value>42u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hatr</name>
                        <value>43u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hebr</name>
                        <value>44u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hira</name>
                        <value>45u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hluw</name>
                        <value>46u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hmng</name>
                        <value>47u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hrkt</name>
                        <value>48u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hung</name>
                        <value>49u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ital</name>
                        <value>50u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>java</name>
                        <value>51u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kali</name>
                        <value>52u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kana</name>
                        <value>53u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>khar</name>
                        <value>54u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>khmr</name>
                        <value>55u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>khoj</name>
                        <value>56u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>knda</name>
                        <value>57u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kthi</name>
                        <value>58u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lana</name>
                        <value>59u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>laoo</name>
                        <value>60u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>latn</name>
                        <value>61u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lepc</name>
                        <value>62u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>limb</name>
                        <value>63u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lina</name>
                        <value>64u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>linb</name>
                        <value>65u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lisu</name>
                        <value>66u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lyci</name>
                        <value>67u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lydi</name>
                        <value>68u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mahj</name>
                        <value>69u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mand</name>
                        <value>70u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mani</name>
                        <value>71u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>marc</name>
                        <value>72u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mend</name>
                        <value>73u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>merc</name>
                        <value>74u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mero</name>
                        <value>75u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mlym</name>
                        <value>76u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>modi</name>
                        <value>77u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mong</name>
                        <value>78u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mroo</name>
                        <value>79u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mtei</name>
                        <value>80u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mult</name>
                        <value>81u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mymr</name>
                        <value>82u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>narb</name>
                        <value>83u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>nbat</name>
                        <value>84u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>newa</name>
                        <value>85u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>nkoo</name>
                        <value>86u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ogam</name>
                        <value>87u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>olck</name>
                        <value>88u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>orkh</name>
                        <value>89u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>orya</name>
                        <value>90u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>osge</name>
                        <value>91u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>osma</name>
                        <value>92u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>palm</name>
                        <value>93u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>pauc</name>
                        <value>94u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>perm</name>
                        <value>95u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>phag</name>
                        <value>96u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>phli</name>
                        <value>97u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>phlp</name>
                        <value>98u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>phnx</name>
                        <value>99u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>plrd</name>
                        <value>100u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>prti</name>
                        <value>101u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>qaai</name>
                        <value>102u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>rjng</name>
                        <value>103u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>runr</name>
                        <value>104u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>samr</name>
                        <value>105u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sarb</name>
                        <value>106u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>saur</name>
                        <value>107u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sgnw</name>
                        <value>108u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>shaw</name>
                        <value>109u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>shrd</name>
                        <value>110u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sidd</name>
                        <value>111u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sind</name>
                        <value>112u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sinh</name>
                        <value>113u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sora</name>
                        <value>114u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sund</name>
                        <value>115u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sylo</name>
                        <value>116u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>syrc</name>
                        <value>117u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tagb</name>
                        <value>118u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>takr</name>
                        <value>119u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tale</name>
                        <value>120u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>talu</name>
                        <value>121u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>taml</name>
                        <value>122u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tang</name>
                        <value>123u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tavt</name>
                        <value>124u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>telu</name>
                        <value>125u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tfng</name>
                        <value>126u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tglg</name>
                        <value>127u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>thaa</name>
                        <value>128u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>thai</name>
                        <value>129u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tibt</name>
                        <value>130u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tirh</name>
                        <value>131u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ugar</name>
                        <value>132u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>vaii</name>
                        <value>133u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>wara</name>
                        <value>134u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>xpeo</name>
                        <value>135u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>xsux</name>
                        <value>136u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>yiii</name>
                        <value>137u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>zinh</name>
                        <value>138u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>zyyy</name>
                        <value>139u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>zzzz</name>
                        <value>140u</value>
                    </enumConstant>
                </enumeration>
            </enumerations>
        </namespace>
    </namespaces>
    <types>
        <type id="8700385">
            <name>@dlg_type</name>
        </type>
        <type id="8703013">
            <name>@dlg_type</name>
        </type>
        <type id="8703006">
            <name>@dlg_type</name>
        </type>
        <type id="">
            <name>@objectDelegatePairType</name>
        </type>
        <type id="class_Age_20ED92992C09B89F8F5B6F690EFAF17F626D7291">
            <name>Age</name>
        </type>
        <type derived="true" id="type.8699989">
            <name>Age&amp;</name>
            <content>
                <baseType ref="class_Age_20ED92992C09B89F8F5B6F690EFAF17F626D7291"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699988">
            <name>Age*</name>
            <content>
                <baseType ref="class_Age_20ED92992C09B89F8F5B6F690EFAF17F626D7291"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703788">
            <name>Age*&amp;</name>
            <content>
                <baseType ref="class_Age_20ED92992C09B89F8F5B6F690EFAF17F626D7291"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703894">
            <name>Age*&amp;&amp;</name>
            <content>
                <baseType ref="class_Age_20ED92992C09B89F8F5B6F690EFAF17F626D7291"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703885">
            <name>Age**</name>
            <content>
                <baseType ref="class_Age_20ED92992C09B89F8F5B6F690EFAF17F626D7291"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705571">
            <name>Age**&amp;</name>
            <content>
                <baseType ref="class_Age_20ED92992C09B89F8F5B6F690EFAF17F626D7291"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705624">
            <name>Age**&amp;&amp;</name>
            <content>
                <baseType ref="class_Age_20ED92992C09B89F8F5B6F690EFAF17F626D7291"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705623">
            <name>Age***</name>
            <content>
                <baseType ref="class_Age_20ED92992C09B89F8F5B6F690EFAF17F626D7291"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027">
            <name>AgeId</name>
        </type>
        <type derived="true" id="type.8703688">
            <name>AgeId&amp;</name>
            <content>
                <baseType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703689">
            <name>AgeId&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703687">
            <name>AgeId*</name>
            <content>
                <baseType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_AgeTable_2C086A707D70C073F820A6B1E5C3E9839D613039">
            <name>AgeTable</name>
        </type>
        <type derived="true" id="type.8699998">
            <name>AgeTable&amp;</name>
            <content>
                <baseType ref="class_AgeTable_2C086A707D70C073F820A6B1E5C3E9839D613039"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699997">
            <name>AgeTable*</name>
            <content>
                <baseType ref="class_AgeTable_2C086A707D70C073F820A6B1E5C3E9839D613039"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705566">
            <name>AgeTable*&amp;</name>
            <content>
                <baseType ref="class_AgeTable_2C086A707D70C073F820A6B1E5C3E9839D613039"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705565">
            <name>AgeTable**</name>
            <content>
                <baseType ref="class_AgeTable_2C086A707D70C073F820A6B1E5C3E9839D613039"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2">
            <name>Alias</name>
        </type>
        <type derived="true" id="type.8700072">
            <name>Alias&amp;</name>
            <content>
                <baseType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704956">
            <name>Alias&amp;&amp;</name>
            <content>
                <baseType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700071">
            <name>Alias*</name>
            <content>
                <baseType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706058">
            <name>Alias*&amp;</name>
            <content>
                <baseType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706057">
            <name>Alias**</name>
            <content>
                <baseType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_AliasType_26C1BD4B52D4B4FA45C72272C56F7F26186F16BD">
            <name>AliasType</name>
        </type>
        <type derived="true" id="type.8700060">
            <name>AliasType&amp;</name>
            <content>
                <baseType ref="class_AliasType_26C1BD4B52D4B4FA45C72272C56F7F26186F16BD"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700059">
            <name>AliasType*</name>
            <content>
                <baseType ref="class_AliasType_26C1BD4B52D4B4FA45C72272C56F7F26186F16BD"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704828">
            <name>AliasType*&amp;</name>
            <content>
                <baseType ref="class_AliasType_26C1BD4B52D4B4FA45C72272C56F7F26186F16BD"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704934">
            <name>AliasType*&amp;&amp;</name>
            <content>
                <baseType ref="class_AliasType_26C1BD4B52D4B4FA45C72272C56F7F26186F16BD"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704925">
            <name>AliasType**</name>
            <content>
                <baseType ref="class_AliasType_26C1BD4B52D4B4FA45C72272C56F7F26186F16BD"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705981">
            <name>AliasType**&amp;</name>
            <content>
                <baseType ref="class_AliasType_26C1BD4B52D4B4FA45C72272C56F7F26186F16BD"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706034">
            <name>AliasType**&amp;&amp;</name>
            <content>
                <baseType ref="class_AliasType_26C1BD4B52D4B4FA45C72272C56F7F26186F16BD"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706033">
            <name>AliasType***</name>
            <content>
                <baseType ref="class_AliasType_26C1BD4B52D4B4FA45C72272C56F7F26186F16BD"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27">
            <name>AliasTypeId</name>
        </type>
        <type derived="true" id="type.8704728">
            <name>AliasTypeId&amp;</name>
            <content>
                <baseType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704729">
            <name>AliasTypeId&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704727">
            <name>AliasTypeId*</name>
            <content>
                <baseType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_AliasTypeTable_5D27F2122BC2C5367359CE5C354526AB494783FF">
            <name>AliasTypeTable</name>
        </type>
        <type derived="true" id="type.8700069">
            <name>AliasTypeTable&amp;</name>
            <content>
                <baseType ref="class_AliasTypeTable_5D27F2122BC2C5367359CE5C354526AB494783FF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700068">
            <name>AliasTypeTable*</name>
            <content>
                <baseType ref="class_AliasTypeTable_5D27F2122BC2C5367359CE5C354526AB494783FF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705976">
            <name>AliasTypeTable*&amp;</name>
            <content>
                <baseType ref="class_AliasTypeTable_5D27F2122BC2C5367359CE5C354526AB494783FF"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705975">
            <name>AliasTypeTable**</name>
            <content>
                <baseType ref="class_AliasTypeTable_5D27F2122BC2C5367359CE5C354526AB494783FF"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699641">
            <name>Argument</name>
        </type>
        <type id="8699638">
            <name>Argument1</name>
        </type>
        <type id="8699639">
            <name>Argument2</name>
        </type>
        <type id="class_BidiClass_C91AB3C9A69B59FAC907E2B6BF6ED6742175BB63">
            <name>BidiClass</name>
        </type>
        <type derived="true" id="type.8700034">
            <name>BidiClass&amp;</name>
            <content>
                <baseType ref="class_BidiClass_C91AB3C9A69B59FAC907E2B6BF6ED6742175BB63"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700033">
            <name>BidiClass*</name>
            <content>
                <baseType ref="class_BidiClass_C91AB3C9A69B59FAC907E2B6BF6ED6742175BB63"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704412">
            <name>BidiClass*&amp;</name>
            <content>
                <baseType ref="class_BidiClass_C91AB3C9A69B59FAC907E2B6BF6ED6742175BB63"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704518">
            <name>BidiClass*&amp;&amp;</name>
            <content>
                <baseType ref="class_BidiClass_C91AB3C9A69B59FAC907E2B6BF6ED6742175BB63"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704509">
            <name>BidiClass**</name>
            <content>
                <baseType ref="class_BidiClass_C91AB3C9A69B59FAC907E2B6BF6ED6742175BB63"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705817">
            <name>BidiClass**&amp;</name>
            <content>
                <baseType ref="class_BidiClass_C91AB3C9A69B59FAC907E2B6BF6ED6742175BB63"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705870">
            <name>BidiClass**&amp;&amp;</name>
            <content>
                <baseType ref="class_BidiClass_C91AB3C9A69B59FAC907E2B6BF6ED6742175BB63"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705869">
            <name>BidiClass***</name>
            <content>
                <baseType ref="class_BidiClass_C91AB3C9A69B59FAC907E2B6BF6ED6742175BB63"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7">
            <name>BidiClassId</name>
        </type>
        <type derived="true" id="type.8704312">
            <name>BidiClassId&amp;</name>
            <content>
                <baseType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704313">
            <name>BidiClassId&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704311">
            <name>BidiClassId*</name>
            <content>
                <baseType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BidiClassTable_C2D5046C361B79F9A690C84020C0EA764E7E73C5">
            <name>BidiClassTable</name>
        </type>
        <type derived="true" id="type.8700043">
            <name>BidiClassTable&amp;</name>
            <content>
                <baseType ref="class_BidiClassTable_C2D5046C361B79F9A690C84020C0EA764E7E73C5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700042">
            <name>BidiClassTable*</name>
            <content>
                <baseType ref="class_BidiClassTable_C2D5046C361B79F9A690C84020C0EA764E7E73C5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705812">
            <name>BidiClassTable*&amp;</name>
            <content>
                <baseType ref="class_BidiClassTable_C2D5046C361B79F9A690C84020C0EA764E7E73C5"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705811">
            <name>BidiClassTable**</name>
            <content>
                <baseType ref="class_BidiClassTable_C2D5046C361B79F9A690C84020C0EA764E7E73C5"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BidiPairedBracketType_8577BAE017C9877F73B079DC41550D9EB6D2202C">
            <name>BidiPairedBracketType</name>
        </type>
        <type derived="true" id="type.8700047">
            <name>BidiPairedBracketType&amp;</name>
            <content>
                <baseType ref="class_BidiPairedBracketType_8577BAE017C9877F73B079DC41550D9EB6D2202C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700046">
            <name>BidiPairedBracketType*</name>
            <content>
                <baseType ref="class_BidiPairedBracketType_8577BAE017C9877F73B079DC41550D9EB6D2202C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704620">
            <name>BidiPairedBracketType*&amp;</name>
            <content>
                <baseType ref="class_BidiPairedBracketType_8577BAE017C9877F73B079DC41550D9EB6D2202C"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704726">
            <name>BidiPairedBracketType*&amp;&amp;</name>
            <content>
                <baseType ref="class_BidiPairedBracketType_8577BAE017C9877F73B079DC41550D9EB6D2202C"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704717">
            <name>BidiPairedBracketType**</name>
            <content>
                <baseType ref="class_BidiPairedBracketType_8577BAE017C9877F73B079DC41550D9EB6D2202C"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705899">
            <name>BidiPairedBracketType**&amp;</name>
            <content>
                <baseType ref="class_BidiPairedBracketType_8577BAE017C9877F73B079DC41550D9EB6D2202C"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705952">
            <name>BidiPairedBracketType**&amp;&amp;</name>
            <content>
                <baseType ref="class_BidiPairedBracketType_8577BAE017C9877F73B079DC41550D9EB6D2202C"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705951">
            <name>BidiPairedBracketType***</name>
            <content>
                <baseType ref="class_BidiPairedBracketType_8577BAE017C9877F73B079DC41550D9EB6D2202C"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0">
            <name>BidiPairedBracketTypeId</name>
        </type>
        <type derived="true" id="type.8704520">
            <name>BidiPairedBracketTypeId&amp;</name>
            <content>
                <baseType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704521">
            <name>BidiPairedBracketTypeId&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704519">
            <name>BidiPairedBracketTypeId*</name>
            <content>
                <baseType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BidiPairedBracketTypeTable_0064D862A1F33AB5C9E09D707B6EC98CAC6E1BA7">
            <name>BidiPairedBracketTypeTable</name>
        </type>
        <type derived="true" id="type.8700056">
            <name>BidiPairedBracketTypeTable&amp;</name>
            <content>
                <baseType ref="class_BidiPairedBracketTypeTable_0064D862A1F33AB5C9E09D707B6EC98CAC6E1BA7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700055">
            <name>BidiPairedBracketTypeTable*</name>
            <content>
                <baseType ref="class_BidiPairedBracketTypeTable_0064D862A1F33AB5C9E09D707B6EC98CAC6E1BA7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705894">
            <name>BidiPairedBracketTypeTable*&amp;</name>
            <content>
                <baseType ref="class_BidiPairedBracketTypeTable_0064D862A1F33AB5C9E09D707B6EC98CAC6E1BA7"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705893">
            <name>BidiPairedBracketTypeTable**</name>
            <content>
                <baseType ref="class_BidiPairedBracketTypeTable_0064D862A1F33AB5C9E09D707B6EC98CAC6E1BA7"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_BinaryFun_Argument_Argument_bool_7B9F64E94C0D88B8E72B6B65C4E3D3E823D84B1F" specialization="true">
            <name>BinaryFun&lt;Argument, Argument, bool></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="8699641"/>
                <argumentType ref="8699641"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8700655">
            <name>BinaryFun&lt;Argument, Argument, bool>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_Argument_Argument_bool_7B9F64E94C0D88B8E72B6B65C4E3D3E823D84B1F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700654">
            <name>BinaryFun&lt;Argument, Argument, bool>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_Argument_Argument_bool_7B9F64E94C0D88B8E72B6B65C4E3D3E823D84B1F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BinaryFun_07215F229CCF060E79DA7153400EBCB24FA00F4E">
            <name>BinaryFun&lt;Argument1, Argument2, Result></name>
        </type>
        <type id="type.class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2" specialization="true">
            <name>BinaryFun&lt;Argument1, Argument2, Result></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="8699618"/>
                <argumentType ref="8699619"/>
                <argumentType ref="8699620"/>
            </content>
        </type>
        <type derived="true" id="type.8700558">
            <name>BinaryFun&lt;Argument1, Argument2, Result>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700557">
            <name>BinaryFun&lt;Argument1, Argument2, Result>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_BinaryFun_Argument1_Argument2_bool_88A4A731266CCFEA56C0EF24FFEC409F274F46CC" specialization="true">
            <name>BinaryFun&lt;Argument1, Argument2, bool></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="8699638"/>
                <argumentType ref="8699639"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8700648">
            <name>BinaryFun&lt;Argument1, Argument2, bool>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_Argument1_Argument2_bool_88A4A731266CCFEA56C0EF24FFEC409F274F46CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700647">
            <name>BinaryFun&lt;Argument1, Argument2, bool>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_Argument1_Argument2_bool_88A4A731266CCFEA56C0EF24FFEC409F274F46CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703150" specialization="true">
            <name>BinaryFun&lt;String&lt;char>, String&lt;char>, bool></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8703152">
            <name>BinaryFun&lt;String&lt;char>, String&lt;char>, bool>&amp;</name>
            <content>
                <baseType ref="type.8703150"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705355">
            <name>BinaryFun&lt;String&lt;char>, String&lt;char>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703150"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703151">
            <name>BinaryFun&lt;String&lt;char>, String&lt;char>, bool>*</name>
            <content>
                <baseType ref="type.8703150"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703703" specialization="true">
            <name>BinaryFun&lt;System.Unicode.AgeId, System.Unicode.AgeId, bool></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                <argumentType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8703705">
            <name>BinaryFun&lt;System.Unicode.AgeId, System.Unicode.AgeId, bool>&amp;</name>
            <content>
                <baseType ref="type.8703703"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705589">
            <name>BinaryFun&lt;System.Unicode.AgeId, System.Unicode.AgeId, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703703"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703704">
            <name>BinaryFun&lt;System.Unicode.AgeId, System.Unicode.AgeId, bool>*</name>
            <content>
                <baseType ref="type.8703703"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704743" specialization="true">
            <name>BinaryFun&lt;System.Unicode.AliasTypeId, System.Unicode.AliasTypeId, bool></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                <argumentType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8704745">
            <name>BinaryFun&lt;System.Unicode.AliasTypeId, System.Unicode.AliasTypeId, bool>&amp;</name>
            <content>
                <baseType ref="type.8704743"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705999">
            <name>BinaryFun&lt;System.Unicode.AliasTypeId, System.Unicode.AliasTypeId, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704743"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704744">
            <name>BinaryFun&lt;System.Unicode.AliasTypeId, System.Unicode.AliasTypeId, bool>*</name>
            <content>
                <baseType ref="type.8704743"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704327" specialization="true">
            <name>BinaryFun&lt;System.Unicode.BidiClassId, System.Unicode.BidiClassId, bool></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                <argumentType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8704329">
            <name>BinaryFun&lt;System.Unicode.BidiClassId, System.Unicode.BidiClassId, bool>&amp;</name>
            <content>
                <baseType ref="type.8704327"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705835">
            <name>BinaryFun&lt;System.Unicode.BidiClassId, System.Unicode.BidiClassId, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704327"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704328">
            <name>BinaryFun&lt;System.Unicode.BidiClassId, System.Unicode.BidiClassId, bool>*</name>
            <content>
                <baseType ref="type.8704327"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704535" specialization="true">
            <name>BinaryFun&lt;System.Unicode.BidiPairedBracketTypeId, System.Unicode.BidiPairedBracketTypeId, bool></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                <argumentType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8704537">
            <name>BinaryFun&lt;System.Unicode.BidiPairedBracketTypeId, System.Unicode.BidiPairedBracketTypeId, bool>&amp;</name>
            <content>
                <baseType ref="type.8704535"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705917">
            <name>BinaryFun&lt;System.Unicode.BidiPairedBracketTypeId, System.Unicode.BidiPairedBracketTypeId, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704535"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704536">
            <name>BinaryFun&lt;System.Unicode.BidiPairedBracketTypeId, System.Unicode.BidiPairedBracketTypeId, bool>*</name>
            <content>
                <baseType ref="type.8704535"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703052" specialization="true">
            <name>BinaryFun&lt;System.Unicode.BinaryPropertyId, System.Unicode.BinaryPropertyId, bool></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                <argumentType ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8703054">
            <name>BinaryFun&lt;System.Unicode.BinaryPropertyId, System.Unicode.BinaryPropertyId, bool>&amp;</name>
            <content>
                <baseType ref="type.8703052"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705320">
            <name>BinaryFun&lt;System.Unicode.BinaryPropertyId, System.Unicode.BinaryPropertyId, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703052"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703053">
            <name>BinaryFun&lt;System.Unicode.BinaryPropertyId, System.Unicode.BinaryPropertyId, bool>*</name>
            <content>
                <baseType ref="type.8703052"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703284" specialization="true">
            <name>BinaryFun&lt;System.Unicode.BlockId, System.Unicode.BlockId, bool></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                <argumentType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8703286">
            <name>BinaryFun&lt;System.Unicode.BlockId, System.Unicode.BlockId, bool>&amp;</name>
            <content>
                <baseType ref="type.8703284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705425">
            <name>BinaryFun&lt;System.Unicode.BlockId, System.Unicode.BlockId, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703284"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703285">
            <name>BinaryFun&lt;System.Unicode.BlockId, System.Unicode.BlockId, bool>*</name>
            <content>
                <baseType ref="type.8703284"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703495" specialization="true">
            <name>BinaryFun&lt;System.Unicode.GeneralCategoryId, System.Unicode.GeneralCategoryId, bool></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                <argumentType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8703497">
            <name>BinaryFun&lt;System.Unicode.GeneralCategoryId, System.Unicode.GeneralCategoryId, bool>&amp;</name>
            <content>
                <baseType ref="type.8703495"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705507">
            <name>BinaryFun&lt;System.Unicode.GeneralCategoryId, System.Unicode.GeneralCategoryId, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703495"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703496">
            <name>BinaryFun&lt;System.Unicode.GeneralCategoryId, System.Unicode.GeneralCategoryId, bool>*</name>
            <content>
                <baseType ref="type.8703495"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704119" specialization="true">
            <name>BinaryFun&lt;System.Unicode.NumericTypeId, System.Unicode.NumericTypeId, bool></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                <argumentType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8704121">
            <name>BinaryFun&lt;System.Unicode.NumericTypeId, System.Unicode.NumericTypeId, bool>&amp;</name>
            <content>
                <baseType ref="type.8704119"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705753">
            <name>BinaryFun&lt;System.Unicode.NumericTypeId, System.Unicode.NumericTypeId, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704119"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704120">
            <name>BinaryFun&lt;System.Unicode.NumericTypeId, System.Unicode.NumericTypeId, bool>*</name>
            <content>
                <baseType ref="type.8704119"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703911" specialization="true">
            <name>BinaryFun&lt;System.Unicode.ScriptId, System.Unicode.ScriptId, bool></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                <argumentType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8703913">
            <name>BinaryFun&lt;System.Unicode.ScriptId, System.Unicode.ScriptId, bool>&amp;</name>
            <content>
                <baseType ref="type.8703911"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705671">
            <name>BinaryFun&lt;System.Unicode.ScriptId, System.Unicode.ScriptId, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703911"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703912">
            <name>BinaryFun&lt;System.Unicode.ScriptId, System.Unicode.ScriptId, bool>*</name>
            <content>
                <baseType ref="type.8703911"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="8699627"/>
                <argumentType ref="8699627"/>
                <argumentType ref="8699627"/>
            </content>
        </type>
        <type derived="true" id="type.8700595">
            <name>BinaryFun&lt;T, T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700906">
            <name>BinaryFun&lt;T, T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700605">
            <name>BinaryFun&lt;T, T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700565">
            <name>BinaryFun&lt;T, T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700575">
            <name>BinaryFun&lt;T, T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700625">
            <name>BinaryFun&lt;T, T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700635">
            <name>BinaryFun&lt;T, T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700615">
            <name>BinaryFun&lt;T, T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700896">
            <name>BinaryFun&lt;T, T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700886">
            <name>BinaryFun&lt;T, T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700926">
            <name>BinaryFun&lt;T, T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700936">
            <name>BinaryFun&lt;T, T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700885">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700925">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700935">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700574">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700905">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700614">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700624">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700604">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700935">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700594">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700634">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700564">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700895">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_T_C9612F96F6680FFC460F250FCBAC07DCC40E3C2D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_BinaryFun_T_T_bool_5AE89B17E9F1FB9505511870EBDE3749C14EBF3C" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="8699670"/>
                <argumentType ref="8699670"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8700678">
            <name>BinaryFun&lt;T, T, bool>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_bool_5AE89B17E9F1FB9505511870EBDE3749C14EBF3C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700828">
            <name>BinaryFun&lt;T, T, bool>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_bool_5AE89B17E9F1FB9505511870EBDE3749C14EBF3C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700798">
            <name>BinaryFun&lt;T, T, bool>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_bool_5AE89B17E9F1FB9505511870EBDE3749C14EBF3C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700708">
            <name>BinaryFun&lt;T, T, bool>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_bool_5AE89B17E9F1FB9505511870EBDE3749C14EBF3C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700738">
            <name>BinaryFun&lt;T, T, bool>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_bool_5AE89B17E9F1FB9505511870EBDE3749C14EBF3C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700798">
            <name>BinaryFun&lt;T, T, bool>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_bool_5AE89B17E9F1FB9505511870EBDE3749C14EBF3C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700768">
            <name>BinaryFun&lt;T, T, bool>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_bool_5AE89B17E9F1FB9505511870EBDE3749C14EBF3C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700677">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_bool_5AE89B17E9F1FB9505511870EBDE3749C14EBF3C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700767">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_bool_5AE89B17E9F1FB9505511870EBDE3749C14EBF3C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700827">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_bool_5AE89B17E9F1FB9505511870EBDE3749C14EBF3C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700797">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_bool_5AE89B17E9F1FB9505511870EBDE3749C14EBF3C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700737">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_bool_5AE89B17E9F1FB9505511870EBDE3749C14EBF3C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700707">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_bool_5AE89B17E9F1FB9505511870EBDE3749C14EBF3C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700767">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_T_bool_5AE89B17E9F1FB9505511870EBDE3749C14EBF3C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_BinaryFun_T_U_bool_080CFEAF10722C3E819E01F8B6E9F76CB6FCE305" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="8699657"/>
                <argumentType ref="8699658"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8700723">
            <name>BinaryFun&lt;T, U, bool>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_U_bool_080CFEAF10722C3E819E01F8B6E9F76CB6FCE305"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700783">
            <name>BinaryFun&lt;T, U, bool>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_U_bool_080CFEAF10722C3E819E01F8B6E9F76CB6FCE305"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700843">
            <name>BinaryFun&lt;T, U, bool>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_U_bool_080CFEAF10722C3E819E01F8B6E9F76CB6FCE305"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700813">
            <name>BinaryFun&lt;T, U, bool>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_U_bool_080CFEAF10722C3E819E01F8B6E9F76CB6FCE305"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700693">
            <name>BinaryFun&lt;T, U, bool>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_U_bool_080CFEAF10722C3E819E01F8B6E9F76CB6FCE305"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700753">
            <name>BinaryFun&lt;T, U, bool>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_U_bool_080CFEAF10722C3E819E01F8B6E9F76CB6FCE305"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700813">
            <name>BinaryFun&lt;T, U, bool>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_U_bool_080CFEAF10722C3E819E01F8B6E9F76CB6FCE305"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700782">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_U_bool_080CFEAF10722C3E819E01F8B6E9F76CB6FCE305"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700722">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_U_bool_080CFEAF10722C3E819E01F8B6E9F76CB6FCE305"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700782">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_U_bool_080CFEAF10722C3E819E01F8B6E9F76CB6FCE305"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700842">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_U_bool_080CFEAF10722C3E819E01F8B6E9F76CB6FCE305"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700812">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_U_bool_080CFEAF10722C3E819E01F8B6E9F76CB6FCE305"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700692">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_U_bool_080CFEAF10722C3E819E01F8B6E9F76CB6FCE305"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700752">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.class_BinaryFun_T_U_bool_080CFEAF10722C3E819E01F8B6E9F76CB6FCE305"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700855" specialization="true">
            <name>BinaryFun&lt;bool, bool, bool></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="type.8699065"/>
                <argumentType ref="type.8699065"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8700857">
            <name>BinaryFun&lt;bool, bool, bool>&amp;</name>
            <content>
                <baseType ref="type.8700855"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700856">
            <name>BinaryFun&lt;bool, bool, bool>*</name>
            <content>
                <baseType ref="type.8700855"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_BinaryPred_Argument_Argument_3B70D6E5573795215FFB8A4139EAC50AA19A895A" specialization="true">
            <name>BinaryPred&lt;Argument, Argument></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="8699641"/>
                <argumentType ref="8699641"/>
            </content>
        </type>
        <type derived="true" id="type.8700657">
            <name>BinaryPred&lt;Argument, Argument>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryPred_Argument_Argument_3B70D6E5573795215FFB8A4139EAC50AA19A895A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700656">
            <name>BinaryPred&lt;Argument, Argument>*</name>
            <content>
                <baseType ref="type.class_BinaryPred_Argument_Argument_3B70D6E5573795215FFB8A4139EAC50AA19A895A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7" specialization="true">
            <name>BinaryPred&lt;Argument1, Argument2></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="8699638"/>
                <argumentType ref="8699639"/>
            </content>
        </type>
        <type id="class_BinaryPred_764DB8CD2873EBCF58DE0EBA97176EA0F13CF934">
            <name>BinaryPred&lt;Argument1, Argument2></name>
        </type>
        <type id="type.class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7" specialization="true">
            <name>BinaryPred&lt;Argument1, Argument2></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="8699638"/>
                <argumentType ref="8699639"/>
            </content>
        </type>
        <type derived="true" id="type.8700650">
            <name>BinaryPred&lt;Argument1, Argument2>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700649">
            <name>BinaryPred&lt;Argument1, Argument2>*</name>
            <content>
                <baseType ref="type.class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703149" specialization="true">
            <name>BinaryPred&lt;String&lt;char>, String&lt;char>></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700206"/>
            </content>
        </type>
        <type derived="true" id="type.8703154">
            <name>BinaryPred&lt;String&lt;char>, String&lt;char>>&amp;</name>
            <content>
                <baseType ref="type.8703149"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705352">
            <name>BinaryPred&lt;String&lt;char>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703149"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703153">
            <name>BinaryPred&lt;String&lt;char>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.8703149"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703702" specialization="true">
            <name>BinaryPred&lt;System.Unicode.AgeId, System.Unicode.AgeId></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                <argumentType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
            </content>
        </type>
        <type derived="true" id="type.8703707">
            <name>BinaryPred&lt;System.Unicode.AgeId, System.Unicode.AgeId>&amp;</name>
            <content>
                <baseType ref="type.8703702"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705586">
            <name>BinaryPred&lt;System.Unicode.AgeId, System.Unicode.AgeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703702"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703706">
            <name>BinaryPred&lt;System.Unicode.AgeId, System.Unicode.AgeId>*</name>
            <content>
                <baseType ref="type.8703702"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704742" specialization="true">
            <name>BinaryPred&lt;System.Unicode.AliasTypeId, System.Unicode.AliasTypeId></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                <argumentType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
            </content>
        </type>
        <type derived="true" id="type.8704747">
            <name>BinaryPred&lt;System.Unicode.AliasTypeId, System.Unicode.AliasTypeId>&amp;</name>
            <content>
                <baseType ref="type.8704742"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705996">
            <name>BinaryPred&lt;System.Unicode.AliasTypeId, System.Unicode.AliasTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704742"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704746">
            <name>BinaryPred&lt;System.Unicode.AliasTypeId, System.Unicode.AliasTypeId>*</name>
            <content>
                <baseType ref="type.8704742"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704326" specialization="true">
            <name>BinaryPred&lt;System.Unicode.BidiClassId, System.Unicode.BidiClassId></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                <argumentType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
            </content>
        </type>
        <type derived="true" id="type.8704331">
            <name>BinaryPred&lt;System.Unicode.BidiClassId, System.Unicode.BidiClassId>&amp;</name>
            <content>
                <baseType ref="type.8704326"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705832">
            <name>BinaryPred&lt;System.Unicode.BidiClassId, System.Unicode.BidiClassId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704326"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704330">
            <name>BinaryPred&lt;System.Unicode.BidiClassId, System.Unicode.BidiClassId>*</name>
            <content>
                <baseType ref="type.8704326"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704534" specialization="true">
            <name>BinaryPred&lt;System.Unicode.BidiPairedBracketTypeId, System.Unicode.BidiPairedBracketTypeId></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                <argumentType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
            </content>
        </type>
        <type derived="true" id="type.8704539">
            <name>BinaryPred&lt;System.Unicode.BidiPairedBracketTypeId, System.Unicode.BidiPairedBracketTypeId>&amp;</name>
            <content>
                <baseType ref="type.8704534"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705914">
            <name>BinaryPred&lt;System.Unicode.BidiPairedBracketTypeId, System.Unicode.BidiPairedBracketTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704534"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704538">
            <name>BinaryPred&lt;System.Unicode.BidiPairedBracketTypeId, System.Unicode.BidiPairedBracketTypeId>*</name>
            <content>
                <baseType ref="type.8704534"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703051" specialization="true">
            <name>BinaryPred&lt;System.Unicode.BinaryPropertyId, System.Unicode.BinaryPropertyId></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                <argumentType ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
            </content>
        </type>
        <type derived="true" id="type.8703056">
            <name>BinaryPred&lt;System.Unicode.BinaryPropertyId, System.Unicode.BinaryPropertyId>&amp;</name>
            <content>
                <baseType ref="type.8703051"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705317">
            <name>BinaryPred&lt;System.Unicode.BinaryPropertyId, System.Unicode.BinaryPropertyId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703055">
            <name>BinaryPred&lt;System.Unicode.BinaryPropertyId, System.Unicode.BinaryPropertyId>*</name>
            <content>
                <baseType ref="type.8703051"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703283" specialization="true">
            <name>BinaryPred&lt;System.Unicode.BlockId, System.Unicode.BlockId></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                <argumentType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
            </content>
        </type>
        <type derived="true" id="type.8703288">
            <name>BinaryPred&lt;System.Unicode.BlockId, System.Unicode.BlockId>&amp;</name>
            <content>
                <baseType ref="type.8703283"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705422">
            <name>BinaryPred&lt;System.Unicode.BlockId, System.Unicode.BlockId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703283"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703287">
            <name>BinaryPred&lt;System.Unicode.BlockId, System.Unicode.BlockId>*</name>
            <content>
                <baseType ref="type.8703283"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703494" specialization="true">
            <name>BinaryPred&lt;System.Unicode.GeneralCategoryId, System.Unicode.GeneralCategoryId></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                <argumentType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
            </content>
        </type>
        <type derived="true" id="type.8703499">
            <name>BinaryPred&lt;System.Unicode.GeneralCategoryId, System.Unicode.GeneralCategoryId>&amp;</name>
            <content>
                <baseType ref="type.8703494"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705504">
            <name>BinaryPred&lt;System.Unicode.GeneralCategoryId, System.Unicode.GeneralCategoryId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703494"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703498">
            <name>BinaryPred&lt;System.Unicode.GeneralCategoryId, System.Unicode.GeneralCategoryId>*</name>
            <content>
                <baseType ref="type.8703494"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704118" specialization="true">
            <name>BinaryPred&lt;System.Unicode.NumericTypeId, System.Unicode.NumericTypeId></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                <argumentType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
            </content>
        </type>
        <type derived="true" id="type.8704123">
            <name>BinaryPred&lt;System.Unicode.NumericTypeId, System.Unicode.NumericTypeId>&amp;</name>
            <content>
                <baseType ref="type.8704118"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705750">
            <name>BinaryPred&lt;System.Unicode.NumericTypeId, System.Unicode.NumericTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704118"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704122">
            <name>BinaryPred&lt;System.Unicode.NumericTypeId, System.Unicode.NumericTypeId>*</name>
            <content>
                <baseType ref="type.8704118"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703910" specialization="true">
            <name>BinaryPred&lt;System.Unicode.ScriptId, System.Unicode.ScriptId></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                <argumentType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
            </content>
        </type>
        <type derived="true" id="type.8703915">
            <name>BinaryPred&lt;System.Unicode.ScriptId, System.Unicode.ScriptId>&amp;</name>
            <content>
                <baseType ref="type.8703910"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705668">
            <name>BinaryPred&lt;System.Unicode.ScriptId, System.Unicode.ScriptId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703910"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703914">
            <name>BinaryPred&lt;System.Unicode.ScriptId, System.Unicode.ScriptId>*</name>
            <content>
                <baseType ref="type.8703910"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_BinaryPred_T_T_D8CF91E0B99C1001980C358810615A5A3AAB962C" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="8699660"/>
                <argumentType ref="8699660"/>
            </content>
        </type>
        <type derived="true" id="type.8700680">
            <name>BinaryPred&lt;T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_T_D8CF91E0B99C1001980C358810615A5A3AAB962C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700830">
            <name>BinaryPred&lt;T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_T_D8CF91E0B99C1001980C358810615A5A3AAB962C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700800">
            <name>BinaryPred&lt;T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_T_D8CF91E0B99C1001980C358810615A5A3AAB962C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700740">
            <name>BinaryPred&lt;T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_T_D8CF91E0B99C1001980C358810615A5A3AAB962C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700830">
            <name>BinaryPred&lt;T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_T_D8CF91E0B99C1001980C358810615A5A3AAB962C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700770">
            <name>BinaryPred&lt;T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_T_D8CF91E0B99C1001980C358810615A5A3AAB962C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700710">
            <name>BinaryPred&lt;T, T>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_T_D8CF91E0B99C1001980C358810615A5A3AAB962C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700709">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_T_D8CF91E0B99C1001980C358810615A5A3AAB962C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700769">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_T_D8CF91E0B99C1001980C358810615A5A3AAB962C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700739">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_T_D8CF91E0B99C1001980C358810615A5A3AAB962C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700829">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_T_D8CF91E0B99C1001980C358810615A5A3AAB962C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700799">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_T_D8CF91E0B99C1001980C358810615A5A3AAB962C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700829">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_T_D8CF91E0B99C1001980C358810615A5A3AAB962C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700679">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_T_D8CF91E0B99C1001980C358810615A5A3AAB962C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="8699672"/>
                <argumentType ref="8699673"/>
            </content>
        </type>
        <type derived="true" id="type.8700815">
            <name>BinaryPred&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700785">
            <name>BinaryPred&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700845">
            <name>BinaryPred&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700725">
            <name>BinaryPred&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700815">
            <name>BinaryPred&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700755">
            <name>BinaryPred&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700695">
            <name>BinaryPred&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700724">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700694">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700814">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700694">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700784">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700754">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700844">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_BinaryPred_T_U_FE209F3B4FAD4ACC3C931B836EA588803F5E7323"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700854" specialization="true">
            <name>BinaryPred&lt;bool, bool></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="type.8699065"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8700859">
            <name>BinaryPred&lt;bool, bool>&amp;</name>
            <content>
                <baseType ref="type.8700854"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700858">
            <name>BinaryPred&lt;bool, bool>*</name>
            <content>
                <baseType ref="type.8700854"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BinaryProperty_9535AC1669FC6F9049F470BDFFC16D1B40ACA307">
            <name>BinaryProperty</name>
        </type>
        <type derived="true" id="type.8699959">
            <name>BinaryProperty&amp;</name>
            <content>
                <baseType ref="class_BinaryProperty_9535AC1669FC6F9049F470BDFFC16D1B40ACA307"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699958">
            <name>BinaryProperty*</name>
            <content>
                <baseType ref="class_BinaryProperty_9535AC1669FC6F9049F470BDFFC16D1B40ACA307"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703137">
            <name>BinaryProperty*&amp;</name>
            <content>
                <baseType ref="class_BinaryProperty_9535AC1669FC6F9049F470BDFFC16D1B40ACA307"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703257">
            <name>BinaryProperty*&amp;&amp;</name>
            <content>
                <baseType ref="class_BinaryProperty_9535AC1669FC6F9049F470BDFFC16D1B40ACA307"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703248">
            <name>BinaryProperty**</name>
            <content>
                <baseType ref="class_BinaryProperty_9535AC1669FC6F9049F470BDFFC16D1B40ACA307"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705302">
            <name>BinaryProperty**&amp;</name>
            <content>
                <baseType ref="class_BinaryProperty_9535AC1669FC6F9049F470BDFFC16D1B40ACA307"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705378">
            <name>BinaryProperty**&amp;&amp;</name>
            <content>
                <baseType ref="class_BinaryProperty_9535AC1669FC6F9049F470BDFFC16D1B40ACA307"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705377">
            <name>BinaryProperty***</name>
            <content>
                <baseType ref="class_BinaryProperty_9535AC1669FC6F9049F470BDFFC16D1B40ACA307"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E">
            <name>BinaryPropertyId</name>
        </type>
        <type derived="true" id="type.8703034">
            <name>BinaryPropertyId&amp;</name>
            <content>
                <baseType ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703035">
            <name>BinaryPropertyId&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703033">
            <name>BinaryPropertyId*</name>
            <content>
                <baseType ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BinaryPropertyTable_D9F900B43A497D516547526966A7747D0329EEEA">
            <name>BinaryPropertyTable</name>
        </type>
        <type derived="true" id="type.8699965">
            <name>BinaryPropertyTable&amp;</name>
            <content>
                <baseType ref="class_BinaryPropertyTable_D9F900B43A497D516547526966A7747D0329EEEA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699964">
            <name>BinaryPropertyTable*</name>
            <content>
                <baseType ref="class_BinaryPropertyTable_D9F900B43A497D516547526966A7747D0329EEEA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705297">
            <name>BinaryPropertyTable*&amp;</name>
            <content>
                <baseType ref="class_BinaryPropertyTable_D9F900B43A497D516547526966A7747D0329EEEA"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705296">
            <name>BinaryPropertyTable**</name>
            <content>
                <baseType ref="class_BinaryPropertyTable_D9F900B43A497D516547526966A7747D0329EEEA"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC">
            <name>BinaryReader</name>
        </type>
        <type derived="true" id="type.8699394">
            <name>BinaryReader&amp;</name>
            <content>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700205">
            <name>BinaryReader&amp;&amp;</name>
            <content>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699393">
            <name>BinaryReader*</name>
            <content>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2">
            <name>BinaryWriter</name>
        </type>
        <type derived="true" id="type.8699397">
            <name>BinaryWriter&amp;</name>
            <content>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700341">
            <name>BinaryWriter&amp;&amp;</name>
            <content>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699396">
            <name>BinaryWriter*</name>
            <content>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BitAnd_9921F098921806D17EE263CA51740B40E65BE059">
            <name>BitAnd&lt;T></name>
        </type>
        <type id="type.class_BitAnd_T_AC930DBF44CAD4AF5C16EEB91A5A85BD51AA5A95" specialization="true">
            <name>BitAnd&lt;T></name>
            <content>
                <primaryType ref="class_BitAnd_T_AC930DBF44CAD4AF5C16EEB91A5A85BD51AA5A95"/>
                <argumentType ref="8699681"/>
            </content>
        </type>
        <type derived="true" id="type.8700889">
            <name>BitAnd&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_BitAnd_T_AC930DBF44CAD4AF5C16EEB91A5A85BD51AA5A95"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700888">
            <name>BitAnd&lt;T>*</name>
            <content>
                <baseType ref="type.class_BitAnd_T_AC930DBF44CAD4AF5C16EEB91A5A85BD51AA5A95"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_BitNot_T_763DFD1FCEE6B8C85B9786C16ED6A1B26736DFDF" specialization="true">
            <name>BitNot&lt;T></name>
            <content>
                <primaryType ref="class_BitNot_T_763DFD1FCEE6B8C85B9786C16ED6A1B26736DFDF"/>
                <argumentType ref="8699687"/>
            </content>
        </type>
        <type id="class_BitNot_72018011A8D894A144EBCCE9CEE71FFE03A617B1">
            <name>BitNot&lt;T></name>
        </type>
        <type id="type.class_BitNot_T_763DFD1FCEE6B8C85B9786C16ED6A1B26736DFDF" specialization="true">
            <name>BitNot&lt;T></name>
            <content>
                <primaryType ref="class_BitNot_T_763DFD1FCEE6B8C85B9786C16ED6A1B26736DFDF"/>
                <argumentType ref="8699687"/>
            </content>
        </type>
        <type derived="true" id="type.8700919">
            <name>BitNot&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_BitNot_T_763DFD1FCEE6B8C85B9786C16ED6A1B26736DFDF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700918">
            <name>BitNot&lt;T>*</name>
            <content>
                <baseType ref="type.class_BitNot_T_763DFD1FCEE6B8C85B9786C16ED6A1B26736DFDF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BitOr_4A78EC9A8833E9A27FDD836BE83F8BD162B939E7">
            <name>BitOr&lt;T></name>
        </type>
        <type id="type.class_BitOr_T_4DDB2A2A49411F9C36A78E9B3E3C41E218EA45E5" specialization="true">
            <name>BitOr&lt;T></name>
            <content>
                <primaryType ref="class_BitOr_T_4DDB2A2A49411F9C36A78E9B3E3C41E218EA45E5"/>
                <argumentType ref="8699683"/>
            </content>
        </type>
        <type derived="true" id="type.8700899">
            <name>BitOr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_BitOr_T_4DDB2A2A49411F9C36A78E9B3E3C41E218EA45E5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700898">
            <name>BitOr&lt;T>*</name>
            <content>
                <baseType ref="type.class_BitOr_T_4DDB2A2A49411F9C36A78E9B3E3C41E218EA45E5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_BitXor_T_11BFC9FE73C9D8A61487930E54FA072FAFE53DA6" specialization="true">
            <name>BitXor&lt;T></name>
            <content>
                <primaryType ref="class_BitXor_T_11BFC9FE73C9D8A61487930E54FA072FAFE53DA6"/>
                <argumentType ref="8699685"/>
            </content>
        </type>
        <type id="class_BitXor_65E8D91050B7DD3885176241873ABBE7DB16C298">
            <name>BitXor&lt;T></name>
        </type>
        <type id="type.class_BitXor_T_11BFC9FE73C9D8A61487930E54FA072FAFE53DA6" specialization="true">
            <name>BitXor&lt;T></name>
            <content>
                <primaryType ref="class_BitXor_T_11BFC9FE73C9D8A61487930E54FA072FAFE53DA6"/>
                <argumentType ref="8699685"/>
            </content>
        </type>
        <type derived="true" id="type.8700909">
            <name>BitXor&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_BitXor_T_11BFC9FE73C9D8A61487930E54FA072FAFE53DA6"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700908">
            <name>BitXor&lt;T>*</name>
            <content>
                <baseType ref="type.class_BitXor_T_11BFC9FE73C9D8A61487930E54FA072FAFE53DA6"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Bitset_BA1EE2E68426C5445CB6CAF7F957084ADAFD19CA">
            <name>Bitset</name>
        </type>
        <type derived="true" id="type.8699400">
            <name>Bitset&amp;</name>
            <content>
                <baseType ref="class_Bitset_BA1EE2E68426C5445CB6CAF7F957084ADAFD19CA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700343">
            <name>Bitset&amp;&amp;</name>
            <content>
                <baseType ref="class_Bitset_BA1EE2E68426C5445CB6CAF7F957084ADAFD19CA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699399">
            <name>Bitset*</name>
            <content>
                <baseType ref="class_Bitset_BA1EE2E68426C5445CB6CAF7F957084ADAFD19CA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Block_0DB05901DEB40B5847F018F2B06585EA00CE386B">
            <name>Block</name>
        </type>
        <type derived="true" id="type.8699969">
            <name>Block&amp;</name>
            <content>
                <baseType ref="class_Block_0DB05901DEB40B5847F018F2B06585EA00CE386B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699968">
            <name>Block*</name>
            <content>
                <baseType ref="class_Block_0DB05901DEB40B5847F018F2B06585EA00CE386B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703369">
            <name>Block*&amp;</name>
            <content>
                <baseType ref="class_Block_0DB05901DEB40B5847F018F2B06585EA00CE386B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703475">
            <name>Block*&amp;&amp;</name>
            <content>
                <baseType ref="class_Block_0DB05901DEB40B5847F018F2B06585EA00CE386B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703466">
            <name>Block**</name>
            <content>
                <baseType ref="class_Block_0DB05901DEB40B5847F018F2B06585EA00CE386B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705407">
            <name>Block**&amp;</name>
            <content>
                <baseType ref="class_Block_0DB05901DEB40B5847F018F2B06585EA00CE386B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705460">
            <name>Block**&amp;&amp;</name>
            <content>
                <baseType ref="class_Block_0DB05901DEB40B5847F018F2B06585EA00CE386B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705459">
            <name>Block***</name>
            <content>
                <baseType ref="class_Block_0DB05901DEB40B5847F018F2B06585EA00CE386B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370">
            <name>BlockId</name>
        </type>
        <type derived="true" id="type.8703266">
            <name>BlockId&amp;</name>
            <content>
                <baseType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703267">
            <name>BlockId&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703265">
            <name>BlockId*</name>
            <content>
                <baseType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BlockTable_6443121076F39E567B3BAACE0620D0ABC989F5D7">
            <name>BlockTable</name>
        </type>
        <type derived="true" id="type.8699975">
            <name>BlockTable&amp;</name>
            <content>
                <baseType ref="class_BlockTable_6443121076F39E567B3BAACE0620D0ABC989F5D7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699974">
            <name>BlockTable*</name>
            <content>
                <baseType ref="class_BlockTable_6443121076F39E567B3BAACE0620D0ABC989F5D7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705402">
            <name>BlockTable*&amp;</name>
            <content>
                <baseType ref="class_BlockTable_6443121076F39E567B3BAACE0620D0ABC989F5D7"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705401">
            <name>BlockTable**</name>
            <content>
                <baseType ref="class_BlockTable_6443121076F39E567B3BAACE0620D0ABC989F5D7"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701052" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.8700973" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.8701052" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.8700975">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.8700973"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701054">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.8701052"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700974">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.8700973"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701053">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.8701052"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701007">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.8700973"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701085">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.8701052"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701095">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8701052"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.128">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8700973"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701095">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8701052"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701086">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.8701052"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701008">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.8700973"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701086">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.8701052"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703820" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Age*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8703795"/>
            </content>
        </type>
        <type derived="true" id="type.8703822">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Age*>>&amp;</name>
            <content>
                <baseType ref="type.8703820"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703821">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Age*>>*</name>
            <content>
                <baseType ref="type.8703820"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703853">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;</name>
            <content>
                <baseType ref="type.8703820"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703863">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8703820"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703854">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Age*>>**</name>
            <content>
                <baseType ref="type.8703820"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705612">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Age*>>**&amp;</name>
            <content>
                <baseType ref="type.8703820"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705613">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Age*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8703820"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705611">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Age*>>***</name>
            <content>
                <baseType ref="type.8703820"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704860" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, AliasType*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8704835"/>
            </content>
        </type>
        <type derived="true" id="type.8704862">
            <name>Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>&amp;</name>
            <content>
                <baseType ref="type.8704860"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704861">
            <name>Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*</name>
            <content>
                <baseType ref="type.8704860"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704893">
            <name>Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;</name>
            <content>
                <baseType ref="type.8704860"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704903">
            <name>Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8704860"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704894">
            <name>Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**</name>
            <content>
                <baseType ref="type.8704860"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706022">
            <name>Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**&amp;</name>
            <content>
                <baseType ref="type.8704860"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706023">
            <name>Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8704860"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706021">
            <name>Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>***</name>
            <content>
                <baseType ref="type.8704860"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704444" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8704419"/>
            </content>
        </type>
        <type derived="true" id="type.8704446">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>&amp;</name>
            <content>
                <baseType ref="type.8704444"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704445">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*</name>
            <content>
                <baseType ref="type.8704444"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704477">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;</name>
            <content>
                <baseType ref="type.8704444"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704487">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8704444"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704478">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**</name>
            <content>
                <baseType ref="type.8704444"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705858">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**&amp;</name>
            <content>
                <baseType ref="type.8704444"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705859">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8704444"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705857">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>***</name>
            <content>
                <baseType ref="type.8704444"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704652" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8704627"/>
            </content>
        </type>
        <type derived="true" id="type.8704654">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>&amp;</name>
            <content>
                <baseType ref="type.8704652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704653">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*</name>
            <content>
                <baseType ref="type.8704652"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704685">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;</name>
            <content>
                <baseType ref="type.8704652"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704695">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8704652"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704686">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**</name>
            <content>
                <baseType ref="type.8704652"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705940">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**&amp;</name>
            <content>
                <baseType ref="type.8704652"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705941">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8704652"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705939">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>***</name>
            <content>
                <baseType ref="type.8704652"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703190" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8703165"/>
            </content>
        </type>
        <type derived="true" id="type.8703192">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>&amp;</name>
            <content>
                <baseType ref="type.8703190"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703191">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*</name>
            <content>
                <baseType ref="type.8703190"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703223">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;</name>
            <content>
                <baseType ref="type.8703190"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703233">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8703190"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703224">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**</name>
            <content>
                <baseType ref="type.8703190"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705359">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**&amp;</name>
            <content>
                <baseType ref="type.8703190"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705360">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8703190"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705358">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>***</name>
            <content>
                <baseType ref="type.8703190"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703401" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Block*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8703376"/>
            </content>
        </type>
        <type derived="true" id="type.8703403">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Block*>>&amp;</name>
            <content>
                <baseType ref="type.8703401"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703402">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Block*>>*</name>
            <content>
                <baseType ref="type.8703401"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703434">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;</name>
            <content>
                <baseType ref="type.8703401"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703444">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8703401"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703435">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Block*>>**</name>
            <content>
                <baseType ref="type.8703401"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705448">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Block*>>**&amp;</name>
            <content>
                <baseType ref="type.8703401"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705449">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Block*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8703401"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705447">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Block*>>***</name>
            <content>
                <baseType ref="type.8703401"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703612" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8703587"/>
            </content>
        </type>
        <type derived="true" id="type.8703614">
            <name>Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>&amp;</name>
            <content>
                <baseType ref="type.8703612"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703613">
            <name>Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*</name>
            <content>
                <baseType ref="type.8703612"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703645">
            <name>Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;</name>
            <content>
                <baseType ref="type.8703612"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703655">
            <name>Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8703612"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703646">
            <name>Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**</name>
            <content>
                <baseType ref="type.8703612"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705530">
            <name>Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**&amp;</name>
            <content>
                <baseType ref="type.8703612"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705531">
            <name>Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8703612"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705529">
            <name>Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>***</name>
            <content>
                <baseType ref="type.8703612"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704236" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, NumericType*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8704211"/>
            </content>
        </type>
        <type derived="true" id="type.8704238">
            <name>Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>&amp;</name>
            <content>
                <baseType ref="type.8704236"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704237">
            <name>Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*</name>
            <content>
                <baseType ref="type.8704236"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704269">
            <name>Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;</name>
            <content>
                <baseType ref="type.8704236"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704279">
            <name>Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8704236"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704270">
            <name>Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**</name>
            <content>
                <baseType ref="type.8704236"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705776">
            <name>Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**&amp;</name>
            <content>
                <baseType ref="type.8704236"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705777">
            <name>Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8704236"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705775">
            <name>Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>***</name>
            <content>
                <baseType ref="type.8704236"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704028" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Script*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8704003"/>
            </content>
        </type>
        <type derived="true" id="type.8704030">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Script*>>&amp;</name>
            <content>
                <baseType ref="type.8704028"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704029">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Script*>>*</name>
            <content>
                <baseType ref="type.8704028"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704061">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;</name>
            <content>
                <baseType ref="type.8704028"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704071">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8704028"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704062">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Script*>>**</name>
            <content>
                <baseType ref="type.8704028"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705694">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Script*>>**&amp;</name>
            <content>
                <baseType ref="type.8704028"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705695">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Script*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8704028"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705693">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Script*>>***</name>
            <content>
                <baseType ref="type.8704028"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703744" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8703718"/>
            </content>
        </type>
        <type derived="true" id="type.8703746">
            <name>Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>&amp;</name>
            <content>
                <baseType ref="type.8703744"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703745">
            <name>Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*</name>
            <content>
                <baseType ref="type.8703744"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703777">
            <name>Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;</name>
            <content>
                <baseType ref="type.8703744"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703787">
            <name>Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8703744"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703778">
            <name>Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**</name>
            <content>
                <baseType ref="type.8703744"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705593">
            <name>Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**&amp;</name>
            <content>
                <baseType ref="type.8703744"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705594">
            <name>Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8703744"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705592">
            <name>Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>***</name>
            <content>
                <baseType ref="type.8703744"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704784" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8704758"/>
            </content>
        </type>
        <type derived="true" id="type.8704786">
            <name>Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>&amp;</name>
            <content>
                <baseType ref="type.8704784"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704785">
            <name>Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*</name>
            <content>
                <baseType ref="type.8704784"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704817">
            <name>Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;</name>
            <content>
                <baseType ref="type.8704784"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704827">
            <name>Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8704784"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704818">
            <name>Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**</name>
            <content>
                <baseType ref="type.8704784"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706003">
            <name>Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**&amp;</name>
            <content>
                <baseType ref="type.8704784"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706004">
            <name>Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8704784"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706002">
            <name>Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>***</name>
            <content>
                <baseType ref="type.8704784"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704368" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8704342"/>
            </content>
        </type>
        <type derived="true" id="type.8704370">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>&amp;</name>
            <content>
                <baseType ref="type.8704368"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704369">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*</name>
            <content>
                <baseType ref="type.8704368"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704401">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;</name>
            <content>
                <baseType ref="type.8704368"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704411">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8704368"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704402">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**</name>
            <content>
                <baseType ref="type.8704368"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705839">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**&amp;</name>
            <content>
                <baseType ref="type.8704368"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705840">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8704368"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705838">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>***</name>
            <content>
                <baseType ref="type.8704368"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704576" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8704550"/>
            </content>
        </type>
        <type derived="true" id="type.8704578">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>&amp;</name>
            <content>
                <baseType ref="type.8704576"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704577">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*</name>
            <content>
                <baseType ref="type.8704576"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704609">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;</name>
            <content>
                <baseType ref="type.8704576"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704619">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8704576"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704610">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**</name>
            <content>
                <baseType ref="type.8704576"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705921">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**&amp;</name>
            <content>
                <baseType ref="type.8704576"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705922">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8704576"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705920">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>***</name>
            <content>
                <baseType ref="type.8704576"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703093" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8703067"/>
            </content>
        </type>
        <type derived="true" id="type.8703095">
            <name>Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>&amp;</name>
            <content>
                <baseType ref="type.8703093"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703094">
            <name>Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*</name>
            <content>
                <baseType ref="type.8703093"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703126">
            <name>Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;</name>
            <content>
                <baseType ref="type.8703093"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703136">
            <name>Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8703093"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703127">
            <name>Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**</name>
            <content>
                <baseType ref="type.8703093"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705324">
            <name>Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**&amp;</name>
            <content>
                <baseType ref="type.8703093"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705325">
            <name>Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8703093"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705323">
            <name>Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>***</name>
            <content>
                <baseType ref="type.8703093"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703325" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8703299"/>
            </content>
        </type>
        <type derived="true" id="type.8703327">
            <name>Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>&amp;</name>
            <content>
                <baseType ref="type.8703325"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703326">
            <name>Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*</name>
            <content>
                <baseType ref="type.8703325"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703358">
            <name>Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;</name>
            <content>
                <baseType ref="type.8703325"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703368">
            <name>Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8703325"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703359">
            <name>Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**</name>
            <content>
                <baseType ref="type.8703325"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705429">
            <name>Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**&amp;</name>
            <content>
                <baseType ref="type.8703325"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705430">
            <name>Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8703325"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705428">
            <name>Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>***</name>
            <content>
                <baseType ref="type.8703325"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703536" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8703510"/>
            </content>
        </type>
        <type derived="true" id="type.8703538">
            <name>Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>&amp;</name>
            <content>
                <baseType ref="type.8703536"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703537">
            <name>Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*</name>
            <content>
                <baseType ref="type.8703536"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703569">
            <name>Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;</name>
            <content>
                <baseType ref="type.8703536"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703579">
            <name>Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8703536"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703570">
            <name>Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**</name>
            <content>
                <baseType ref="type.8703536"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705511">
            <name>Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**&amp;</name>
            <content>
                <baseType ref="type.8703536"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705512">
            <name>Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8703536"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705510">
            <name>Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>***</name>
            <content>
                <baseType ref="type.8703536"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704160" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8704134"/>
            </content>
        </type>
        <type derived="true" id="type.8704162">
            <name>Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>&amp;</name>
            <content>
                <baseType ref="type.8704160"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704161">
            <name>Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*</name>
            <content>
                <baseType ref="type.8704160"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704193">
            <name>Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;</name>
            <content>
                <baseType ref="type.8704160"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704203">
            <name>Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8704160"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704194">
            <name>Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**</name>
            <content>
                <baseType ref="type.8704160"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705757">
            <name>Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**&amp;</name>
            <content>
                <baseType ref="type.8704160"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705758">
            <name>Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8704160"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705756">
            <name>Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>***</name>
            <content>
                <baseType ref="type.8704160"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703952" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8703926"/>
            </content>
        </type>
        <type derived="true" id="type.8703954">
            <name>Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>&amp;</name>
            <content>
                <baseType ref="type.8703952"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703953">
            <name>Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*</name>
            <content>
                <baseType ref="type.8703952"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703985">
            <name>Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;</name>
            <content>
                <baseType ref="type.8703952"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703995">
            <name>Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8703952"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703986">
            <name>Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**</name>
            <content>
                <baseType ref="type.8703952"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705675">
            <name>Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**&amp;</name>
            <content>
                <baseType ref="type.8703952"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705676">
            <name>Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8703952"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705674">
            <name>Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>***</name>
            <content>
                <baseType ref="type.8703952"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="8699713"/>
            </content>
        </type>
        <type id="class_Bucket_3C8004715C51DBB13E416E6A5D95EA4AC53E09B4">
            <name>Bucket&lt;T></name>
        </type>
        <type id="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="8699717"/>
            </content>
        </type>
        <type derived="true" id="type.8701129">
            <name>Bucket&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701290">
            <name>Bucket&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701203">
            <name>Bucket&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701258">
            <name>Bucket&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701290">
            <name>Bucket&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701274">
            <name>Bucket&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701202">
            <name>Bucket&lt;T>*</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701128">
            <name>Bucket&lt;T>*</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701273">
            <name>Bucket&lt;T>*</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701257">
            <name>Bucket&lt;T>*</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701289">
            <name>Bucket&lt;T>*</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701234">
            <name>Bucket&lt;T>*&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701160">
            <name>Bucket&lt;T>*&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701234">
            <name>Bucket&lt;T>*&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701244">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.136">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701235">
            <name>Bucket&lt;T>**</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701161">
            <name>Bucket&lt;T>**</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE" specialization="true">
            <name>Bucket&lt;ValueType></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="8699723"/>
            </content>
        </type>
        <type derived="true" id="type.8701312">
            <name>Bucket&lt;ValueType>&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701311">
            <name>Bucket&lt;ValueType>*</name>
            <content>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701345">
            <name>Bucket&lt;ValueType>*&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.149">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701346">
            <name>Bucket&lt;ValueType>**</name>
            <content>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573">
            <name>BufferedByteStream</name>
        </type>
        <type derived="true" id="type.8699406">
            <name>BufferedByteStream&amp;</name>
            <content>
                <baseType ref="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700373">
            <name>BufferedByteStream&amp;&amp;</name>
            <content>
                <baseType ref="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699405">
            <name>BufferedByteStream*</name>
            <content>
                <baseType ref="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F">
            <name>ByteStream</name>
        </type>
        <type derived="true" id="type.8699410">
            <name>ByteStream&amp;</name>
            <content>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700370">
            <name>ByteStream&amp;&amp;</name>
            <content>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699409">
            <name>ByteStream*</name>
            <content>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705162">
            <name>ByteStream*&amp;</name>
            <content>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705163">
            <name>ByteStream*&amp;&amp;</name>
            <content>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705161">
            <name>ByteStream**</name>
            <content>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699840">
            <name>C</name>
        </type>
        <type derived="true" id="type.8700148">
            <name>C&amp;</name>
            <content>
                <baseType ref="8699359"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700146">
            <name>C&amp;</name>
            <content>
                <baseType ref="8699356"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700147">
            <name>C&amp;</name>
            <content>
                <baseType ref="8699358"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700148">
            <name>C&amp;</name>
            <content>
                <baseType ref="8699359"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700149">
            <name>C&amp;</name>
            <content>
                <baseType ref="8699360"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="enumerated_type_CharClass_825BD0E92E069CC6BC59D5D117AD06076A653B4D">
            <name>CharClass</name>
        </type>
        <type derived="true" id="type.8700152">
            <name>CharClass&amp;</name>
            <content>
                <baseType ref="enumerated_type_CharClass_825BD0E92E069CC6BC59D5D117AD06076A653B4D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700153">
            <name>CharClass&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_CharClass_825BD0E92E069CC6BC59D5D117AD06076A653B4D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700151">
            <name>CharClass*</name>
            <content>
                <baseType ref="enumerated_type_CharClass_825BD0E92E069CC6BC59D5D117AD06076A653B4D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_CharClassTable_B24A43EB28B26916FCA6AA24AA09EDB0A1923A1A">
            <name>CharClassTable</name>
        </type>
        <type derived="true" id="type.8699391">
            <name>CharClassTable&amp;</name>
            <content>
                <baseType ref="class_CharClassTable_B24A43EB28B26916FCA6AA24AA09EDB0A1923A1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699390">
            <name>CharClassTable*</name>
            <content>
                <baseType ref="class_CharClassTable_B24A43EB28B26916FCA6AA24AA09EDB0A1923A1A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705153">
            <name>CharClassTable*&amp;</name>
            <content>
                <baseType ref="class_CharClassTable_B24A43EB28B26916FCA6AA24AA09EDB0A1923A1A"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705152">
            <name>CharClassTable**</name>
            <content>
                <baseType ref="class_CharClassTable_B24A43EB28B26916FCA6AA24AA09EDB0A1923A1A"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699902">
            <name>CharT</name>
        </type>
        <type derived="true" id="type.8702732">
            <name>CharT&amp;</name>
            <content>
                <baseType ref="8699897"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702685">
            <name>CharT&amp;</name>
            <content>
                <baseType ref="8699896"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702920">
            <name>CharT&amp;</name>
            <content>
                <baseType ref="8699901"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702779">
            <name>CharT&amp;</name>
            <content>
                <baseType ref="8699898"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702873">
            <name>CharT&amp;</name>
            <content>
                <baseType ref="8699900"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702967">
            <name>CharT&amp;</name>
            <content>
                <baseType ref="8699902"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702826">
            <name>CharT&amp;</name>
            <content>
                <baseType ref="8699899"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702967">
            <name>CharT&amp;</name>
            <content>
                <baseType ref="8699902"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702733">
            <name>CharT*</name>
            <content>
                <baseType ref="8699897"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702968">
            <name>CharT*</name>
            <content>
                <baseType ref="8699902"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702827">
            <name>CharT*</name>
            <content>
                <baseType ref="8699899"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702780">
            <name>CharT*</name>
            <content>
                <baseType ref="8699898"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702874">
            <name>CharT*</name>
            <content>
                <baseType ref="8699900"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702686">
            <name>CharT*</name>
            <content>
                <baseType ref="8699896"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702921">
            <name>CharT*</name>
            <content>
                <baseType ref="8699901"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702827">
            <name>CharT*</name>
            <content>
                <baseType ref="8699899"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_CharacterInfo_E7387AE78EC58246E84889A73F5B953D7D1E7336">
            <name>CharacterInfo</name>
        </type>
        <type derived="true" id="type.8700014">
            <name>CharacterInfo&amp;</name>
            <content>
                <baseType ref="class_CharacterInfo_E7387AE78EC58246E84889A73F5B953D7D1E7336"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700013">
            <name>CharacterInfo*</name>
            <content>
                <baseType ref="class_CharacterInfo_E7387AE78EC58246E84889A73F5B953D7D1E7336"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706065">
            <name>CharacterInfo*&amp;</name>
            <content>
                <baseType ref="class_CharacterInfo_E7387AE78EC58246E84889A73F5B953D7D1E7336"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706064">
            <name>CharacterInfo**</name>
            <content>
                <baseType ref="class_CharacterInfo_E7387AE78EC58246E84889A73F5B953D7D1E7336"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_CharacterInfoPage_69DB089EE4A51A51BA9C5A5F28F2606E5F0A871D">
            <name>CharacterInfoPage</name>
        </type>
        <type derived="true" id="type.8700084">
            <name>CharacterInfoPage&amp;</name>
            <content>
                <baseType ref="class_CharacterInfoPage_69DB089EE4A51A51BA9C5A5F28F2606E5F0A871D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700083">
            <name>CharacterInfoPage*</name>
            <content>
                <baseType ref="class_CharacterInfoPage_69DB089EE4A51A51BA9C5A5F28F2606E5F0A871D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706081">
            <name>CharacterInfoPage*&amp;</name>
            <content>
                <baseType ref="class_CharacterInfoPage_69DB089EE4A51A51BA9C5A5F28F2606E5F0A871D"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706080">
            <name>CharacterInfoPage**</name>
            <content>
                <baseType ref="class_CharacterInfoPage_69DB089EE4A51A51BA9C5A5F28F2606E5F0A871D"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_CharacterTable_0A8C28D5AD9E5EB7406E88B0F6CD21F3D0C1F854">
            <name>CharacterTable</name>
        </type>
        <type derived="true" id="type.8700102">
            <name>CharacterTable&amp;</name>
            <content>
                <baseType ref="class_CharacterTable_0A8C28D5AD9E5EB7406E88B0F6CD21F3D0C1F854"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700101">
            <name>CharacterTable*</name>
            <content>
                <baseType ref="class_CharacterTable_0A8C28D5AD9E5EB7406E88B0F6CD21F3D0C1F854"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706074">
            <name>CharacterTable*&amp;</name>
            <content>
                <baseType ref="class_CharacterTable_0A8C28D5AD9E5EB7406E88B0F6CD21F3D0C1F854"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706073">
            <name>CharacterTable**</name>
            <content>
                <baseType ref="class_CharacterTable_0A8C28D5AD9E5EB7406E88B0F6CD21F3D0C1F854"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99">
            <name>CodeFormatter</name>
        </type>
        <type derived="true" id="type.8699413">
            <name>CodeFormatter&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.390">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699412">
            <name>CodeFormatter*</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_Color_DB4994E28229DF1F2449EC4730B743F3A02B85A6">
            <name>Color</name>
        </type>
        <type derived="true" id="type.8701655">
            <name>Color&amp;</name>
            <content>
                <baseType ref="enumerated_type_Color_DB4994E28229DF1F2449EC4730B743F3A02B85A6"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701656">
            <name>Color&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_Color_DB4994E28229DF1F2449EC4730B743F3A02B85A6"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701654">
            <name>Color*</name>
            <content>
                <baseType ref="enumerated_type_Color_DB4994E28229DF1F2449EC4730B743F3A02B85A6"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699832">
            <name>Compare</name>
        </type>
        <type id="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26">
            <name>ConditionVariable</name>
        </type>
        <type derived="true" id="type.8699547">
            <name>ConditionVariable&amp;</name>
            <content>
                <baseType ref="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700394">
            <name>ConditionVariable&amp;&amp;</name>
            <content>
                <baseType ref="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699546">
            <name>ConditionVariable*</name>
            <content>
                <baseType ref="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_ConditionVariableStatus_996DE378267835377931621DD371B1C5CBA8C822">
            <name>ConditionVariableStatus</name>
        </type>
        <type derived="true" id="type.8700380">
            <name>ConditionVariableStatus&amp;</name>
            <content>
                <baseType ref="enumerated_type_ConditionVariableStatus_996DE378267835377931621DD371B1C5CBA8C822"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700381">
            <name>ConditionVariableStatus&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_ConditionVariableStatus_996DE378267835377931621DD371B1C5CBA8C822"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700379">
            <name>ConditionVariableStatus*</name>
            <content>
                <baseType ref="enumerated_type_ConditionVariableStatus_996DE378267835377931621DD371B1C5CBA8C822"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Console_41891B146EC51CAB04451732257B28BD18CAE52B">
            <name>Console</name>
        </type>
        <type id="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B">
            <name>ConversionException</name>
        </type>
        <type derived="true" id="type.8699551">
            <name>ConversionException&amp;</name>
            <content>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700401">
            <name>ConversionException&amp;&amp;</name>
            <content>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699550">
            <name>ConversionException*</name>
            <content>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700180" specialization="true">
            <name>Counter&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.8700182">
            <name>Counter&lt;System.IO.ByteStream>&amp;</name>
            <content>
                <baseType ref="type.8700180"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700186">
            <name>Counter&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700180"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700181">
            <name>Counter&lt;System.IO.ByteStream>*</name>
            <content>
                <baseType ref="type.8700180"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705160">
            <name>Counter&lt;System.IO.ByteStream>*&amp;</name>
            <content>
                <baseType ref="type.8700180"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705164">
            <name>Counter&lt;System.IO.ByteStream>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8700180"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705159">
            <name>Counter&lt;System.IO.ByteStream>**</name>
            <content>
                <baseType ref="type.8700180"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30" specialization="true">
            <name>Counter&lt;T></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="8699858"/>
            </content>
        </type>
        <type id="class_Counter_ED60FAB687A77451B62DCC1513603A49738E7CD7">
            <name>Counter&lt;T></name>
        </type>
        <type id="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30" specialization="true">
            <name>Counter&lt;T></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="8699866"/>
            </content>
        </type>
        <type derived="true" id="type.8702277">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702557">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702591">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702167">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702109">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702255">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702305">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702591">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702485">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702189">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702123">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702341">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702413">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702527">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702145">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702377">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702233">
            <name>Counter&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702172">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702418">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.240">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702194">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.233">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.224">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702562">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.221">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702282">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702346">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702382">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702596">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702260">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.262">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.255">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702150">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702562">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702188">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702276">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702166">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702254">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702232">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702304">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702144">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702340">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702484">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702122">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702376">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702590">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702556">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702590">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702412">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702108">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702526">
            <name>Counter&lt;T>*</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A" specialization="true">
            <name>Counter&lt;U></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="8699871"/>
            </content>
        </type>
        <type derived="true" id="type.8702623">
            <name>Counter&lt;U>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702211">
            <name>Counter&lt;U>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702449">
            <name>Counter&lt;U>&amp;</name>
            <content>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702626">
            <name>Counter&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702216">
            <name>Counter&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702454">
            <name>Counter&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702626">
            <name>Counter&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702622">
            <name>Counter&lt;U>*</name>
            <content>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702448">
            <name>Counter&lt;U>*</name>
            <content>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702210">
            <name>Counter&lt;U>*</name>
            <content>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_CounterBase_10B5255B4C6CEAF6663DDD03CCD6EFED9BFD9254">
            <name>CounterBase</name>
        </type>
        <type derived="true" id="type.8699843">
            <name>CounterBase&amp;</name>
            <content>
                <baseType ref="class_CounterBase_10B5255B4C6CEAF6663DDD03CCD6EFED9BFD9254"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700183">
            <name>CounterBase&amp;&amp;</name>
            <content>
                <baseType ref="class_CounterBase_10B5255B4C6CEAF6663DDD03CCD6EFED9BFD9254"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699842">
            <name>CounterBase*</name>
            <content>
                <baseType ref="class_CounterBase_10B5255B4C6CEAF6663DDD03CCD6EFED9BFD9254"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Date_351EEEABF504E83A9336BC83CE10D3450072F1E8">
            <name>Date</name>
        </type>
        <type derived="true" id="type.8699943">
            <name>Date&amp;</name>
            <content>
                <baseType ref="class_Date_351EEEABF504E83A9336BC83CE10D3450072F1E8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705234">
            <name>Date&amp;&amp;</name>
            <content>
                <baseType ref="class_Date_351EEEABF504E83A9336BC83CE10D3450072F1E8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699942">
            <name>Date*</name>
            <content>
                <baseType ref="class_Date_351EEEABF504E83A9336BC83CE10D3450072F1E8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705247">
            <name>Date*&amp;</name>
            <content>
                <baseType ref="class_Date_351EEEABF504E83A9336BC83CE10D3450072F1E8"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705246">
            <name>Date**</name>
            <content>
                <baseType ref="class_Date_351EEEABF504E83A9336BC83CE10D3450072F1E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DateTime_1CCCF400289F734AAAB9BC0562E46C77468B398E">
            <name>DateTime</name>
        </type>
        <type derived="true" id="type.8699949">
            <name>DateTime&amp;</name>
            <content>
                <baseType ref="class_DateTime_1CCCF400289F734AAAB9BC0562E46C77468B398E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703029">
            <name>DateTime&amp;&amp;</name>
            <content>
                <baseType ref="class_DateTime_1CCCF400289F734AAAB9BC0562E46C77468B398E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699948">
            <name>DateTime*</name>
            <content>
                <baseType ref="class_DateTime_1CCCF400289F734AAAB9BC0562E46C77468B398E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705253">
            <name>DateTime*&amp;</name>
            <content>
                <baseType ref="class_DateTime_1CCCF400289F734AAAB9BC0562E46C77468B398E"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705252">
            <name>DateTime**</name>
            <content>
                <baseType ref="class_DateTime_1CCCF400289F734AAAB9BC0562E46C77468B398E"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Divides_T_492CA08096256C1214EEE93541699563D4718ED6" specialization="true">
            <name>Divides&lt;T></name>
            <content>
                <primaryType ref="class_Divides_T_492CA08096256C1214EEE93541699563D4718ED6"/>
                <argumentType ref="8699632"/>
            </content>
        </type>
        <type id="class_Divides_9CF2F914C2C68FE3F77CC01DC10510586948EB12">
            <name>Divides&lt;T></name>
        </type>
        <type derived="true" id="type.8700628">
            <name>Divides&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Divides_T_492CA08096256C1214EEE93541699563D4718ED6"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700627">
            <name>Divides&lt;T>*</name>
            <content>
                <baseType ref="type.class_Divides_T_492CA08096256C1214EEE93541699563D4718ED6"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151">
            <name>Duration</name>
        </type>
        <type derived="true" id="type.8699936">
            <name>Duration&amp;</name>
            <content>
                <baseType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703025">
            <name>Duration&amp;&amp;</name>
            <content>
                <baseType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699935">
            <name>Duration*</name>
            <content>
                <baseType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Endl_8E2537FC3949E4C290D6CAA3B15C71D5697AC895">
            <name>Endl</name>
        </type>
        <type derived="true" id="type.8699885">
            <name>Endl&amp;</name>
            <content>
                <baseType ref="class_Endl_8E2537FC3949E4C290D6CAA3B15C71D5697AC895"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705294">
            <name>Endl&amp;&amp;</name>
            <content>
                <baseType ref="class_Endl_8E2537FC3949E4C290D6CAA3B15C71D5697AC895"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699884">
            <name>Endl*</name>
            <content>
                <baseType ref="class_Endl_8E2537FC3949E4C290D6CAA3B15C71D5697AC895"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703144" specialization="true">
            <name>EqualTo&lt;String&lt;char>></name>
            <content>
                <primaryType ref="class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <argumentType ref="type.8700206"/>
            </content>
        </type>
        <type derived="true" id="type.8703158">
            <name>EqualTo&lt;String&lt;char>>&amp;</name>
            <content>
                <baseType ref="type.8703144"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705348">
            <name>EqualTo&lt;String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703144"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703157">
            <name>EqualTo&lt;String&lt;char>>*</name>
            <content>
                <baseType ref="type.8703144"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703697" specialization="true">
            <name>EqualTo&lt;System.Unicode.AgeId></name>
            <content>
                <primaryType ref="class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <argumentType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
            </content>
        </type>
        <type derived="true" id="type.8703711">
            <name>EqualTo&lt;System.Unicode.AgeId>&amp;</name>
            <content>
                <baseType ref="type.8703697"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705582">
            <name>EqualTo&lt;System.Unicode.AgeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703697"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703710">
            <name>EqualTo&lt;System.Unicode.AgeId>*</name>
            <content>
                <baseType ref="type.8703697"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704737" specialization="true">
            <name>EqualTo&lt;System.Unicode.AliasTypeId></name>
            <content>
                <primaryType ref="class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <argumentType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
            </content>
        </type>
        <type derived="true" id="type.8704751">
            <name>EqualTo&lt;System.Unicode.AliasTypeId>&amp;</name>
            <content>
                <baseType ref="type.8704737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705992">
            <name>EqualTo&lt;System.Unicode.AliasTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704737"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704750">
            <name>EqualTo&lt;System.Unicode.AliasTypeId>*</name>
            <content>
                <baseType ref="type.8704737"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704321" specialization="true">
            <name>EqualTo&lt;System.Unicode.BidiClassId></name>
            <content>
                <primaryType ref="class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <argumentType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
            </content>
        </type>
        <type derived="true" id="type.8704335">
            <name>EqualTo&lt;System.Unicode.BidiClassId>&amp;</name>
            <content>
                <baseType ref="type.8704321"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705828">
            <name>EqualTo&lt;System.Unicode.BidiClassId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704321"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704334">
            <name>EqualTo&lt;System.Unicode.BidiClassId>*</name>
            <content>
                <baseType ref="type.8704321"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704529" specialization="true">
            <name>EqualTo&lt;System.Unicode.BidiPairedBracketTypeId></name>
            <content>
                <primaryType ref="class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <argumentType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
            </content>
        </type>
        <type derived="true" id="type.8704543">
            <name>EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>&amp;</name>
            <content>
                <baseType ref="type.8704529"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705910">
            <name>EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704529"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704542">
            <name>EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>*</name>
            <content>
                <baseType ref="type.8704529"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703046" specialization="true">
            <name>EqualTo&lt;System.Unicode.BinaryPropertyId></name>
            <content>
                <primaryType ref="class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <argumentType ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
            </content>
        </type>
        <type derived="true" id="type.8703060">
            <name>EqualTo&lt;System.Unicode.BinaryPropertyId>&amp;</name>
            <content>
                <baseType ref="type.8703046"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705313">
            <name>EqualTo&lt;System.Unicode.BinaryPropertyId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703046"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703059">
            <name>EqualTo&lt;System.Unicode.BinaryPropertyId>*</name>
            <content>
                <baseType ref="type.8703046"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703278" specialization="true">
            <name>EqualTo&lt;System.Unicode.BlockId></name>
            <content>
                <primaryType ref="class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <argumentType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
            </content>
        </type>
        <type derived="true" id="type.8703292">
            <name>EqualTo&lt;System.Unicode.BlockId>&amp;</name>
            <content>
                <baseType ref="type.8703278"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705418">
            <name>EqualTo&lt;System.Unicode.BlockId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703278"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703291">
            <name>EqualTo&lt;System.Unicode.BlockId>*</name>
            <content>
                <baseType ref="type.8703278"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703489" specialization="true">
            <name>EqualTo&lt;System.Unicode.GeneralCategoryId></name>
            <content>
                <primaryType ref="class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <argumentType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
            </content>
        </type>
        <type derived="true" id="type.8703503">
            <name>EqualTo&lt;System.Unicode.GeneralCategoryId>&amp;</name>
            <content>
                <baseType ref="type.8703489"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705500">
            <name>EqualTo&lt;System.Unicode.GeneralCategoryId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703489"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703502">
            <name>EqualTo&lt;System.Unicode.GeneralCategoryId>*</name>
            <content>
                <baseType ref="type.8703489"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704113" specialization="true">
            <name>EqualTo&lt;System.Unicode.NumericTypeId></name>
            <content>
                <primaryType ref="class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <argumentType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
            </content>
        </type>
        <type derived="true" id="type.8704127">
            <name>EqualTo&lt;System.Unicode.NumericTypeId>&amp;</name>
            <content>
                <baseType ref="type.8704113"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705746">
            <name>EqualTo&lt;System.Unicode.NumericTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704113"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704126">
            <name>EqualTo&lt;System.Unicode.NumericTypeId>*</name>
            <content>
                <baseType ref="type.8704113"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703905" specialization="true">
            <name>EqualTo&lt;System.Unicode.ScriptId></name>
            <content>
                <primaryType ref="class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <argumentType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
            </content>
        </type>
        <type derived="true" id="type.8703919">
            <name>EqualTo&lt;System.Unicode.ScriptId>&amp;</name>
            <content>
                <baseType ref="type.8703905"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705664">
            <name>EqualTo&lt;System.Unicode.ScriptId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703905"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703918">
            <name>EqualTo&lt;System.Unicode.ScriptId>*</name>
            <content>
                <baseType ref="type.8703905"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_EqualTo_8BEF19B05622D9B7BFF99AA67201C3D6F007A67F">
            <name>EqualTo&lt;T, U></name>
        </type>
        <type id="type.class_EqualTo_T_U_14A2E50AADEF78C814505DAF8677BBAB6EA3F9EA" specialization="true">
            <name>EqualTo&lt;T, U></name>
            <content>
                <primaryType ref="class_EqualTo_T_U_14A2E50AADEF78C814505DAF8677BBAB6EA3F9EA"/>
                <argumentType ref="8699647"/>
                <argumentType ref="8699648"/>
            </content>
        </type>
        <type derived="true" id="type.8700699">
            <name>EqualTo&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_EqualTo_T_U_14A2E50AADEF78C814505DAF8677BBAB6EA3F9EA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700698">
            <name>EqualTo&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_EqualTo_T_U_14A2E50AADEF78C814505DAF8677BBAB6EA3F9EA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E" specialization="true">
            <name>EqualTo&lt;T></name>
            <content>
                <primaryType ref="class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <argumentType ref="8699645"/>
            </content>
        </type>
        <type id="class_EqualTo_344A8EA41340A75C60AE09B550D5220B1B9AF3C4">
            <name>EqualTo&lt;T></name>
        </type>
        <type id="type.class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E" specialization="true">
            <name>EqualTo&lt;T></name>
            <content>
                <primaryType ref="class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <argumentType ref="8699645"/>
            </content>
        </type>
        <type derived="true" id="type.8700685">
            <name>EqualTo&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700684">
            <name>EqualTo&lt;T>*</name>
            <content>
                <baseType ref="type.class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989">
            <name>Exception</name>
        </type>
        <type derived="true" id="type.8699562">
            <name>Exception&amp;</name>
            <content>
                <baseType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700342">
            <name>Exception&amp;&amp;</name>
            <content>
                <baseType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699561">
            <name>Exception*</name>
            <content>
                <baseType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705190">
            <name>Exception*&amp;</name>
            <content>
                <baseType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705189">
            <name>Exception**</name>
            <content>
                <baseType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ExceptionPtr_3E313CB08B225E0124692C11F3BF8F26E971600C">
            <name>ExceptionPtr</name>
        </type>
        <type derived="true" id="type.8699568">
            <name>ExceptionPtr&amp;</name>
            <content>
                <baseType ref="class_ExceptionPtr_3E313CB08B225E0124692C11F3BF8F26E971600C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705236">
            <name>ExceptionPtr&amp;&amp;</name>
            <content>
                <baseType ref="class_ExceptionPtr_3E313CB08B225E0124692C11F3BF8F26E971600C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699567">
            <name>ExceptionPtr*</name>
            <content>
                <baseType ref="class_ExceptionPtr_3E313CB08B225E0124692C11F3BF8F26E971600C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ExtendedCharacterInfo_16A04F00C660DF07340D57AC4BB8303B8A7CBAD5">
            <name>ExtendedCharacterInfo</name>
        </type>
        <type derived="true" id="type.8700078">
            <name>ExtendedCharacterInfo&amp;</name>
            <content>
                <baseType ref="class_ExtendedCharacterInfo_16A04F00C660DF07340D57AC4BB8303B8A7CBAD5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700077">
            <name>ExtendedCharacterInfo*</name>
            <content>
                <baseType ref="class_ExtendedCharacterInfo_16A04F00C660DF07340D57AC4BB8303B8A7CBAD5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706071">
            <name>ExtendedCharacterInfo*&amp;</name>
            <content>
                <baseType ref="class_ExtendedCharacterInfo_16A04F00C660DF07340D57AC4BB8303B8A7CBAD5"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706070">
            <name>ExtendedCharacterInfo**</name>
            <content>
                <baseType ref="class_ExtendedCharacterInfo_16A04F00C660DF07340D57AC4BB8303B8A7CBAD5"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ExtendedCharacterInfoHeader_576C0EF15E9D47D0C66368F00AC7DC7E893196EA">
            <name>ExtendedCharacterInfoHeader</name>
        </type>
        <type derived="true" id="type.8700096">
            <name>ExtendedCharacterInfoHeader&amp;</name>
            <content>
                <baseType ref="class_ExtendedCharacterInfoHeader_576C0EF15E9D47D0C66368F00AC7DC7E893196EA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700095">
            <name>ExtendedCharacterInfoHeader*</name>
            <content>
                <baseType ref="class_ExtendedCharacterInfoHeader_576C0EF15E9D47D0C66368F00AC7DC7E893196EA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706092">
            <name>ExtendedCharacterInfoHeader*&amp;</name>
            <content>
                <baseType ref="class_ExtendedCharacterInfoHeader_576C0EF15E9D47D0C66368F00AC7DC7E893196EA"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706091">
            <name>ExtendedCharacterInfoHeader**</name>
            <content>
                <baseType ref="class_ExtendedCharacterInfoHeader_576C0EF15E9D47D0C66368F00AC7DC7E893196EA"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ExtendedCharacterInfoPage_0C6801CB06DC546FE37445397210DCBF2F411EC7">
            <name>ExtendedCharacterInfoPage</name>
        </type>
        <type derived="true" id="type.8700090">
            <name>ExtendedCharacterInfoPage&amp;</name>
            <content>
                <baseType ref="class_ExtendedCharacterInfoPage_0C6801CB06DC546FE37445397210DCBF2F411EC7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700089">
            <name>ExtendedCharacterInfoPage*</name>
            <content>
                <baseType ref="class_ExtendedCharacterInfoPage_0C6801CB06DC546FE37445397210DCBF2F411EC7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706089">
            <name>ExtendedCharacterInfoPage*&amp;</name>
            <content>
                <baseType ref="class_ExtendedCharacterInfoPage_0C6801CB06DC546FE37445397210DCBF2F411EC7"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706088">
            <name>ExtendedCharacterInfoPage**</name>
            <content>
                <baseType ref="class_ExtendedCharacterInfoPage_0C6801CB06DC546FE37445397210DCBF2F411EC7"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699324">
            <name>F</name>
        </type>
        <type id="class_File_85477685F364D5CA8DD10F980720D3A3446A5D8A">
            <name>File</name>
        </type>
        <type derived="true" id="type.8706084">
            <name>File&amp;</name>
            <content>
                <baseType ref="class_File_85477685F364D5CA8DD10F980720D3A3446A5D8A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706083">
            <name>File*</name>
            <content>
                <baseType ref="class_File_85477685F364D5CA8DD10F980720D3A3446A5D8A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_FileByteStream_B5032C95DE0C760ED2354356BEFFAFF5F1422919">
            <name>FileByteStream</name>
        </type>
        <type derived="true" id="type.8699575">
            <name>FileByteStream&amp;</name>
            <content>
                <baseType ref="class_FileByteStream_B5032C95DE0C760ED2354356BEFFAFF5F1422919"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700406">
            <name>FileByteStream&amp;&amp;</name>
            <content>
                <baseType ref="class_FileByteStream_B5032C95DE0C760ED2354356BEFFAFF5F1422919"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699574">
            <name>FileByteStream*</name>
            <content>
                <baseType ref="class_FileByteStream_B5032C95DE0C760ED2354356BEFFAFF5F1422919"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A">
            <name>FileSystemException</name>
        </type>
        <type derived="true" id="type.8699582">
            <name>FileSystemException&amp;</name>
            <content>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700412">
            <name>FileSystemException&amp;&amp;</name>
            <content>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699581">
            <name>FileSystemException*</name>
            <content>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <argumentType ref="8699612"/>
            </content>
        </type>
        <type id="class_ForwardList_D7EDC27E762919A9B29477D6434BC1172195EA3E">
            <name>ForwardList&lt;T></name>
        </type>
        <type derived="true" id="type.8700491">
            <name>ForwardList&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700523">
            <name>ForwardList&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700459">
            <name>ForwardList&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700491">
            <name>ForwardList&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.86">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700552">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700520">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700490">
            <name>ForwardList&lt;T>*</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700458">
            <name>ForwardList&lt;T>*</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700490">
            <name>ForwardList&lt;T>*</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700522">
            <name>ForwardList&lt;T>*</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <argumentType ref="8699611"/>
            </content>
        </type>
        <type id="class_ForwardListNode_ADE8450E372B0AA1D38C0A79C2F189F1635ABEFF">
            <name>ForwardListNode&lt;T></name>
        </type>
        <type id="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <argumentType ref="8699602"/>
            </content>
        </type>
        <type derived="true" id="type.8700506">
            <name>ForwardListNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700538">
            <name>ForwardListNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700435">
            <name>ForwardListNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700421">
            <name>ForwardListNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700506">
            <name>ForwardListNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700450">
            <name>ForwardListNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700474">
            <name>ForwardListNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700473">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700505">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700434">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700420">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700537">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700505">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700449">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ForwardListNodeIterator_7A705F67F0CD9BB12F0B57F21EFA7683B6FC939F">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="8699607"/>
                <argumentType ref="8699608"/>
                <argumentType ref="8699609"/>
            </content>
        </type>
        <type derived="true" id="type.8700444">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700429">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.83">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.82">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700443">
            <name>ForwardListNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700428">
            <name>ForwardListNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="8699613"/>
                <argumentType ref="type.8700542"/>
                <argumentType ref="type.8700544"/>
            </content>
        </type>
        <type derived="true" id="type.8700547">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700515">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700483">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.85">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.88">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.90">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700482">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700546">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700514">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700546">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="8699613"/>
                <argumentType ref="type.8700527"/>
                <argumentType ref="type.8700528"/>
            </content>
        </type>
        <type derived="true" id="type.8700468">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700532">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700500">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.87">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.84">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.89">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700499">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700467">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700531">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_GeneralCategory_86A96836F81F142768F75E4C134A416E3DB84E08">
            <name>GeneralCategory</name>
        </type>
        <type derived="true" id="type.8699979">
            <name>GeneralCategory&amp;</name>
            <content>
                <baseType ref="class_GeneralCategory_86A96836F81F142768F75E4C134A416E3DB84E08"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699978">
            <name>GeneralCategory*</name>
            <content>
                <baseType ref="class_GeneralCategory_86A96836F81F142768F75E4C134A416E3DB84E08"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703580">
            <name>GeneralCategory*&amp;</name>
            <content>
                <baseType ref="class_GeneralCategory_86A96836F81F142768F75E4C134A416E3DB84E08"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703686">
            <name>GeneralCategory*&amp;&amp;</name>
            <content>
                <baseType ref="class_GeneralCategory_86A96836F81F142768F75E4C134A416E3DB84E08"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703677">
            <name>GeneralCategory**</name>
            <content>
                <baseType ref="class_GeneralCategory_86A96836F81F142768F75E4C134A416E3DB84E08"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705489">
            <name>GeneralCategory**&amp;</name>
            <content>
                <baseType ref="class_GeneralCategory_86A96836F81F142768F75E4C134A416E3DB84E08"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705542">
            <name>GeneralCategory**&amp;&amp;</name>
            <content>
                <baseType ref="class_GeneralCategory_86A96836F81F142768F75E4C134A416E3DB84E08"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705541">
            <name>GeneralCategory***</name>
            <content>
                <baseType ref="class_GeneralCategory_86A96836F81F142768F75E4C134A416E3DB84E08"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A">
            <name>GeneralCategoryId</name>
        </type>
        <type derived="true" id="type.8703477">
            <name>GeneralCategoryId&amp;</name>
            <content>
                <baseType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703478">
            <name>GeneralCategoryId&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703476">
            <name>GeneralCategoryId*</name>
            <content>
                <baseType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_GeneralCategoryTable_3109B631555A0B27CBC86AC6578E1E5835FD0ADE">
            <name>GeneralCategoryTable</name>
        </type>
        <type derived="true" id="type.8699985">
            <name>GeneralCategoryTable&amp;</name>
            <content>
                <baseType ref="class_GeneralCategoryTable_3109B631555A0B27CBC86AC6578E1E5835FD0ADE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699984">
            <name>GeneralCategoryTable*</name>
            <content>
                <baseType ref="class_GeneralCategoryTable_3109B631555A0B27CBC86AC6578E1E5835FD0ADE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705484">
            <name>GeneralCategoryTable*&amp;</name>
            <content>
                <baseType ref="class_GeneralCategoryTable_3109B631555A0B27CBC86AC6578E1E5835FD0ADE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705483">
            <name>GeneralCategoryTable**</name>
            <content>
                <baseType ref="class_GeneralCategoryTable_3109B631555A0B27CBC86AC6578E1E5835FD0ADE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Greater_T_U_8097A7A2BB5CBC62974405469E34F560A2A4561A" specialization="true">
            <name>Greater&lt;T, U></name>
            <content>
                <primaryType ref="class_Greater_T_U_8097A7A2BB5CBC62974405469E34F560A2A4561A"/>
                <argumentType ref="8699662"/>
                <argumentType ref="8699663"/>
            </content>
        </type>
        <type id="class_Greater_17B6AF1530381375C25436EEDC8CD12D08016914">
            <name>Greater&lt;T, U></name>
        </type>
        <type derived="true" id="type.8700789">
            <name>Greater&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_Greater_T_U_8097A7A2BB5CBC62974405469E34F560A2A4561A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700788">
            <name>Greater&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_Greater_T_U_8097A7A2BB5CBC62974405469E34F560A2A4561A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Greater_T_56F5515BC602FB40A9BE53A6DC993CBA68A6C7B3" specialization="true">
            <name>Greater&lt;T></name>
            <content>
                <primaryType ref="class_Greater_T_56F5515BC602FB40A9BE53A6DC993CBA68A6C7B3"/>
                <argumentType ref="8699660"/>
            </content>
        </type>
        <type id="class_Greater_DBA8E7B118758949250441E0358525B30F9B4558">
            <name>Greater&lt;T></name>
        </type>
        <type id="type.class_Greater_T_56F5515BC602FB40A9BE53A6DC993CBA68A6C7B3" specialization="true">
            <name>Greater&lt;T></name>
            <content>
                <primaryType ref="class_Greater_T_56F5515BC602FB40A9BE53A6DC993CBA68A6C7B3"/>
                <argumentType ref="8699660"/>
            </content>
        </type>
        <type derived="true" id="type.8700775">
            <name>Greater&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Greater_T_56F5515BC602FB40A9BE53A6DC993CBA68A6C7B3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700774">
            <name>Greater&lt;T>*</name>
            <content>
                <baseType ref="type.class_Greater_T_56F5515BC602FB40A9BE53A6DC993CBA68A6C7B3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_GreaterOrEqualTo_T_U_14D473CB3BBA1A1EF7E93DE4077EE3698F3D35B2" specialization="true">
            <name>GreaterOrEqualTo&lt;T, U></name>
            <content>
                <primaryType ref="class_GreaterOrEqualTo_T_U_14D473CB3BBA1A1EF7E93DE4077EE3698F3D35B2"/>
                <argumentType ref="8699672"/>
                <argumentType ref="8699673"/>
            </content>
        </type>
        <type id="class_GreaterOrEqualTo_4EC4A7C8C4F630C0AD27B7CF7148DDD318A2F10F">
            <name>GreaterOrEqualTo&lt;T, U></name>
        </type>
        <type id="type.class_GreaterOrEqualTo_T_U_14D473CB3BBA1A1EF7E93DE4077EE3698F3D35B2" specialization="true">
            <name>GreaterOrEqualTo&lt;T, U></name>
            <content>
                <primaryType ref="class_GreaterOrEqualTo_T_U_14D473CB3BBA1A1EF7E93DE4077EE3698F3D35B2"/>
                <argumentType ref="8699672"/>
                <argumentType ref="8699673"/>
            </content>
        </type>
        <type derived="true" id="type.8700849">
            <name>GreaterOrEqualTo&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_GreaterOrEqualTo_T_U_14D473CB3BBA1A1EF7E93DE4077EE3698F3D35B2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700848">
            <name>GreaterOrEqualTo&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_GreaterOrEqualTo_T_U_14D473CB3BBA1A1EF7E93DE4077EE3698F3D35B2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_GreaterOrEqualTo_T_D83F542E1B6C6AB124B1053122D7FA664A7A913A" specialization="true">
            <name>GreaterOrEqualTo&lt;T></name>
            <content>
                <primaryType ref="class_GreaterOrEqualTo_T_D83F542E1B6C6AB124B1053122D7FA664A7A913A"/>
                <argumentType ref="8699670"/>
            </content>
        </type>
        <type id="class_GreaterOrEqualTo_120FC7ABACC4E6BAE5A796D319F855BAC1ECF6AD">
            <name>GreaterOrEqualTo&lt;T></name>
        </type>
        <type id="type.class_GreaterOrEqualTo_T_D83F542E1B6C6AB124B1053122D7FA664A7A913A" specialization="true">
            <name>GreaterOrEqualTo&lt;T></name>
            <content>
                <primaryType ref="class_GreaterOrEqualTo_T_D83F542E1B6C6AB124B1053122D7FA664A7A913A"/>
                <argumentType ref="8699670"/>
            </content>
        </type>
        <type derived="true" id="type.8700835">
            <name>GreaterOrEqualTo&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_GreaterOrEqualTo_T_D83F542E1B6C6AB124B1053122D7FA664A7A913A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700834">
            <name>GreaterOrEqualTo&lt;T>*</name>
            <content>
                <baseType ref="type.class_GreaterOrEqualTo_T_D83F542E1B6C6AB124B1053122D7FA664A7A913A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699716">
            <name>H</name>
        </type>
        <type derived="true" id="type.8701271">
            <name>H&amp;</name>
            <content>
                <baseType ref="8699716"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701287">
            <name>H&amp;</name>
            <content>
                <baseType ref="8699720"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701271">
            <name>H&amp;</name>
            <content>
                <baseType ref="8699716"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701286">
            <name>H*</name>
            <content>
                <baseType ref="8699720"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701270">
            <name>H*</name>
            <content>
                <baseType ref="8699716"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699725">
            <name>HashFun</name>
        </type>
        <type id="class_HashMap_D30ACF11E1593B9DC994E6FD87AF6B17DC6D2465">
            <name>HashMap&lt;K, T, H, C></name>
        </type>
        <type id="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36" specialization="true">
            <name>HashMap&lt;K, T, H, C></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="8699693"/>
                <argumentType ref="8699694"/>
                <argumentType ref="8699695"/>
                <argumentType ref="8699696"/>
            </content>
        </type>
        <type derived="true" id="type.8701021">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700942">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700941">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701020">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700941">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703789" specialization="true">
            <name>HashMap&lt;String&lt;char>, Age*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8699988"/>
                <argumentType ref="type.8703138"/>
                <argumentType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8703791">
            <name>HashMap&lt;String&lt;char>, Age*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <baseType ref="type.8703789"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703790">
            <name>HashMap&lt;String&lt;char>, Age*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.8703789"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705646">
            <name>HashMap&lt;String&lt;char>, Age*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.8703789"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705645">
            <name>HashMap&lt;String&lt;char>, Age*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>**</name>
            <content>
                <baseType ref="type.8703789"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704829" specialization="true">
            <name>HashMap&lt;String&lt;char>, AliasType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700059"/>
                <argumentType ref="type.8703138"/>
                <argumentType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8704831">
            <name>HashMap&lt;String&lt;char>, AliasType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <baseType ref="type.8704829"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704830">
            <name>HashMap&lt;String&lt;char>, AliasType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.8704829"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706056">
            <name>HashMap&lt;String&lt;char>, AliasType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.8704829"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706055">
            <name>HashMap&lt;String&lt;char>, AliasType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>**</name>
            <content>
                <baseType ref="type.8704829"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704413" specialization="true">
            <name>HashMap&lt;String&lt;char>, BidiClass*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700033"/>
                <argumentType ref="type.8703138"/>
                <argumentType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8704415">
            <name>HashMap&lt;String&lt;char>, BidiClass*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <baseType ref="type.8704413"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704414">
            <name>HashMap&lt;String&lt;char>, BidiClass*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.8704413"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705892">
            <name>HashMap&lt;String&lt;char>, BidiClass*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.8704413"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705891">
            <name>HashMap&lt;String&lt;char>, BidiClass*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>**</name>
            <content>
                <baseType ref="type.8704413"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704621" specialization="true">
            <name>HashMap&lt;String&lt;char>, BidiPairedBracketType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700046"/>
                <argumentType ref="type.8703138"/>
                <argumentType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8704623">
            <name>HashMap&lt;String&lt;char>, BidiPairedBracketType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <baseType ref="type.8704621"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704622">
            <name>HashMap&lt;String&lt;char>, BidiPairedBracketType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.8704621"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705974">
            <name>HashMap&lt;String&lt;char>, BidiPairedBracketType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.8704621"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705973">
            <name>HashMap&lt;String&lt;char>, BidiPairedBracketType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>**</name>
            <content>
                <baseType ref="type.8704621"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703159" specialization="true">
            <name>HashMap&lt;String&lt;char>, BinaryProperty*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8699958"/>
                <argumentType ref="type.8703138"/>
                <argumentType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8703161">
            <name>HashMap&lt;String&lt;char>, BinaryProperty*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <baseType ref="type.8703159"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703160">
            <name>HashMap&lt;String&lt;char>, BinaryProperty*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.8703159"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705400">
            <name>HashMap&lt;String&lt;char>, BinaryProperty*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.8703159"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705399">
            <name>HashMap&lt;String&lt;char>, BinaryProperty*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>**</name>
            <content>
                <baseType ref="type.8703159"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703370" specialization="true">
            <name>HashMap&lt;String&lt;char>, Block*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8699968"/>
                <argumentType ref="type.8703138"/>
                <argumentType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8703372">
            <name>HashMap&lt;String&lt;char>, Block*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <baseType ref="type.8703370"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703371">
            <name>HashMap&lt;String&lt;char>, Block*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.8703370"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705482">
            <name>HashMap&lt;String&lt;char>, Block*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.8703370"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705481">
            <name>HashMap&lt;String&lt;char>, Block*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>**</name>
            <content>
                <baseType ref="type.8703370"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703581" specialization="true">
            <name>HashMap&lt;String&lt;char>, GeneralCategory*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8699978"/>
                <argumentType ref="type.8703138"/>
                <argumentType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8703583">
            <name>HashMap&lt;String&lt;char>, GeneralCategory*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <baseType ref="type.8703581"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703582">
            <name>HashMap&lt;String&lt;char>, GeneralCategory*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.8703581"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705564">
            <name>HashMap&lt;String&lt;char>, GeneralCategory*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.8703581"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705563">
            <name>HashMap&lt;String&lt;char>, GeneralCategory*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>**</name>
            <content>
                <baseType ref="type.8703581"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704205" specialization="true">
            <name>HashMap&lt;String&lt;char>, NumericType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700020"/>
                <argumentType ref="type.8703138"/>
                <argumentType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8704207">
            <name>HashMap&lt;String&lt;char>, NumericType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <baseType ref="type.8704205"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704206">
            <name>HashMap&lt;String&lt;char>, NumericType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.8704205"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705810">
            <name>HashMap&lt;String&lt;char>, NumericType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.8704205"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705809">
            <name>HashMap&lt;String&lt;char>, NumericType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>**</name>
            <content>
                <baseType ref="type.8704205"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703997" specialization="true">
            <name>HashMap&lt;String&lt;char>, Script*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700001"/>
                <argumentType ref="type.8703138"/>
                <argumentType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8703999">
            <name>HashMap&lt;String&lt;char>, Script*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <baseType ref="type.8703997"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703998">
            <name>HashMap&lt;String&lt;char>, Script*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.8703997"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705728">
            <name>HashMap&lt;String&lt;char>, Script*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.8703997"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705727">
            <name>HashMap&lt;String&lt;char>, Script*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>**</name>
            <content>
                <baseType ref="type.8703997"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703712" specialization="true">
            <name>HashMap&lt;System.Unicode.AgeId, Age*, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                <argumentType ref="type.8699988"/>
                <argumentType ref="type.8703690"/>
                <argumentType ref="type.8703697"/>
            </content>
        </type>
        <type derived="true" id="type.8703714">
            <name>HashMap&lt;System.Unicode.AgeId, Age*, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>&amp;</name>
            <content>
                <baseType ref="type.8703712"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703713">
            <name>HashMap&lt;System.Unicode.AgeId, Age*, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>*</name>
            <content>
                <baseType ref="type.8703712"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705638">
            <name>HashMap&lt;System.Unicode.AgeId, Age*, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>*&amp;</name>
            <content>
                <baseType ref="type.8703712"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705637">
            <name>HashMap&lt;System.Unicode.AgeId, Age*, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>**</name>
            <content>
                <baseType ref="type.8703712"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704752" specialization="true">
            <name>HashMap&lt;System.Unicode.AliasTypeId, AliasType*, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                <argumentType ref="type.8700059"/>
                <argumentType ref="type.8704730"/>
                <argumentType ref="type.8704737"/>
            </content>
        </type>
        <type derived="true" id="type.8704754">
            <name>HashMap&lt;System.Unicode.AliasTypeId, AliasType*, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>&amp;</name>
            <content>
                <baseType ref="type.8704752"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704753">
            <name>HashMap&lt;System.Unicode.AliasTypeId, AliasType*, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>*</name>
            <content>
                <baseType ref="type.8704752"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706048">
            <name>HashMap&lt;System.Unicode.AliasTypeId, AliasType*, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>*&amp;</name>
            <content>
                <baseType ref="type.8704752"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706047">
            <name>HashMap&lt;System.Unicode.AliasTypeId, AliasType*, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>**</name>
            <content>
                <baseType ref="type.8704752"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704336" specialization="true">
            <name>HashMap&lt;System.Unicode.BidiClassId, BidiClass*, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                <argumentType ref="type.8700033"/>
                <argumentType ref="type.8704314"/>
                <argumentType ref="type.8704321"/>
            </content>
        </type>
        <type derived="true" id="type.8704338">
            <name>HashMap&lt;System.Unicode.BidiClassId, BidiClass*, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>&amp;</name>
            <content>
                <baseType ref="type.8704336"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704337">
            <name>HashMap&lt;System.Unicode.BidiClassId, BidiClass*, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>*</name>
            <content>
                <baseType ref="type.8704336"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705884">
            <name>HashMap&lt;System.Unicode.BidiClassId, BidiClass*, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>*&amp;</name>
            <content>
                <baseType ref="type.8704336"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705883">
            <name>HashMap&lt;System.Unicode.BidiClassId, BidiClass*, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>**</name>
            <content>
                <baseType ref="type.8704336"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704544" specialization="true">
            <name>HashMap&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                <argumentType ref="type.8700046"/>
                <argumentType ref="type.8704522"/>
                <argumentType ref="type.8704529"/>
            </content>
        </type>
        <type derived="true" id="type.8704546">
            <name>HashMap&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>&amp;</name>
            <content>
                <baseType ref="type.8704544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704545">
            <name>HashMap&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>*</name>
            <content>
                <baseType ref="type.8704544"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705966">
            <name>HashMap&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>*&amp;</name>
            <content>
                <baseType ref="type.8704544"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705965">
            <name>HashMap&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>**</name>
            <content>
                <baseType ref="type.8704544"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703061" specialization="true">
            <name>HashMap&lt;System.Unicode.BinaryPropertyId, BinaryProperty*, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                <argumentType ref="type.8699958"/>
                <argumentType ref="type.8703039"/>
                <argumentType ref="type.8703046"/>
            </content>
        </type>
        <type derived="true" id="type.8703063">
            <name>HashMap&lt;System.Unicode.BinaryPropertyId, BinaryProperty*, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>&amp;</name>
            <content>
                <baseType ref="type.8703061"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703062">
            <name>HashMap&lt;System.Unicode.BinaryPropertyId, BinaryProperty*, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>*</name>
            <content>
                <baseType ref="type.8703061"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705392">
            <name>HashMap&lt;System.Unicode.BinaryPropertyId, BinaryProperty*, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>*&amp;</name>
            <content>
                <baseType ref="type.8703061"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705391">
            <name>HashMap&lt;System.Unicode.BinaryPropertyId, BinaryProperty*, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>**</name>
            <content>
                <baseType ref="type.8703061"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703293" specialization="true">
            <name>HashMap&lt;System.Unicode.BlockId, Block*, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                <argumentType ref="type.8699968"/>
                <argumentType ref="type.8703271"/>
                <argumentType ref="type.8703278"/>
            </content>
        </type>
        <type derived="true" id="type.8703295">
            <name>HashMap&lt;System.Unicode.BlockId, Block*, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>&amp;</name>
            <content>
                <baseType ref="type.8703293"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703294">
            <name>HashMap&lt;System.Unicode.BlockId, Block*, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>*</name>
            <content>
                <baseType ref="type.8703293"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705474">
            <name>HashMap&lt;System.Unicode.BlockId, Block*, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>*&amp;</name>
            <content>
                <baseType ref="type.8703293"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705473">
            <name>HashMap&lt;System.Unicode.BlockId, Block*, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>**</name>
            <content>
                <baseType ref="type.8703293"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703504" specialization="true">
            <name>HashMap&lt;System.Unicode.GeneralCategoryId, GeneralCategory*, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                <argumentType ref="type.8699978"/>
                <argumentType ref="type.8703482"/>
                <argumentType ref="type.8703489"/>
            </content>
        </type>
        <type derived="true" id="type.8703506">
            <name>HashMap&lt;System.Unicode.GeneralCategoryId, GeneralCategory*, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>&amp;</name>
            <content>
                <baseType ref="type.8703504"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703505">
            <name>HashMap&lt;System.Unicode.GeneralCategoryId, GeneralCategory*, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>*</name>
            <content>
                <baseType ref="type.8703504"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705556">
            <name>HashMap&lt;System.Unicode.GeneralCategoryId, GeneralCategory*, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>*&amp;</name>
            <content>
                <baseType ref="type.8703504"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705555">
            <name>HashMap&lt;System.Unicode.GeneralCategoryId, GeneralCategory*, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>**</name>
            <content>
                <baseType ref="type.8703504"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704128" specialization="true">
            <name>HashMap&lt;System.Unicode.NumericTypeId, NumericType*, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                <argumentType ref="type.8700020"/>
                <argumentType ref="type.8704106"/>
                <argumentType ref="type.8704113"/>
            </content>
        </type>
        <type derived="true" id="type.8704130">
            <name>HashMap&lt;System.Unicode.NumericTypeId, NumericType*, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>&amp;</name>
            <content>
                <baseType ref="type.8704128"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704129">
            <name>HashMap&lt;System.Unicode.NumericTypeId, NumericType*, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>*</name>
            <content>
                <baseType ref="type.8704128"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705802">
            <name>HashMap&lt;System.Unicode.NumericTypeId, NumericType*, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>*&amp;</name>
            <content>
                <baseType ref="type.8704128"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705801">
            <name>HashMap&lt;System.Unicode.NumericTypeId, NumericType*, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>**</name>
            <content>
                <baseType ref="type.8704128"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703920" specialization="true">
            <name>HashMap&lt;System.Unicode.ScriptId, Script*, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                <argumentType ref="type.8700001"/>
                <argumentType ref="type.8703898"/>
                <argumentType ref="type.8703905"/>
            </content>
        </type>
        <type derived="true" id="type.8703922">
            <name>HashMap&lt;System.Unicode.ScriptId, Script*, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>&amp;</name>
            <content>
                <baseType ref="type.8703920"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703921">
            <name>HashMap&lt;System.Unicode.ScriptId, Script*, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>*</name>
            <content>
                <baseType ref="type.8703920"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705720">
            <name>HashMap&lt;System.Unicode.ScriptId, Script*, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>*&amp;</name>
            <content>
                <baseType ref="type.8703920"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705719">
            <name>HashMap&lt;System.Unicode.ScriptId, Script*, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>**</name>
            <content>
                <baseType ref="type.8703920"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_HashSet_T_H_C_6247CEC2AE0E22CFEFEC71837C21FA087B7840DC" specialization="true">
            <name>HashSet&lt;T, H, C></name>
            <content>
                <primaryType ref="class_HashSet_T_H_C_6247CEC2AE0E22CFEFEC71837C21FA087B7840DC"/>
                <argumentType ref="8699705"/>
                <argumentType ref="8699706"/>
                <argumentType ref="8699707"/>
            </content>
        </type>
        <type id="class_HashSet_52DF01333A381E5FA0E30F6358F3B52DFF744EFA">
            <name>HashSet&lt;T, H, C></name>
        </type>
        <type id="type.class_HashSet_T_H_C_6247CEC2AE0E22CFEFEC71837C21FA087B7840DC" specialization="true">
            <name>HashSet&lt;T, H, C></name>
            <content>
                <primaryType ref="class_HashSet_T_H_C_6247CEC2AE0E22CFEFEC71837C21FA087B7840DC"/>
                <argumentType ref="8699705"/>
                <argumentType ref="8699706"/>
                <argumentType ref="8699707"/>
            </content>
        </type>
        <type derived="true" id="type.8701173">
            <name>HashSet&lt;T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashSet_T_H_C_6247CEC2AE0E22CFEFEC71837C21FA087B7840DC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701099">
            <name>HashSet&lt;T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashSet_T_H_C_6247CEC2AE0E22CFEFEC71837C21FA087B7840DC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701098">
            <name>HashSet&lt;T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashSet_T_H_C_6247CEC2AE0E22CFEFEC71837C21FA087B7840DC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701172">
            <name>HashSet&lt;T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashSet_T_H_C_6247CEC2AE0E22CFEFEC71837C21FA087B7840DC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703138" specialization="true">
            <name>Hasher&lt;String&lt;char>></name>
            <content>
                <primaryType ref="class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325"/>
                <argumentType ref="type.8700206"/>
            </content>
        </type>
        <type derived="true" id="type.8703140">
            <name>Hasher&lt;String&lt;char>>&amp;</name>
            <content>
                <baseType ref="type.8703138"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705342">
            <name>Hasher&lt;String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703138"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703139">
            <name>Hasher&lt;String&lt;char>>*</name>
            <content>
                <baseType ref="type.8703138"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703690" specialization="true">
            <name>Hasher&lt;System.Unicode.AgeId></name>
            <content>
                <primaryType ref="class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325"/>
                <argumentType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
            </content>
        </type>
        <type derived="true" id="type.8703692">
            <name>Hasher&lt;System.Unicode.AgeId>&amp;</name>
            <content>
                <baseType ref="type.8703690"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705576">
            <name>Hasher&lt;System.Unicode.AgeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703690"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703691">
            <name>Hasher&lt;System.Unicode.AgeId>*</name>
            <content>
                <baseType ref="type.8703690"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704730" specialization="true">
            <name>Hasher&lt;System.Unicode.AliasTypeId></name>
            <content>
                <primaryType ref="class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325"/>
                <argumentType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
            </content>
        </type>
        <type derived="true" id="type.8704732">
            <name>Hasher&lt;System.Unicode.AliasTypeId>&amp;</name>
            <content>
                <baseType ref="type.8704730"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705986">
            <name>Hasher&lt;System.Unicode.AliasTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704730"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704731">
            <name>Hasher&lt;System.Unicode.AliasTypeId>*</name>
            <content>
                <baseType ref="type.8704730"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704314" specialization="true">
            <name>Hasher&lt;System.Unicode.BidiClassId></name>
            <content>
                <primaryType ref="class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325"/>
                <argumentType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
            </content>
        </type>
        <type derived="true" id="type.8704316">
            <name>Hasher&lt;System.Unicode.BidiClassId>&amp;</name>
            <content>
                <baseType ref="type.8704314"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705822">
            <name>Hasher&lt;System.Unicode.BidiClassId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704314"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704315">
            <name>Hasher&lt;System.Unicode.BidiClassId>*</name>
            <content>
                <baseType ref="type.8704314"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704522" specialization="true">
            <name>Hasher&lt;System.Unicode.BidiPairedBracketTypeId></name>
            <content>
                <primaryType ref="class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325"/>
                <argumentType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
            </content>
        </type>
        <type derived="true" id="type.8704524">
            <name>Hasher&lt;System.Unicode.BidiPairedBracketTypeId>&amp;</name>
            <content>
                <baseType ref="type.8704522"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705904">
            <name>Hasher&lt;System.Unicode.BidiPairedBracketTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704522"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704523">
            <name>Hasher&lt;System.Unicode.BidiPairedBracketTypeId>*</name>
            <content>
                <baseType ref="type.8704522"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703039" specialization="true">
            <name>Hasher&lt;System.Unicode.BinaryPropertyId></name>
            <content>
                <primaryType ref="class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325"/>
                <argumentType ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
            </content>
        </type>
        <type derived="true" id="type.8703041">
            <name>Hasher&lt;System.Unicode.BinaryPropertyId>&amp;</name>
            <content>
                <baseType ref="type.8703039"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705307">
            <name>Hasher&lt;System.Unicode.BinaryPropertyId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703039"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703040">
            <name>Hasher&lt;System.Unicode.BinaryPropertyId>*</name>
            <content>
                <baseType ref="type.8703039"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703271" specialization="true">
            <name>Hasher&lt;System.Unicode.BlockId></name>
            <content>
                <primaryType ref="class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325"/>
                <argumentType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
            </content>
        </type>
        <type derived="true" id="type.8703273">
            <name>Hasher&lt;System.Unicode.BlockId>&amp;</name>
            <content>
                <baseType ref="type.8703271"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705412">
            <name>Hasher&lt;System.Unicode.BlockId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703271"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703272">
            <name>Hasher&lt;System.Unicode.BlockId>*</name>
            <content>
                <baseType ref="type.8703271"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703482" specialization="true">
            <name>Hasher&lt;System.Unicode.GeneralCategoryId></name>
            <content>
                <primaryType ref="class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325"/>
                <argumentType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
            </content>
        </type>
        <type derived="true" id="type.8703484">
            <name>Hasher&lt;System.Unicode.GeneralCategoryId>&amp;</name>
            <content>
                <baseType ref="type.8703482"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705494">
            <name>Hasher&lt;System.Unicode.GeneralCategoryId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703482"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703483">
            <name>Hasher&lt;System.Unicode.GeneralCategoryId>*</name>
            <content>
                <baseType ref="type.8703482"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704106" specialization="true">
            <name>Hasher&lt;System.Unicode.NumericTypeId></name>
            <content>
                <primaryType ref="class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325"/>
                <argumentType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
            </content>
        </type>
        <type derived="true" id="type.8704108">
            <name>Hasher&lt;System.Unicode.NumericTypeId>&amp;</name>
            <content>
                <baseType ref="type.8704106"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705740">
            <name>Hasher&lt;System.Unicode.NumericTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704106"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704107">
            <name>Hasher&lt;System.Unicode.NumericTypeId>*</name>
            <content>
                <baseType ref="type.8704106"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703898" specialization="true">
            <name>Hasher&lt;System.Unicode.ScriptId></name>
            <content>
                <primaryType ref="class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325"/>
                <argumentType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
            </content>
        </type>
        <type derived="true" id="type.8703900">
            <name>Hasher&lt;System.Unicode.ScriptId>&amp;</name>
            <content>
                <baseType ref="type.8703898"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705658">
            <name>Hasher&lt;System.Unicode.ScriptId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703898"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703899">
            <name>Hasher&lt;System.Unicode.ScriptId>*</name>
            <content>
                <baseType ref="type.8703898"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Hasher_CC8A609EF7ACAC347DCF6D25FBB58DBC4F897757">
            <name>Hasher&lt;T></name>
        </type>
        <type id="type.class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325" specialization="true">
            <name>Hasher&lt;T></name>
            <content>
                <primaryType ref="class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325"/>
                <argumentType ref="8699709"/>
            </content>
        </type>
        <type derived="true" id="type.8701251">
            <name>Hasher&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701250">
            <name>Hasher&lt;T>*</name>
            <content>
                <baseType ref="type.class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="8699697"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <argumentType ref="8699699"/>
                <argumentType ref="8699700"/>
            </content>
        </type>
        <type derived="true" id="type.8700963">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701042">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700963">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.124">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701066">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701041">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700962">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Hashtable_B91A73C8D369379C24A064B1595A8825F2537B47">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
        </type>
        <type id="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2" specialization="true">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="8699722"/>
                <argumentType ref="8699723"/>
                <argumentType ref="8699724"/>
                <argumentType ref="8699725"/>
                <argumentType ref="8699726"/>
            </content>
        </type>
        <type derived="true" id="type.8701298">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.144">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701297">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>*</name>
            <content>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703808" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8703795"/>
                <argumentType ref="type.8703798"/>
                <argumentType ref="type.8703138"/>
                <argumentType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8703810">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <baseType ref="type.8703808"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703834">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703808"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703809">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.8703808"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705619">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.8703808"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705620">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8703808"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705618">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>**</name>
            <content>
                <baseType ref="type.8703808"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704848" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8704835"/>
                <argumentType ref="type.8704838"/>
                <argumentType ref="type.8703138"/>
                <argumentType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8704850">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <baseType ref="type.8704848"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704874">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704848"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704849">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.8704848"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706029">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.8704848"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706030">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8704848"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706028">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>**</name>
            <content>
                <baseType ref="type.8704848"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704432" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8704419"/>
                <argumentType ref="type.8704422"/>
                <argumentType ref="type.8703138"/>
                <argumentType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8704434">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <baseType ref="type.8704432"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704458">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704432"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704433">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.8704432"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705865">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.8704432"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705866">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8704432"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705864">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>**</name>
            <content>
                <baseType ref="type.8704432"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704640" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8704627"/>
                <argumentType ref="type.8704630"/>
                <argumentType ref="type.8703138"/>
                <argumentType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8704642">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <baseType ref="type.8704640"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704666">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704640"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704641">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.8704640"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705947">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.8704640"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705948">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8704640"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705946">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>**</name>
            <content>
                <baseType ref="type.8704640"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703178" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8703165"/>
                <argumentType ref="type.8703168"/>
                <argumentType ref="type.8703138"/>
                <argumentType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8703180">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <baseType ref="type.8703178"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703204">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703178"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703179">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.8703178"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705373">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.8703178"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705374">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8703178"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705372">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>**</name>
            <content>
                <baseType ref="type.8703178"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703389" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8703376"/>
                <argumentType ref="type.8703379"/>
                <argumentType ref="type.8703138"/>
                <argumentType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8703391">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <baseType ref="type.8703389"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703415">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703389"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703390">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.8703389"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705455">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.8703389"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705456">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8703389"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705454">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>**</name>
            <content>
                <baseType ref="type.8703389"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703600" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8703587"/>
                <argumentType ref="type.8703590"/>
                <argumentType ref="type.8703138"/>
                <argumentType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8703602">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <baseType ref="type.8703600"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703626">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703600"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703601">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.8703600"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705537">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.8703600"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705538">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8703600"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705536">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>**</name>
            <content>
                <baseType ref="type.8703600"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704224" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8704211"/>
                <argumentType ref="type.8704214"/>
                <argumentType ref="type.8703138"/>
                <argumentType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8704226">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <baseType ref="type.8704224"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704250">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704224"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704225">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.8704224"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705783">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.8704224"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705784">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8704224"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705782">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>**</name>
            <content>
                <baseType ref="type.8704224"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704016" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8704003"/>
                <argumentType ref="type.8704006"/>
                <argumentType ref="type.8703138"/>
                <argumentType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8704018">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <baseType ref="type.8704016"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704042">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704016"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704017">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.8704016"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705701">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.8704016"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705702">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8704016"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705700">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>**</name>
            <content>
                <baseType ref="type.8704016"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703732" specialization="true">
            <name>Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                <argumentType ref="type.8703718"/>
                <argumentType ref="type.8703722"/>
                <argumentType ref="type.8703690"/>
                <argumentType ref="type.8703697"/>
            </content>
        </type>
        <type derived="true" id="type.8703734">
            <name>Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>&amp;</name>
            <content>
                <baseType ref="type.8703732"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703758">
            <name>Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703732"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703733">
            <name>Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>*</name>
            <content>
                <baseType ref="type.8703732"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705600">
            <name>Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>*&amp;</name>
            <content>
                <baseType ref="type.8703732"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705601">
            <name>Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8703732"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705599">
            <name>Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>**</name>
            <content>
                <baseType ref="type.8703732"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704772" specialization="true">
            <name>Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                <argumentType ref="type.8704758"/>
                <argumentType ref="type.8704762"/>
                <argumentType ref="type.8704730"/>
                <argumentType ref="type.8704737"/>
            </content>
        </type>
        <type derived="true" id="type.8704774">
            <name>Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>&amp;</name>
            <content>
                <baseType ref="type.8704772"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704798">
            <name>Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704772"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704773">
            <name>Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>*</name>
            <content>
                <baseType ref="type.8704772"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706010">
            <name>Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>*&amp;</name>
            <content>
                <baseType ref="type.8704772"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706011">
            <name>Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8704772"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706009">
            <name>Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>**</name>
            <content>
                <baseType ref="type.8704772"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704356" specialization="true">
            <name>Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                <argumentType ref="type.8704342"/>
                <argumentType ref="type.8704346"/>
                <argumentType ref="type.8704314"/>
                <argumentType ref="type.8704321"/>
            </content>
        </type>
        <type derived="true" id="type.8704358">
            <name>Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>&amp;</name>
            <content>
                <baseType ref="type.8704356"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704382">
            <name>Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704356"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704357">
            <name>Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>*</name>
            <content>
                <baseType ref="type.8704356"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705846">
            <name>Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>*&amp;</name>
            <content>
                <baseType ref="type.8704356"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705847">
            <name>Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8704356"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705845">
            <name>Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>**</name>
            <content>
                <baseType ref="type.8704356"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704564" specialization="true">
            <name>Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                <argumentType ref="type.8704550"/>
                <argumentType ref="type.8704554"/>
                <argumentType ref="type.8704522"/>
                <argumentType ref="type.8704529"/>
            </content>
        </type>
        <type derived="true" id="type.8704566">
            <name>Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>&amp;</name>
            <content>
                <baseType ref="type.8704564"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704590">
            <name>Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704564"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704565">
            <name>Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>*</name>
            <content>
                <baseType ref="type.8704564"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705928">
            <name>Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>*&amp;</name>
            <content>
                <baseType ref="type.8704564"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705929">
            <name>Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8704564"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705927">
            <name>Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>**</name>
            <content>
                <baseType ref="type.8704564"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703081" specialization="true">
            <name>Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                <argumentType ref="type.8703067"/>
                <argumentType ref="type.8703071"/>
                <argumentType ref="type.8703039"/>
                <argumentType ref="type.8703046"/>
            </content>
        </type>
        <type derived="true" id="type.8703083">
            <name>Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>&amp;</name>
            <content>
                <baseType ref="type.8703081"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703107">
            <name>Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703081"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703082">
            <name>Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>*</name>
            <content>
                <baseType ref="type.8703081"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705331">
            <name>Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>*&amp;</name>
            <content>
                <baseType ref="type.8703081"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705332">
            <name>Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8703081"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705330">
            <name>Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>**</name>
            <content>
                <baseType ref="type.8703081"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703313" specialization="true">
            <name>Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                <argumentType ref="type.8703299"/>
                <argumentType ref="type.8703303"/>
                <argumentType ref="type.8703271"/>
                <argumentType ref="type.8703278"/>
            </content>
        </type>
        <type derived="true" id="type.8703315">
            <name>Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>&amp;</name>
            <content>
                <baseType ref="type.8703313"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703339">
            <name>Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703313"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703314">
            <name>Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>*</name>
            <content>
                <baseType ref="type.8703313"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705436">
            <name>Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>*&amp;</name>
            <content>
                <baseType ref="type.8703313"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705437">
            <name>Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8703313"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705435">
            <name>Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>**</name>
            <content>
                <baseType ref="type.8703313"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703524" specialization="true">
            <name>Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                <argumentType ref="type.8703510"/>
                <argumentType ref="type.8703514"/>
                <argumentType ref="type.8703482"/>
                <argumentType ref="type.8703489"/>
            </content>
        </type>
        <type derived="true" id="type.8703526">
            <name>Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>&amp;</name>
            <content>
                <baseType ref="type.8703524"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703550">
            <name>Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703524"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703525">
            <name>Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>*</name>
            <content>
                <baseType ref="type.8703524"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705518">
            <name>Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>*&amp;</name>
            <content>
                <baseType ref="type.8703524"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705519">
            <name>Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8703524"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705517">
            <name>Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>**</name>
            <content>
                <baseType ref="type.8703524"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704148" specialization="true">
            <name>Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                <argumentType ref="type.8704134"/>
                <argumentType ref="type.8704138"/>
                <argumentType ref="type.8704106"/>
                <argumentType ref="type.8704113"/>
            </content>
        </type>
        <type derived="true" id="type.8704150">
            <name>Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>&amp;</name>
            <content>
                <baseType ref="type.8704148"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704174">
            <name>Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704148"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704149">
            <name>Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>*</name>
            <content>
                <baseType ref="type.8704148"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705764">
            <name>Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>*&amp;</name>
            <content>
                <baseType ref="type.8704148"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705765">
            <name>Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8704148"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705763">
            <name>Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>**</name>
            <content>
                <baseType ref="type.8704148"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703940" specialization="true">
            <name>Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                <argumentType ref="type.8703926"/>
                <argumentType ref="type.8703930"/>
                <argumentType ref="type.8703898"/>
                <argumentType ref="type.8703905"/>
            </content>
        </type>
        <type derived="true" id="type.8703942">
            <name>Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>&amp;</name>
            <content>
                <baseType ref="type.8703940"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703966">
            <name>Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703940"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703941">
            <name>Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>*</name>
            <content>
                <baseType ref="type.8703940"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705682">
            <name>Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>*&amp;</name>
            <content>
                <baseType ref="type.8703940"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705683">
            <name>Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8703940"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705681">
            <name>Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>**</name>
            <content>
                <baseType ref="type.8703940"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="8699705"/>
                <argumentType ref="8699705"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="8699706"/>
                <argumentType ref="8699707"/>
            </content>
        </type>
        <type derived="true" id="type.8701115">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701189">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701215">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.132">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701215">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701188">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701114">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701046" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.8701027"/>
                <argumentType ref="type.8701026"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.8700967" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.8700948"/>
                <argumentType ref="type.8700947"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.8701048">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.8701046"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700969">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.8700967"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701047">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.8701046"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700968">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.8700967"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701060" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.8701037"/>
                <argumentType ref="type.8701058"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.8700981" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.8700958"/>
                <argumentType ref="type.8700979"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.8701060" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.8701037"/>
                <argumentType ref="type.8701058"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.8701062">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.8701060"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700983">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.8700981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701062">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.8701060"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701061">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.8701060"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700982">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.8700981"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703814" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8703795"/>
                <argumentType ref="type.8703797"/>
                <argumentType ref="type.8703796"/>
                <argumentType ref="type.8703808"/>
            </content>
        </type>
        <type derived="true" id="type.8703816">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.8703814"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705639">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703814"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703815">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.8703814"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703828" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, const Pair&lt;String&lt;char>, Age*>&amp;, const Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8703795"/>
                <argumentType ref="type.8703805"/>
                <argumentType ref="type.8703826"/>
                <argumentType ref="type.8703808"/>
            </content>
        </type>
        <type derived="true" id="type.8703830">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, const Pair&lt;String&lt;char>, Age*>&amp;, const Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.8703828"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705621">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, const Pair&lt;String&lt;char>, Age*>&amp;, const Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703828"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703829">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, const Pair&lt;String&lt;char>, Age*>&amp;, const Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.8703828"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704854" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8704835"/>
                <argumentType ref="type.8704837"/>
                <argumentType ref="type.8704836"/>
                <argumentType ref="type.8704848"/>
            </content>
        </type>
        <type derived="true" id="type.8704856">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.8704854"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706049">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704854"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704855">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.8704854"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704868" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, const Pair&lt;String&lt;char>, AliasType*>&amp;, const Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8704835"/>
                <argumentType ref="type.8704845"/>
                <argumentType ref="type.8704866"/>
                <argumentType ref="type.8704848"/>
            </content>
        </type>
        <type derived="true" id="type.8704870">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, const Pair&lt;String&lt;char>, AliasType*>&amp;, const Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.8704868"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706031">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, const Pair&lt;String&lt;char>, AliasType*>&amp;, const Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704868"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704869">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, const Pair&lt;String&lt;char>, AliasType*>&amp;, const Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.8704868"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704438" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8704419"/>
                <argumentType ref="type.8704421"/>
                <argumentType ref="type.8704420"/>
                <argumentType ref="type.8704432"/>
            </content>
        </type>
        <type derived="true" id="type.8704440">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.8704438"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705885">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704438"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704439">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.8704438"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704452" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, const Pair&lt;String&lt;char>, BidiClass*>&amp;, const Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8704419"/>
                <argumentType ref="type.8704429"/>
                <argumentType ref="type.8704450"/>
                <argumentType ref="type.8704432"/>
            </content>
        </type>
        <type derived="true" id="type.8704454">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, const Pair&lt;String&lt;char>, BidiClass*>&amp;, const Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.8704452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705867">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, const Pair&lt;String&lt;char>, BidiClass*>&amp;, const Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704452"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704453">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, const Pair&lt;String&lt;char>, BidiClass*>&amp;, const Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.8704452"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704646" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8704627"/>
                <argumentType ref="type.8704629"/>
                <argumentType ref="type.8704628"/>
                <argumentType ref="type.8704640"/>
            </content>
        </type>
        <type derived="true" id="type.8704648">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.8704646"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705967">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704646"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704647">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.8704646"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704660" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, const Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8704627"/>
                <argumentType ref="type.8704637"/>
                <argumentType ref="type.8704658"/>
                <argumentType ref="type.8704640"/>
            </content>
        </type>
        <type derived="true" id="type.8704662">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, const Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.8704660"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705949">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, const Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704660"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704661">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, const Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.8704660"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703184" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8703165"/>
                <argumentType ref="type.8703167"/>
                <argumentType ref="type.8703166"/>
                <argumentType ref="type.8703178"/>
            </content>
        </type>
        <type derived="true" id="type.8703186">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.8703184"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705393">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703184"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703185">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.8703184"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703198" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, const Pair&lt;String&lt;char>, BinaryProperty*>&amp;, const Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8703165"/>
                <argumentType ref="type.8703175"/>
                <argumentType ref="type.8703196"/>
                <argumentType ref="type.8703178"/>
            </content>
        </type>
        <type derived="true" id="type.8703200">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, const Pair&lt;String&lt;char>, BinaryProperty*>&amp;, const Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.8703198"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705375">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, const Pair&lt;String&lt;char>, BinaryProperty*>&amp;, const Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703198"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703199">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, const Pair&lt;String&lt;char>, BinaryProperty*>&amp;, const Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.8703198"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703395" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8703376"/>
                <argumentType ref="type.8703378"/>
                <argumentType ref="type.8703377"/>
                <argumentType ref="type.8703389"/>
            </content>
        </type>
        <type derived="true" id="type.8703397">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.8703395"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705475">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703395"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703396">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.8703395"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703409" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, const Pair&lt;String&lt;char>, Block*>&amp;, const Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8703376"/>
                <argumentType ref="type.8703386"/>
                <argumentType ref="type.8703407"/>
                <argumentType ref="type.8703389"/>
            </content>
        </type>
        <type derived="true" id="type.8703411">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, const Pair&lt;String&lt;char>, Block*>&amp;, const Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.8703409"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705457">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, const Pair&lt;String&lt;char>, Block*>&amp;, const Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703409"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703410">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, const Pair&lt;String&lt;char>, Block*>&amp;, const Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.8703409"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703606" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8703587"/>
                <argumentType ref="type.8703589"/>
                <argumentType ref="type.8703588"/>
                <argumentType ref="type.8703600"/>
            </content>
        </type>
        <type derived="true" id="type.8703608">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.8703606"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705557">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703606"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703607">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.8703606"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703620" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, const Pair&lt;String&lt;char>, GeneralCategory*>&amp;, const Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8703587"/>
                <argumentType ref="type.8703597"/>
                <argumentType ref="type.8703618"/>
                <argumentType ref="type.8703600"/>
            </content>
        </type>
        <type derived="true" id="type.8703622">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, const Pair&lt;String&lt;char>, GeneralCategory*>&amp;, const Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.8703620"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705539">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, const Pair&lt;String&lt;char>, GeneralCategory*>&amp;, const Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703620"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703621">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, const Pair&lt;String&lt;char>, GeneralCategory*>&amp;, const Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.8703620"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704230" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8704211"/>
                <argumentType ref="type.8704213"/>
                <argumentType ref="type.8704212"/>
                <argumentType ref="type.8704224"/>
            </content>
        </type>
        <type derived="true" id="type.8704232">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.8704230"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705803">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704230"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704231">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.8704230"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704244" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, const Pair&lt;String&lt;char>, NumericType*>&amp;, const Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8704211"/>
                <argumentType ref="type.8704221"/>
                <argumentType ref="type.8704242"/>
                <argumentType ref="type.8704224"/>
            </content>
        </type>
        <type derived="true" id="type.8704246">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, const Pair&lt;String&lt;char>, NumericType*>&amp;, const Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.8704244"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705785">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, const Pair&lt;String&lt;char>, NumericType*>&amp;, const Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704244"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704245">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, const Pair&lt;String&lt;char>, NumericType*>&amp;, const Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.8704244"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704022" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8704003"/>
                <argumentType ref="type.8704005"/>
                <argumentType ref="type.8704004"/>
                <argumentType ref="type.8704016"/>
            </content>
        </type>
        <type derived="true" id="type.8704024">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.8704022"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705721">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704022"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704023">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.8704022"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704036" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, const Pair&lt;String&lt;char>, Script*>&amp;, const Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8704003"/>
                <argumentType ref="type.8704013"/>
                <argumentType ref="type.8704034"/>
                <argumentType ref="type.8704016"/>
            </content>
        </type>
        <type derived="true" id="type.8704038">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, const Pair&lt;String&lt;char>, Script*>&amp;, const Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.8704036"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705703">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, const Pair&lt;String&lt;char>, Script*>&amp;, const Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704036"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704037">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, const Pair&lt;String&lt;char>, Script*>&amp;, const Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.8704036"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703738" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8703718"/>
                <argumentType ref="type.8703720"/>
                <argumentType ref="type.8703719"/>
                <argumentType ref="type.8703732"/>
            </content>
        </type>
        <type derived="true" id="type.8703740">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>&amp;</name>
            <content>
                <baseType ref="type.8703738"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705631">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703738"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703739">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>*</name>
            <content>
                <baseType ref="type.8703738"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703752" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, const Pair&lt;System.Unicode.AgeId, Age*>&amp;, const Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8703718"/>
                <argumentType ref="type.8703729"/>
                <argumentType ref="type.8703750"/>
                <argumentType ref="type.8703732"/>
            </content>
        </type>
        <type derived="true" id="type.8703754">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, const Pair&lt;System.Unicode.AgeId, Age*>&amp;, const Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>&amp;</name>
            <content>
                <baseType ref="type.8703752"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705602">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, const Pair&lt;System.Unicode.AgeId, Age*>&amp;, const Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703752"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703753">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, const Pair&lt;System.Unicode.AgeId, Age*>&amp;, const Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>*</name>
            <content>
                <baseType ref="type.8703752"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704778" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8704758"/>
                <argumentType ref="type.8704760"/>
                <argumentType ref="type.8704759"/>
                <argumentType ref="type.8704772"/>
            </content>
        </type>
        <type derived="true" id="type.8704780">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>&amp;</name>
            <content>
                <baseType ref="type.8704778"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706041">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704778"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704779">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>*</name>
            <content>
                <baseType ref="type.8704778"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704792" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8704758"/>
                <argumentType ref="type.8704769"/>
                <argumentType ref="type.8704790"/>
                <argumentType ref="type.8704772"/>
            </content>
        </type>
        <type derived="true" id="type.8704794">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>&amp;</name>
            <content>
                <baseType ref="type.8704792"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706012">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704792"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704793">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>*</name>
            <content>
                <baseType ref="type.8704792"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704362" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8704342"/>
                <argumentType ref="type.8704344"/>
                <argumentType ref="type.8704343"/>
                <argumentType ref="type.8704356"/>
            </content>
        </type>
        <type derived="true" id="type.8704364">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>&amp;</name>
            <content>
                <baseType ref="type.8704362"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705877">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704362"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704363">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>*</name>
            <content>
                <baseType ref="type.8704362"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704376" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8704342"/>
                <argumentType ref="type.8704353"/>
                <argumentType ref="type.8704374"/>
                <argumentType ref="type.8704356"/>
            </content>
        </type>
        <type derived="true" id="type.8704378">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>&amp;</name>
            <content>
                <baseType ref="type.8704376"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705848">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704376"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704377">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>*</name>
            <content>
                <baseType ref="type.8704376"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704570" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8704550"/>
                <argumentType ref="type.8704552"/>
                <argumentType ref="type.8704551"/>
                <argumentType ref="type.8704564"/>
            </content>
        </type>
        <type derived="true" id="type.8704572">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>&amp;</name>
            <content>
                <baseType ref="type.8704570"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705959">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704570"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704571">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>*</name>
            <content>
                <baseType ref="type.8704570"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704584" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8704550"/>
                <argumentType ref="type.8704561"/>
                <argumentType ref="type.8704582"/>
                <argumentType ref="type.8704564"/>
            </content>
        </type>
        <type derived="true" id="type.8704586">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>&amp;</name>
            <content>
                <baseType ref="type.8704584"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705930">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704584"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704585">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>*</name>
            <content>
                <baseType ref="type.8704584"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703087" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8703067"/>
                <argumentType ref="type.8703069"/>
                <argumentType ref="type.8703068"/>
                <argumentType ref="type.8703081"/>
            </content>
        </type>
        <type derived="true" id="type.8703089">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>&amp;</name>
            <content>
                <baseType ref="type.8703087"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705385">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703087"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703088">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>*</name>
            <content>
                <baseType ref="type.8703087"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703101" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8703067"/>
                <argumentType ref="type.8703078"/>
                <argumentType ref="type.8703099"/>
                <argumentType ref="type.8703081"/>
            </content>
        </type>
        <type derived="true" id="type.8703103">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>&amp;</name>
            <content>
                <baseType ref="type.8703101"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705333">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703101"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703102">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>*</name>
            <content>
                <baseType ref="type.8703101"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703319" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8703299"/>
                <argumentType ref="type.8703301"/>
                <argumentType ref="type.8703300"/>
                <argumentType ref="type.8703313"/>
            </content>
        </type>
        <type derived="true" id="type.8703321">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>&amp;</name>
            <content>
                <baseType ref="type.8703319"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705467">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703319"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703320">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>*</name>
            <content>
                <baseType ref="type.8703319"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703333" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, const Pair&lt;System.Unicode.BlockId, Block*>&amp;, const Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8703299"/>
                <argumentType ref="type.8703310"/>
                <argumentType ref="type.8703331"/>
                <argumentType ref="type.8703313"/>
            </content>
        </type>
        <type derived="true" id="type.8703335">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, const Pair&lt;System.Unicode.BlockId, Block*>&amp;, const Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>&amp;</name>
            <content>
                <baseType ref="type.8703333"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705438">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, const Pair&lt;System.Unicode.BlockId, Block*>&amp;, const Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703333"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703334">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, const Pair&lt;System.Unicode.BlockId, Block*>&amp;, const Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>*</name>
            <content>
                <baseType ref="type.8703333"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703530" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8703510"/>
                <argumentType ref="type.8703512"/>
                <argumentType ref="type.8703511"/>
                <argumentType ref="type.8703524"/>
            </content>
        </type>
        <type derived="true" id="type.8703532">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>&amp;</name>
            <content>
                <baseType ref="type.8703530"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705549">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703530"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703531">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>*</name>
            <content>
                <baseType ref="type.8703530"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703544" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8703510"/>
                <argumentType ref="type.8703521"/>
                <argumentType ref="type.8703542"/>
                <argumentType ref="type.8703524"/>
            </content>
        </type>
        <type derived="true" id="type.8703546">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>&amp;</name>
            <content>
                <baseType ref="type.8703544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705520">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703544"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703545">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>*</name>
            <content>
                <baseType ref="type.8703544"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704154" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8704134"/>
                <argumentType ref="type.8704136"/>
                <argumentType ref="type.8704135"/>
                <argumentType ref="type.8704148"/>
            </content>
        </type>
        <type derived="true" id="type.8704156">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>&amp;</name>
            <content>
                <baseType ref="type.8704154"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705795">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704154"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704155">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>*</name>
            <content>
                <baseType ref="type.8704154"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704168" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8704134"/>
                <argumentType ref="type.8704145"/>
                <argumentType ref="type.8704166"/>
                <argumentType ref="type.8704148"/>
            </content>
        </type>
        <type derived="true" id="type.8704170">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>&amp;</name>
            <content>
                <baseType ref="type.8704168"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705766">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704168"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704169">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>*</name>
            <content>
                <baseType ref="type.8704168"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703946" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8703926"/>
                <argumentType ref="type.8703928"/>
                <argumentType ref="type.8703927"/>
                <argumentType ref="type.8703940"/>
            </content>
        </type>
        <type derived="true" id="type.8703948">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>&amp;</name>
            <content>
                <baseType ref="type.8703946"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705713">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703946"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703947">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>*</name>
            <content>
                <baseType ref="type.8703946"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703960" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, const Pair&lt;System.Unicode.ScriptId, Script*>&amp;, const Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8703926"/>
                <argumentType ref="type.8703937"/>
                <argumentType ref="type.8703958"/>
                <argumentType ref="type.8703940"/>
            </content>
        </type>
        <type derived="true" id="type.8703962">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, const Pair&lt;System.Unicode.ScriptId, Script*>&amp;, const Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>&amp;</name>
            <content>
                <baseType ref="type.8703960"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705684">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, const Pair&lt;System.Unicode.ScriptId, Script*>&amp;, const Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703960"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703961">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, const Pair&lt;System.Unicode.ScriptId, Script*>&amp;, const Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>*</name>
            <content>
                <baseType ref="type.8703960"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1" specialization="true">
            <name>HashtableIterator&lt;T, R, P, H></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="8699713"/>
                <argumentType ref="8699714"/>
                <argumentType ref="8699715"/>
                <argumentType ref="8699716"/>
            </content>
        </type>
        <type id="class_HashtableIterator_8B0A99E85ED61100C00E130B1BAE38C0327F97CA">
            <name>HashtableIterator&lt;T, R, P, H></name>
        </type>
        <type id="type.class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1" specialization="true">
            <name>HashtableIterator&lt;T, R, P, H></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="8699717"/>
                <argumentType ref="8699718"/>
                <argumentType ref="8699719"/>
                <argumentType ref="8699720"/>
            </content>
        </type>
        <type derived="true" id="type.8701282">
            <name>HashtableIterator&lt;T, R, P, H>&amp;</name>
            <content>
                <baseType ref="type.class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701266">
            <name>HashtableIterator&lt;T, R, P, H>&amp;</name>
            <content>
                <baseType ref="type.class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701265">
            <name>HashtableIterator&lt;T, R, P, H>*</name>
            <content>
                <baseType ref="type.class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701281">
            <name>HashtableIterator&lt;T, R, P, H>*</name>
            <content>
                <baseType ref="type.class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028" specialization="true">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="8699705"/>
                <argumentType ref="type.8701193"/>
                <argumentType ref="type.8701194"/>
                <argumentType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
            </content>
        </type>
        <type derived="true" id="type.8701197">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701123">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701122">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <baseType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701196">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <baseType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701122">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <baseType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A" specialization="true">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="8699705"/>
                <argumentType ref="type.8701184"/>
                <argumentType ref="type.8701207"/>
                <argumentType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
            </content>
        </type>
        <type derived="true" id="type.8701137">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701211">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701210">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <baseType ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701136">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <baseType ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701210">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <baseType ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_HashtableIterator_ValueType_ValueType_R_ValueType_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A8752F817C504EBDF51FB4440DE5237504D01981" specialization="true">
            <name>HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="8699723"/>
                <argumentType ref="type.8701302"/>
                <argumentType ref="type.8701303"/>
                <argumentType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
            </content>
        </type>
        <type derived="true" id="type.8701306">
            <name>HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>&amp;</name>
            <content>
                <baseType ref="type.class_HashtableIterator_ValueType_ValueType_R_ValueType_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A8752F817C504EBDF51FB4440DE5237504D01981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701305">
            <name>HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>*</name>
            <content>
                <baseType ref="type.class_HashtableIterator_ValueType_ValueType_R_ValueType_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A8752F817C504EBDF51FB4440DE5237504D01981"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_HashtableIterator_ValueType_ValueType_C_R_ValueType_C_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_1FA3480F54A3A001A9D02C46FBC4C609EBAD055C" specialization="true">
            <name>HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="8699723"/>
                <argumentType ref="type.8701316"/>
                <argumentType ref="type.8701317"/>
                <argumentType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
            </content>
        </type>
        <type derived="true" id="type.8701321">
            <name>HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>&amp;</name>
            <content>
                <baseType ref="type.class_HashtableIterator_ValueType_ValueType_C_R_ValueType_C_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_1FA3480F54A3A001A9D02C46FBC4C609EBAD055C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701320">
            <name>HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>*</name>
            <content>
                <baseType ref="type.class_HashtableIterator_ValueType_ValueType_C_R_ValueType_C_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_1FA3480F54A3A001A9D02C46FBC4C609EBAD055C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699728">
            <name>I</name>
        </type>
        <type id="8699370">
            <name>I1</name>
        </type>
        <type id="8699371">
            <name>I2</name>
        </type>
        <type id="class_IOBuffer_7AC61842AD3FCA40A4176E0D72E981B672D7E222">
            <name>IOBuffer</name>
        </type>
        <type derived="true" id="type.8699585">
            <name>IOBuffer&amp;</name>
            <content>
                <baseType ref="class_IOBuffer_7AC61842AD3FCA40A4176E0D72E981B672D7E222"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700374">
            <name>IOBuffer&amp;&amp;</name>
            <content>
                <baseType ref="class_IOBuffer_7AC61842AD3FCA40A4176E0D72E981B672D7E222"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699584">
            <name>IOBuffer*</name>
            <content>
                <baseType ref="class_IOBuffer_7AC61842AD3FCA40A4176E0D72E981B672D7E222"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="8699835"/>
            </content>
        </type>
        <type id="class_Identity_2C4440500A8C7338D2B636239089AEA0F71FF10C">
            <name>Identity&lt;T></name>
        </type>
        <type id="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="8699837"/>
            </content>
        </type>
        <type derived="true" id="type.8701951">
            <name>Identity&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702065">
            <name>Identity&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700669">
            <name>Identity&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702065">
            <name>Identity&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701186">
            <name>Identity&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701112">
            <name>Identity&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702008">
            <name>Identity&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702064">
            <name>Identity&lt;T>*</name>
            <content>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701111">
            <name>Identity&lt;T>*</name>
            <content>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701950">
            <name>Identity&lt;T>*</name>
            <content>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700668">
            <name>Identity&lt;T>*</name>
            <content>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701185">
            <name>Identity&lt;T>*</name>
            <content>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702007">
            <name>Identity&lt;T>*</name>
            <content>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_InputFileStream_D716B24DACCF956B86E85D3953020F7FF92665A3">
            <name>InputFileStream</name>
        </type>
        <type derived="true" id="type.8699591">
            <name>InputFileStream&amp;</name>
            <content>
                <baseType ref="class_InputFileStream_D716B24DACCF956B86E85D3953020F7FF92665A3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700414">
            <name>InputFileStream&amp;&amp;</name>
            <content>
                <baseType ref="class_InputFileStream_D716B24DACCF956B86E85D3953020F7FF92665A3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699590">
            <name>InputFileStream*</name>
            <content>
                <baseType ref="class_InputFileStream_D716B24DACCF956B86E85D3953020F7FF92665A3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_InputStream_B895ABA4BFD9E6393A7395627FF850EE42AE55EB">
            <name>InputStream</name>
        </type>
        <type derived="true" id="type.8699876">
            <name>InputStream&amp;</name>
            <content>
                <baseType ref="class_InputStream_B895ABA4BFD9E6393A7395627FF850EE42AE55EB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700413">
            <name>InputStream&amp;&amp;</name>
            <content>
                <baseType ref="class_InputStream_B895ABA4BFD9E6393A7395627FF850EE42AE55EB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699875">
            <name>InputStream*</name>
            <content>
                <baseType ref="class_InputStream_B895ABA4BFD9E6393A7395627FF850EE42AE55EB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_InputStringStream_5711AC4066734B8F1EDAE3C055CF6DFF3ED3EF8F">
            <name>InputStringStream</name>
        </type>
        <type derived="true" id="type.8699905">
            <name>InputStringStream&amp;</name>
            <content>
                <baseType ref="class_InputStringStream_5711AC4066734B8F1EDAE3C055CF6DFF3ED3EF8F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702998">
            <name>InputStringStream&amp;&amp;</name>
            <content>
                <baseType ref="class_InputStringStream_5711AC4066734B8F1EDAE3C055CF6DFF3ED3EF8F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699904">
            <name>InputStringStream*</name>
            <content>
                <baseType ref="class_InputStringStream_5711AC4066734B8F1EDAE3C055CF6DFF3ED3EF8F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA">
            <name>InvalidPathException</name>
        </type>
        <type derived="true" id="type.8699786">
            <name>InvalidPathException&amp;</name>
            <content>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701771">
            <name>InvalidPathException&amp;&amp;</name>
            <content>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699785">
            <name>InvalidPathException*</name>
            <content>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699697">
            <name>K</name>
        </type>
        <type id="8699490">
            <name>Key</name>
        </type>
        <type id="8699752">
            <name>KeyCompare</name>
        </type>
        <type id="8699831">
            <name>KeyOfValue</name>
        </type>
        <type id="8699829">
            <name>KeyType</name>
        </type>
        <type id="type.class_Less_T_U_22FB6450300AEAA1A9EC326C6610B50C250EE819" specialization="true">
            <name>Less&lt;T, U></name>
            <content>
                <primaryType ref="class_Less_T_U_22FB6450300AEAA1A9EC326C6610B50C250EE819"/>
                <argumentType ref="8699657"/>
                <argumentType ref="8699658"/>
            </content>
        </type>
        <type id="class_Less_C1DBF089B3B9126BEC617233950E507CD9646ADB">
            <name>Less&lt;T, U></name>
        </type>
        <type derived="true" id="type.8700759">
            <name>Less&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_Less_T_U_22FB6450300AEAA1A9EC326C6610B50C250EE819"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700758">
            <name>Less&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_Less_T_U_22FB6450300AEAA1A9EC326C6610B50C250EE819"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Less_1CC46A4961C8BBE6A787F702312FDE1964BD4E07">
            <name>Less&lt;T></name>
        </type>
        <type id="type.class_Less_T_F840BD6533DFD3706784C819E04FA4FE41C4F3D2" specialization="true">
            <name>Less&lt;T></name>
            <content>
                <primaryType ref="class_Less_T_F840BD6533DFD3706784C819E04FA4FE41C4F3D2"/>
                <argumentType ref="8699655"/>
            </content>
        </type>
        <type derived="true" id="type.8700745">
            <name>Less&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Less_T_F840BD6533DFD3706784C819E04FA4FE41C4F3D2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700744">
            <name>Less&lt;T>*</name>
            <content>
                <baseType ref="type.class_Less_T_F840BD6533DFD3706784C819E04FA4FE41C4F3D2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_LessOrEqualTo_F1B7758FBC8BBE024DDFF40C928619017605E60A">
            <name>LessOrEqualTo&lt;T, U></name>
        </type>
        <type id="type.class_LessOrEqualTo_T_U_6A014DB3656C60BE872B2EF7005C7C65535BC3FB" specialization="true">
            <name>LessOrEqualTo&lt;T, U></name>
            <content>
                <primaryType ref="class_LessOrEqualTo_T_U_6A014DB3656C60BE872B2EF7005C7C65535BC3FB"/>
                <argumentType ref="8699667"/>
                <argumentType ref="8699668"/>
            </content>
        </type>
        <type derived="true" id="type.8700819">
            <name>LessOrEqualTo&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_LessOrEqualTo_T_U_6A014DB3656C60BE872B2EF7005C7C65535BC3FB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700818">
            <name>LessOrEqualTo&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_LessOrEqualTo_T_U_6A014DB3656C60BE872B2EF7005C7C65535BC3FB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_LessOrEqualTo_FC749E64E6D9E6F0E82302013B39662C7BE3EB2C">
            <name>LessOrEqualTo&lt;T></name>
        </type>
        <type id="type.class_LessOrEqualTo_T_251E3B4B29A8A84484BDE851F06605C1B3E70332" specialization="true">
            <name>LessOrEqualTo&lt;T></name>
            <content>
                <primaryType ref="class_LessOrEqualTo_T_251E3B4B29A8A84484BDE851F06605C1B3E70332"/>
                <argumentType ref="8699665"/>
            </content>
        </type>
        <type derived="true" id="type.8700805">
            <name>LessOrEqualTo&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_LessOrEqualTo_T_251E3B4B29A8A84484BDE851F06605C1B3E70332"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700804">
            <name>LessOrEqualTo&lt;T>*</name>
            <content>
                <baseType ref="type.class_LessOrEqualTo_T_251E3B4B29A8A84484BDE851F06605C1B3E70332"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <argumentType ref="8699740"/>
            </content>
        </type>
        <type id="class_LinkedList_7FA566505FD76AED209FF2D7E243542CD40F26EB">
            <name>LinkedList&lt;T></name>
        </type>
        <type derived="true" id="type.8701468">
            <name>LinkedList&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701498">
            <name>LinkedList&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701438">
            <name>LinkedList&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701408">
            <name>LinkedList&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701438">
            <name>LinkedList&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701372">
            <name>LinkedList&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701435">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.153">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701495">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.152">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701525">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701497">
            <name>LinkedList&lt;T>*</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701437">
            <name>LinkedList&lt;T>*</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701371">
            <name>LinkedList&lt;T>*</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701437">
            <name>LinkedList&lt;T>*</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701467">
            <name>LinkedList&lt;T>*</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701407">
            <name>LinkedList&lt;T>*</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <argumentType ref="8699741"/>
            </content>
        </type>
        <type id="class_LinkedListNode_CD1F3BAB4C5C5B992D3C13FA3ACABF1E3DBFE77C">
            <name>LinkedListNode&lt;T></name>
        </type>
        <type id="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <argumentType ref="8699732"/>
            </content>
        </type>
        <type derived="true" id="type.8701422">
            <name>LinkedListNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701452">
            <name>LinkedListNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701422">
            <name>LinkedListNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701386">
            <name>LinkedListNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701482">
            <name>LinkedListNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701512">
            <name>LinkedListNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701358">
            <name>LinkedListNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701357">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701481">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701385">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701511">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701451">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701421">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701511">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LinkedListNodeIterator_T_R_P_1B6A4ECB2747EF21647DCDFB3EA5E3CFB23B08EF" specialization="true">
            <name>LinkedListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_LinkedListNodeIterator_T_R_P_1B6A4ECB2747EF21647DCDFB3EA5E3CFB23B08EF"/>
                <argumentType ref="8699732"/>
                <argumentType ref="8699733"/>
                <argumentType ref="8699734"/>
            </content>
        </type>
        <type id="class_LinkedListNodeIterator_B55F24083B7AEDAC23B67E65C314228FB2B79597">
            <name>LinkedListNodeIterator&lt;T, R, P></name>
        </type>
        <type id="type.class_LinkedListNodeIterator_T_R_P_1B6A4ECB2747EF21647DCDFB3EA5E3CFB23B08EF" specialization="true">
            <name>LinkedListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_LinkedListNodeIterator_T_R_P_1B6A4ECB2747EF21647DCDFB3EA5E3CFB23B08EF"/>
                <argumentType ref="8699732"/>
                <argumentType ref="8699733"/>
                <argumentType ref="8699734"/>
            </content>
        </type>
        <type derived="true" id="type.8701366">
            <name>LinkedListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_R_P_1B6A4ECB2747EF21647DCDFB3EA5E3CFB23B08EF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701402">
            <name>LinkedListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_R_P_1B6A4ECB2747EF21647DCDFB3EA5E3CFB23B08EF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701365">
            <name>LinkedListNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_R_P_1B6A4ECB2747EF21647DCDFB3EA5E3CFB23B08EF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701401">
            <name>LinkedListNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_R_P_1B6A4ECB2747EF21647DCDFB3EA5E3CFB23B08EF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46" specialization="true">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_LinkedListNodeIterator_T_R_P_1B6A4ECB2747EF21647DCDFB3EA5E3CFB23B08EF"/>
                <argumentType ref="8699735"/>
                <argumentType ref="type.8701412"/>
                <argumentType ref="type.8701413"/>
            </content>
        </type>
        <type derived="true" id="type.8701476">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701506">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701416">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701380">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701506">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701446">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701379">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701475">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701445">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701415">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701505">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9" specialization="true">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_LinkedListNodeIterator_T_R_P_1B6A4ECB2747EF21647DCDFB3EA5E3CFB23B08EF"/>
                <argumentType ref="8699740"/>
                <argumentType ref="type.8701486"/>
                <argumentType ref="type.8701487"/>
            </content>
        </type>
        <type derived="true" id="type.8701395">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701521">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701431">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701461">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701491">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701520">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701394">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701430">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701460">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701490">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703871" specialization="true">
            <name>List&lt;Age*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8699988"/>
            </content>
        </type>
        <type derived="true" id="type.8703873">
            <name>List&lt;Age*>&amp;</name>
            <content>
                <baseType ref="type.8703871"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703893">
            <name>List&lt;Age*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703871"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703872">
            <name>List&lt;Age*>*</name>
            <content>
                <baseType ref="type.8703871"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704911" specialization="true">
            <name>List&lt;AliasType*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8700059"/>
            </content>
        </type>
        <type derived="true" id="type.8704913">
            <name>List&lt;AliasType*>&amp;</name>
            <content>
                <baseType ref="type.8704911"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704933">
            <name>List&lt;AliasType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704911"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704912">
            <name>List&lt;AliasType*>*</name>
            <content>
                <baseType ref="type.8704911"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704495" specialization="true">
            <name>List&lt;BidiClass*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8700033"/>
            </content>
        </type>
        <type derived="true" id="type.8704497">
            <name>List&lt;BidiClass*>&amp;</name>
            <content>
                <baseType ref="type.8704495"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704517">
            <name>List&lt;BidiClass*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704495"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704496">
            <name>List&lt;BidiClass*>*</name>
            <content>
                <baseType ref="type.8704495"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704703" specialization="true">
            <name>List&lt;BidiPairedBracketType*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8700046"/>
            </content>
        </type>
        <type derived="true" id="type.8704705">
            <name>List&lt;BidiPairedBracketType*>&amp;</name>
            <content>
                <baseType ref="type.8704703"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704725">
            <name>List&lt;BidiPairedBracketType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704703"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704704">
            <name>List&lt;BidiPairedBracketType*>*</name>
            <content>
                <baseType ref="type.8704703"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703234" specialization="true">
            <name>List&lt;BinaryProperty*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8699958"/>
            </content>
        </type>
        <type derived="true" id="type.8703236">
            <name>List&lt;BinaryProperty*>&amp;</name>
            <content>
                <baseType ref="type.8703234"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703256">
            <name>List&lt;BinaryProperty*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703234"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703235">
            <name>List&lt;BinaryProperty*>*</name>
            <content>
                <baseType ref="type.8703234"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703452" specialization="true">
            <name>List&lt;Block*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8699968"/>
            </content>
        </type>
        <type derived="true" id="type.8703454">
            <name>List&lt;Block*>&amp;</name>
            <content>
                <baseType ref="type.8703452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703474">
            <name>List&lt;Block*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703452"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703453">
            <name>List&lt;Block*>*</name>
            <content>
                <baseType ref="type.8703452"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700992" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8700974"/>
            </content>
        </type>
        <type id="type.8701070" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8701053"/>
            </content>
        </type>
        <type derived="true" id="type.8701072">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <baseType ref="type.8701070"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700994">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <baseType ref="type.8700992"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701094">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701070"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.127">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700992"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701094">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701070"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701071">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.8701070"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700993">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.8700992"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703838" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8703821"/>
            </content>
        </type>
        <type derived="true" id="type.8703840">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*>&amp;</name>
            <content>
                <baseType ref="type.8703838"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703862">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703838"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703839">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*>*</name>
            <content>
                <baseType ref="type.8703838"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704878" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8704861"/>
            </content>
        </type>
        <type derived="true" id="type.8704880">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*>&amp;</name>
            <content>
                <baseType ref="type.8704878"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704902">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704878"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704879">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*>*</name>
            <content>
                <baseType ref="type.8704878"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704462" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8704445"/>
            </content>
        </type>
        <type derived="true" id="type.8704464">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*>&amp;</name>
            <content>
                <baseType ref="type.8704462"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704486">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704462"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704463">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*>*</name>
            <content>
                <baseType ref="type.8704462"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704670" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8704653"/>
            </content>
        </type>
        <type derived="true" id="type.8704672">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*>&amp;</name>
            <content>
                <baseType ref="type.8704670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704694">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704670"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704671">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*>*</name>
            <content>
                <baseType ref="type.8704670"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703208" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8703191"/>
            </content>
        </type>
        <type derived="true" id="type.8703210">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*>&amp;</name>
            <content>
                <baseType ref="type.8703208"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703232">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703208"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703209">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*>*</name>
            <content>
                <baseType ref="type.8703208"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703419" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8703402"/>
            </content>
        </type>
        <type derived="true" id="type.8703421">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*>&amp;</name>
            <content>
                <baseType ref="type.8703419"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703443">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703419"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703420">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*>*</name>
            <content>
                <baseType ref="type.8703419"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703630" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8703613"/>
            </content>
        </type>
        <type derived="true" id="type.8703632">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*>&amp;</name>
            <content>
                <baseType ref="type.8703630"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703654">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703630"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703631">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*>*</name>
            <content>
                <baseType ref="type.8703630"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704254" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8704237"/>
            </content>
        </type>
        <type derived="true" id="type.8704256">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*>&amp;</name>
            <content>
                <baseType ref="type.8704254"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704278">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704254"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704255">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*>*</name>
            <content>
                <baseType ref="type.8704254"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704046" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8704029"/>
            </content>
        </type>
        <type derived="true" id="type.8704048">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*>&amp;</name>
            <content>
                <baseType ref="type.8704046"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704070">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704046"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704047">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*>*</name>
            <content>
                <baseType ref="type.8704046"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703762" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8703745"/>
            </content>
        </type>
        <type derived="true" id="type.8703764">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*>&amp;</name>
            <content>
                <baseType ref="type.8703762"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703786">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703762"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703763">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*>*</name>
            <content>
                <baseType ref="type.8703762"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704802" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8704785"/>
            </content>
        </type>
        <type derived="true" id="type.8704804">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*>&amp;</name>
            <content>
                <baseType ref="type.8704802"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704826">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704802"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704803">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*>*</name>
            <content>
                <baseType ref="type.8704802"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704386" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8704369"/>
            </content>
        </type>
        <type derived="true" id="type.8704388">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*>&amp;</name>
            <content>
                <baseType ref="type.8704386"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704410">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704386"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704387">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*>*</name>
            <content>
                <baseType ref="type.8704386"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704594" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8704577"/>
            </content>
        </type>
        <type derived="true" id="type.8704596">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*>&amp;</name>
            <content>
                <baseType ref="type.8704594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704618">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704594"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704595">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*>*</name>
            <content>
                <baseType ref="type.8704594"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703111" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8703094"/>
            </content>
        </type>
        <type derived="true" id="type.8703113">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*>&amp;</name>
            <content>
                <baseType ref="type.8703111"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703135">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703111"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703112">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*>*</name>
            <content>
                <baseType ref="type.8703111"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703343" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8703326"/>
            </content>
        </type>
        <type derived="true" id="type.8703345">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*>&amp;</name>
            <content>
                <baseType ref="type.8703343"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703367">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703343"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703344">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*>*</name>
            <content>
                <baseType ref="type.8703343"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703554" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8703537"/>
            </content>
        </type>
        <type derived="true" id="type.8703556">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*>&amp;</name>
            <content>
                <baseType ref="type.8703554"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703578">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703554"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703555">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*>*</name>
            <content>
                <baseType ref="type.8703554"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704178" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8704161"/>
            </content>
        </type>
        <type derived="true" id="type.8704180">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*>&amp;</name>
            <content>
                <baseType ref="type.8704178"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704202">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704178"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704179">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*>*</name>
            <content>
                <baseType ref="type.8704178"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703970" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8703953"/>
            </content>
        </type>
        <type derived="true" id="type.8703972">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*>&amp;</name>
            <content>
                <baseType ref="type.8703970"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703994">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703970"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703971">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*>*</name>
            <content>
                <baseType ref="type.8703970"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701219" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8701202"/>
            </content>
        </type>
        <type id="type.8701145" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8701128"/>
            </content>
        </type>
        <type id="type.8701219" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8701202"/>
            </content>
        </type>
        <type derived="true" id="type.8701221">
            <name>List&lt;Bucket&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.8701219"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701147">
            <name>List&lt;Bucket&lt;T>*>&amp;</name>
            <content>
                <baseType ref="type.8701145"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.135">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701145"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701243">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701219"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701146">
            <name>List&lt;Bucket&lt;T>*>*</name>
            <content>
                <baseType ref="type.8701145"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701220">
            <name>List&lt;Bucket&lt;T>*>*</name>
            <content>
                <baseType ref="type.8701219"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701146">
            <name>List&lt;Bucket&lt;T>*>*</name>
            <content>
                <baseType ref="type.8701145"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701330" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8701311"/>
            </content>
        </type>
        <type derived="true" id="type.8701332">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;</name>
            <content>
                <baseType ref="type.8701330"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.148">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701330"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701331">
            <name>List&lt;Bucket&lt;ValueType>*>*</name>
            <content>
                <baseType ref="type.8701330"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703663" specialization="true">
            <name>List&lt;GeneralCategory*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8699978"/>
            </content>
        </type>
        <type derived="true" id="type.8703665">
            <name>List&lt;GeneralCategory*>&amp;</name>
            <content>
                <baseType ref="type.8703663"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703685">
            <name>List&lt;GeneralCategory*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703663"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703664">
            <name>List&lt;GeneralCategory*>*</name>
            <content>
                <baseType ref="type.8703663"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704280" specialization="true">
            <name>List&lt;NumericType*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8700020"/>
            </content>
        </type>
        <type derived="true" id="type.8704282">
            <name>List&lt;NumericType*>&amp;</name>
            <content>
                <baseType ref="type.8704280"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704302">
            <name>List&lt;NumericType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704280"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704281">
            <name>List&lt;NumericType*>*</name>
            <content>
                <baseType ref="type.8704280"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704079" specialization="true">
            <name>List&lt;Script*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8700001"/>
            </content>
        </type>
        <type derived="true" id="type.8704081">
            <name>List&lt;Script*>&amp;</name>
            <content>
                <baseType ref="type.8704079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704101">
            <name>List&lt;Script*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704079"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704080">
            <name>List&lt;Script*>*</name>
            <content>
                <baseType ref="type.8704079"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8702930" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type id="type.8702977" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type id="type.8702695" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type id="type.8702742" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type id="type.8702789" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type id="type.8702836" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type id="type.8702883" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.8702744">
            <name>List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <baseType ref="type.8702742"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702838">
            <name>List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <baseType ref="type.8702836"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702932">
            <name>List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <baseType ref="type.8702930"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702979">
            <name>List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <baseType ref="type.8702977"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702885">
            <name>List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <baseType ref="type.8702883"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702791">
            <name>List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <baseType ref="type.8702789"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702697">
            <name>List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <baseType ref="type.8702695"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702979">
            <name>List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <baseType ref="type.8702977"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702997">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702977"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702903">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702883"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.280">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702695"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702856">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702836"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702809">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702789"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702950">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702930"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702997">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702977"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702762">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702742"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702884">
            <name>List&lt;String&lt;CharT>>*</name>
            <content>
                <baseType ref="type.8702883"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702931">
            <name>List&lt;String&lt;CharT>>*</name>
            <content>
                <baseType ref="type.8702930"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702837">
            <name>List&lt;String&lt;CharT>>*</name>
            <content>
                <baseType ref="type.8702836"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702931">
            <name>List&lt;String&lt;CharT>>*</name>
            <content>
                <baseType ref="type.8702930"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702790">
            <name>List&lt;String&lt;CharT>>*</name>
            <content>
                <baseType ref="type.8702789"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702743">
            <name>List&lt;String&lt;CharT>>*</name>
            <content>
                <baseType ref="type.8702742"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702978">
            <name>List&lt;String&lt;CharT>>*</name>
            <content>
                <baseType ref="type.8702977"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702696">
            <name>List&lt;String&lt;CharT>>*</name>
            <content>
                <baseType ref="type.8702695"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700228" specialization="true">
            <name>List&lt;String&lt;char>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8700206"/>
            </content>
        </type>
        <type derived="true" id="type.8700230">
            <name>List&lt;String&lt;char>>&amp;</name>
            <content>
                <baseType ref="type.8700228"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700248">
            <name>List&lt;String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700228"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700229">
            <name>List&lt;String&lt;char>>*</name>
            <content>
                <baseType ref="type.8700228"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700318" specialization="true">
            <name>List&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8700294"/>
            </content>
        </type>
        <type derived="true" id="type.8700320">
            <name>List&lt;String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.8700318"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700338">
            <name>List&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700318"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700319">
            <name>List&lt;String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.8700318"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700273" specialization="true">
            <name>List&lt;String&lt;wchar>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8700249"/>
            </content>
        </type>
        <type derived="true" id="type.8700275">
            <name>List&lt;String&lt;wchar>>&amp;</name>
            <content>
                <baseType ref="type.8700273"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700293">
            <name>List&lt;String&lt;wchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700273"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700274">
            <name>List&lt;String&lt;wchar>>*</name>
            <content>
                <baseType ref="type.8700273"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704935" specialization="true">
            <name>List&lt;System.Unicode.Alias></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
            </content>
        </type>
        <type derived="true" id="type.8704937">
            <name>List&lt;System.Unicode.Alias>&amp;</name>
            <content>
                <baseType ref="type.8704935"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704955">
            <name>List&lt;System.Unicode.Alias>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704935"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704936">
            <name>List&lt;System.Unicode.Alias>*</name>
            <content>
                <baseType ref="type.8704935"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="8699744"/>
            </content>
        </type>
        <type id="class_List_AFA59AB26CB7B8E2C7AA8BF7DC4C8ADC91915BE3">
            <name>List&lt;T></name>
        </type>
        <type derived="true" id="type.8701555">
            <name>List&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701528">
            <name>List&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702646">
            <name>List&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701782">
            <name>List&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701582">
            <name>List&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.274">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701578">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.156">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.192">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701605">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701781">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701581">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701527">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701554">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702645">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704964" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Unicode.CharacterInfo>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8704957"/>
            </content>
        </type>
        <type derived="true" id="type.8704966">
            <name>List&lt;UniquePtr&lt;System.Unicode.CharacterInfo>>&amp;</name>
            <content>
                <baseType ref="type.8704964"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704984">
            <name>List&lt;UniquePtr&lt;System.Unicode.CharacterInfo>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704964"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704965">
            <name>List&lt;UniquePtr&lt;System.Unicode.CharacterInfo>>*</name>
            <content>
                <baseType ref="type.8704964"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8705060" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8705053"/>
            </content>
        </type>
        <type derived="true" id="type.8705062">
            <name>List&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>>&amp;</name>
            <content>
                <baseType ref="type.8705060"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705080">
            <name>List&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705060"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705061">
            <name>List&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>>*</name>
            <content>
                <baseType ref="type.8705060"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704992" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8704985"/>
            </content>
        </type>
        <type derived="true" id="type.8704994">
            <name>List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>>&amp;</name>
            <content>
                <baseType ref="type.8704992"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705012">
            <name>List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704992"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704993">
            <name>List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>>*</name>
            <content>
                <baseType ref="type.8704992"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8705095" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8705088"/>
            </content>
        </type>
        <type derived="true" id="type.8705097">
            <name>List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>>&amp;</name>
            <content>
                <baseType ref="type.8705095"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705115">
            <name>List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705095"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705096">
            <name>List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>>*</name>
            <content>
                <baseType ref="type.8705095"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701682" specialization="true">
            <name>List&lt;byte></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8699067"/>
            </content>
        </type>
        <type derived="true" id="type.8701684">
            <name>List&lt;byte>&amp;</name>
            <content>
                <baseType ref="type.8701682"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701703">
            <name>List&lt;byte>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701682"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701683">
            <name>List&lt;byte>*</name>
            <content>
                <baseType ref="type.8701682"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8705013" specialization="true">
            <name>List&lt;uint></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8699071"/>
            </content>
        </type>
        <type derived="true" id="type.8705015">
            <name>List&lt;uint>&amp;</name>
            <content>
                <baseType ref="type.8705013"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705036">
            <name>List&lt;uint>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705013"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705014">
            <name>List&lt;uint>*</name>
            <content>
                <baseType ref="type.8705013"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700344" specialization="true">
            <name>List&lt;ulong></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8699073"/>
            </content>
        </type>
        <type derived="true" id="type.8700346">
            <name>List&lt;ulong>&amp;</name>
            <content>
                <baseType ref="type.8700344"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700367">
            <name>List&lt;ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700344"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700345">
            <name>List&lt;ulong>*</name>
            <content>
                <baseType ref="type.8700344"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1" specialization="true">
            <name>LockGuard&lt;Mtx></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="8699768"/>
            </content>
        </type>
        <type id="class_LockGuard_69F6519BB4A7CCF0F0046850E499739D80413407">
            <name>LockGuard&lt;Mtx></name>
        </type>
        <type id="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1" specialization="true">
            <name>LockGuard&lt;Mtx></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="8699768"/>
            </content>
        </type>
        <type derived="true" id="type.8701712">
            <name>LockGuard&lt;Mtx>&amp;</name>
            <content>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.180">
            <name>LockGuard&lt;Mtx>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701711">
            <name>LockGuard&lt;Mtx>*</name>
            <content>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8705037" specialization="true">
            <name>LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.8705039">
            <name>LockGuard&lt;System.Threading.Mutex>&amp;</name>
            <content>
                <baseType ref="type.8705037"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.367">
            <name>LockGuard&lt;System.Threading.Mutex>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705037"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705038">
            <name>LockGuard&lt;System.Threading.Mutex>*</name>
            <content>
                <baseType ref="type.8705037"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LogicalAnd_T_E35A5C58E5FFDEFC94BC4F4A396B315039492654" specialization="true">
            <name>LogicalAnd&lt;T></name>
            <content>
                <primaryType ref="class_LogicalAnd_T_E35A5C58E5FFDEFC94BC4F4A396B315039492654"/>
                <argumentType ref="8699675"/>
            </content>
        </type>
        <type id="class_LogicalAnd_8D02CE2E218425F4AF64E6455A4B5868DC361E9D">
            <name>LogicalAnd&lt;T></name>
        </type>
        <type derived="true" id="type.8700861">
            <name>LogicalAnd&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_LogicalAnd_T_E35A5C58E5FFDEFC94BC4F4A396B315039492654"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700860">
            <name>LogicalAnd&lt;T>*</name>
            <content>
                <baseType ref="type.class_LogicalAnd_T_E35A5C58E5FFDEFC94BC4F4A396B315039492654"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_LogicalNot_65FAD42E40FF5E4B0EFA2A642BAC1CB07D89B76C">
            <name>LogicalNot&lt;T></name>
        </type>
        <type id="type.class_LogicalNot_T_8969C1691917DD5CA5D11CA01EF0BFCBDC2D486E" specialization="true">
            <name>LogicalNot&lt;T></name>
            <content>
                <primaryType ref="class_LogicalNot_T_8969C1691917DD5CA5D11CA01EF0BFCBDC2D486E"/>
                <argumentType ref="8699679"/>
            </content>
        </type>
        <type derived="true" id="type.8700879">
            <name>LogicalNot&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_LogicalNot_T_8969C1691917DD5CA5D11CA01EF0BFCBDC2D486E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700878">
            <name>LogicalNot&lt;T>*</name>
            <content>
                <baseType ref="type.class_LogicalNot_T_8969C1691917DD5CA5D11CA01EF0BFCBDC2D486E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LogicalOr_T_7F2F87F001DF8F564ABE5F63CCA120661CE54294" specialization="true">
            <name>LogicalOr&lt;T></name>
            <content>
                <primaryType ref="class_LogicalOr_T_7F2F87F001DF8F564ABE5F63CCA120661CE54294"/>
                <argumentType ref="8699677"/>
            </content>
        </type>
        <type id="class_LogicalOr_2443D2AB0BD6F69CAAED4DFD00AE892FC7BACA6B">
            <name>LogicalOr&lt;T></name>
        </type>
        <type id="type.class_LogicalOr_T_7F2F87F001DF8F564ABE5F63CCA120661CE54294" specialization="true">
            <name>LogicalOr&lt;T></name>
            <content>
                <primaryType ref="class_LogicalOr_T_7F2F87F001DF8F564ABE5F63CCA120661CE54294"/>
                <argumentType ref="8699677"/>
            </content>
        </type>
        <type derived="true" id="type.8700867">
            <name>LogicalOr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_LogicalOr_T_7F2F87F001DF8F564ABE5F63CCA120661CE54294"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700866">
            <name>LogicalOr&lt;T>*</name>
            <content>
                <baseType ref="type.class_LogicalOr_T_7F2F87F001DF8F564ABE5F63CCA120661CE54294"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D" specialization="true">
            <name>Map&lt;Key, Value, KeyCompare></name>
            <content>
                <primaryType ref="class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <argumentType ref="8699750"/>
                <argumentType ref="8699751"/>
                <argumentType ref="8699752"/>
            </content>
        </type>
        <type id="class_Map_46AF47AF97A94F918065E9005DF12C3782EF1B24">
            <name>Map&lt;Key, Value, KeyCompare></name>
        </type>
        <type derived="true" id="type.8701615">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701614">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_MemoryByteStream_4165F89E3A15BB2E93A82F4868A08724955E8045">
            <name>MemoryByteStream</name>
        </type>
        <type derived="true" id="type.8699755">
            <name>MemoryByteStream&amp;</name>
            <content>
                <baseType ref="class_MemoryByteStream_4165F89E3A15BB2E93A82F4868A08724955E8045"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701679">
            <name>MemoryByteStream&amp;&amp;</name>
            <content>
                <baseType ref="class_MemoryByteStream_4165F89E3A15BB2E93A82F4868A08724955E8045"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699754">
            <name>MemoryByteStream*</name>
            <content>
                <baseType ref="class_MemoryByteStream_4165F89E3A15BB2E93A82F4868A08724955E8045"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705282">
            <name>MemoryByteStream*&amp;</name>
            <content>
                <baseType ref="class_MemoryByteStream_4165F89E3A15BB2E93A82F4868A08724955E8045"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705281">
            <name>MemoryByteStream**</name>
            <content>
                <baseType ref="class_MemoryByteStream_4165F89E3A15BB2E93A82F4868A08724955E8045"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Minus_T_42FA343108F2183A5C120B0B9F768BE1A4618D2E" specialization="true">
            <name>Minus&lt;T></name>
            <content>
                <primaryType ref="class_Minus_T_42FA343108F2183A5C120B0B9F768BE1A4618D2E"/>
                <argumentType ref="8699627"/>
            </content>
        </type>
        <type id="class_Minus_9A05303BD8E19F2756DD856EF800E02306C8BC63">
            <name>Minus&lt;T></name>
        </type>
        <type derived="true" id="type.8700598">
            <name>Minus&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Minus_T_42FA343108F2183A5C120B0B9F768BE1A4618D2E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700597">
            <name>Minus&lt;T>*</name>
            <content>
                <baseType ref="type.class_Minus_T_42FA343108F2183A5C120B0B9F768BE1A4618D2E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_Month_7829D8A209CD9954EC457E7406A5269E99C4AA48">
            <name>Month</name>
        </type>
        <type derived="true" id="type.8703027">
            <name>Month&amp;</name>
            <content>
                <baseType ref="enumerated_type_Month_7829D8A209CD9954EC457E7406A5269E99C4AA48"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703028">
            <name>Month&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_Month_7829D8A209CD9954EC457E7406A5269E99C4AA48"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703026">
            <name>Month*</name>
            <content>
                <baseType ref="enumerated_type_Month_7829D8A209CD9954EC457E7406A5269E99C4AA48"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699768">
            <name>Mtx</name>
        </type>
        <type derived="true" id="type.177">
            <name>Mtx&amp;</name>
            <content>
                <baseType ref="8699768"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Multiplies_T_B10569FE25E0D6EA8440D826A60699DA1E9E1D98" specialization="true">
            <name>Multiplies&lt;T></name>
            <content>
                <primaryType ref="class_Multiplies_T_B10569FE25E0D6EA8440D826A60699DA1E9E1D98"/>
                <argumentType ref="8699630"/>
            </content>
        </type>
        <type id="class_Multiplies_C6F607C3FA34ED6BB89F639986E27231F2993876">
            <name>Multiplies&lt;T></name>
        </type>
        <type derived="true" id="type.8700618">
            <name>Multiplies&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Multiplies_T_B10569FE25E0D6EA8440D826A60699DA1E9E1D98"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700608">
            <name>Multiplies&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Multiplies_T_B10569FE25E0D6EA8440D826A60699DA1E9E1D98"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700607">
            <name>Multiplies&lt;T>*</name>
            <content>
                <baseType ref="type.class_Multiplies_T_B10569FE25E0D6EA8440D826A60699DA1E9E1D98"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700617">
            <name>Multiplies&lt;T>*</name>
            <content>
                <baseType ref="type.class_Multiplies_T_B10569FE25E0D6EA8440D826A60699DA1E9E1D98"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650">
            <name>Mutex</name>
        </type>
        <type derived="true" id="type.8699761">
            <name>Mutex&amp;</name>
            <content>
                <baseType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701706">
            <name>Mutex&amp;&amp;</name>
            <content>
                <baseType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699760">
            <name>Mutex*</name>
            <content>
                <baseType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Negate_8ACFA5FF28BEBCE991A3EF593CACD9CF879EEACF">
            <name>Negate&lt;T></name>
        </type>
        <type id="type.class_Negate_T_2B93AADB99FFFDB5799415B556E03B1B6C1FA625" specialization="true">
            <name>Negate&lt;T></name>
            <content>
                <primaryType ref="class_Negate_T_2B93AADB99FFFDB5799415B556E03B1B6C1FA625"/>
                <argumentType ref="8699625"/>
            </content>
        </type>
        <type derived="true" id="type.8700588">
            <name>Negate&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Negate_T_2B93AADB99FFFDB5799415B556E03B1B6C1FA625"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700587">
            <name>Negate&lt;T>*</name>
            <content>
                <baseType ref="type.class_Negate_T_2B93AADB99FFFDB5799415B556E03B1B6C1FA625"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_NotEqualTo_14B30EBDCD14039DAABAB2720FDCA95D104EE865">
            <name>NotEqualTo&lt;T, U></name>
        </type>
        <type id="type.class_NotEqualTo_T_U_5BC868D78BD4259D374B69CB22FA044DD89F0C99" specialization="true">
            <name>NotEqualTo&lt;T, U></name>
            <content>
                <primaryType ref="class_NotEqualTo_T_U_5BC868D78BD4259D374B69CB22FA044DD89F0C99"/>
                <argumentType ref="8699652"/>
                <argumentType ref="8699653"/>
            </content>
        </type>
        <type derived="true" id="type.8700729">
            <name>NotEqualTo&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_NotEqualTo_T_U_5BC868D78BD4259D374B69CB22FA044DD89F0C99"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700728">
            <name>NotEqualTo&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_NotEqualTo_T_U_5BC868D78BD4259D374B69CB22FA044DD89F0C99"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_NotEqualTo_E6B4840BD9777AE1AC94F032A86714E65DF9A015">
            <name>NotEqualTo&lt;T></name>
        </type>
        <type id="type.class_NotEqualTo_T_3EE4DF15E49DBA0F6BBF345CD91378E1CCF64AF5" specialization="true">
            <name>NotEqualTo&lt;T></name>
            <content>
                <primaryType ref="class_NotEqualTo_T_3EE4DF15E49DBA0F6BBF345CD91378E1CCF64AF5"/>
                <argumentType ref="8699650"/>
            </content>
        </type>
        <type derived="true" id="type.8700715">
            <name>NotEqualTo&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_NotEqualTo_T_3EE4DF15E49DBA0F6BBF345CD91378E1CCF64AF5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700714">
            <name>NotEqualTo&lt;T>*</name>
            <content>
                <baseType ref="type.class_NotEqualTo_T_3EE4DF15E49DBA0F6BBF345CD91378E1CCF64AF5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_NumericType_67577CECB2CE245BF3E658544DD408CD213F0007">
            <name>NumericType</name>
        </type>
        <type derived="true" id="type.8700021">
            <name>NumericType&amp;</name>
            <content>
                <baseType ref="class_NumericType_67577CECB2CE245BF3E658544DD408CD213F0007"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700020">
            <name>NumericType*</name>
            <content>
                <baseType ref="class_NumericType_67577CECB2CE245BF3E658544DD408CD213F0007"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704204">
            <name>NumericType*&amp;</name>
            <content>
                <baseType ref="class_NumericType_67577CECB2CE245BF3E658544DD408CD213F0007"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704303">
            <name>NumericType*&amp;&amp;</name>
            <content>
                <baseType ref="class_NumericType_67577CECB2CE245BF3E658544DD408CD213F0007"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704294">
            <name>NumericType**</name>
            <content>
                <baseType ref="class_NumericType_67577CECB2CE245BF3E658544DD408CD213F0007"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705735">
            <name>NumericType**&amp;</name>
            <content>
                <baseType ref="class_NumericType_67577CECB2CE245BF3E658544DD408CD213F0007"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705788">
            <name>NumericType**&amp;&amp;</name>
            <content>
                <baseType ref="class_NumericType_67577CECB2CE245BF3E658544DD408CD213F0007"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705787">
            <name>NumericType***</name>
            <content>
                <baseType ref="class_NumericType_67577CECB2CE245BF3E658544DD408CD213F0007"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5">
            <name>NumericTypeId</name>
        </type>
        <type derived="true" id="type.8704104">
            <name>NumericTypeId&amp;</name>
            <content>
                <baseType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704105">
            <name>NumericTypeId&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704103">
            <name>NumericTypeId*</name>
            <content>
                <baseType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_NumericTypeTable_D5D406F33CCAC2C03087278A817836F0F3A3D92A">
            <name>NumericTypeTable</name>
        </type>
        <type derived="true" id="type.8700030">
            <name>NumericTypeTable&amp;</name>
            <content>
                <baseType ref="class_NumericTypeTable_D5D406F33CCAC2C03087278A817836F0F3A3D92A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700029">
            <name>NumericTypeTable*</name>
            <content>
                <baseType ref="class_NumericTypeTable_D5D406F33CCAC2C03087278A817836F0F3A3D92A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705730">
            <name>NumericTypeTable*&amp;</name>
            <content>
                <baseType ref="class_NumericTypeTable_D5D406F33CCAC2C03087278A817836F0F3A3D92A"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705729">
            <name>NumericTypeTable**</name>
            <content>
                <baseType ref="class_NumericTypeTable_D5D406F33CCAC2C03087278A817836F0F3A3D92A"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699323">
            <name>O</name>
        </type>
        <type id="8699315">
            <name>Op</name>
        </type>
        <type id="enumerated_type_OpenMode_063ACAC8B31C29229F5F485205B9D6C7EB9D6810">
            <name>OpenMode</name>
        </type>
        <type derived="true" id="type.8700408">
            <name>OpenMode&amp;</name>
            <content>
                <baseType ref="enumerated_type_OpenMode_063ACAC8B31C29229F5F485205B9D6C7EB9D6810"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700409">
            <name>OpenMode&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_OpenMode_063ACAC8B31C29229F5F485205B9D6C7EB9D6810"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700407">
            <name>OpenMode*</name>
            <content>
                <baseType ref="enumerated_type_OpenMode_063ACAC8B31C29229F5F485205B9D6C7EB9D6810"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_Origin_A770811A120AA0D85B3AD4E90D4A9AF5ADC90D70">
            <name>Origin</name>
        </type>
        <type derived="true" id="type.8700376">
            <name>Origin&amp;</name>
            <content>
                <baseType ref="enumerated_type_Origin_A770811A120AA0D85B3AD4E90D4A9AF5ADC90D70"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700377">
            <name>Origin&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_Origin_A770811A120AA0D85B3AD4E90D4A9AF5ADC90D70"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700375">
            <name>Origin*</name>
            <content>
                <baseType ref="enumerated_type_Origin_A770811A120AA0D85B3AD4E90D4A9AF5ADC90D70"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_OutputFileStream_329086250911017BCF31063FCD14A24814C228C1">
            <name>OutputFileStream</name>
        </type>
        <type derived="true" id="type.8699597">
            <name>OutputFileStream&amp;</name>
            <content>
                <baseType ref="class_OutputFileStream_329086250911017BCF31063FCD14A24814C228C1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700418">
            <name>OutputFileStream&amp;&amp;</name>
            <content>
                <baseType ref="class_OutputFileStream_329086250911017BCF31063FCD14A24814C228C1"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699596">
            <name>OutputFileStream*</name>
            <content>
                <baseType ref="class_OutputFileStream_329086250911017BCF31063FCD14A24814C228C1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452">
            <name>OutputStream</name>
        </type>
        <type derived="true" id="type.8699882">
            <name>OutputStream&amp;</name>
            <content>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700417">
            <name>OutputStream&amp;&amp;</name>
            <content>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699881">
            <name>OutputStream*</name>
            <content>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_OutputStringStream_8F218027BFFB6474E691BDF3B8611AF5171C9174">
            <name>OutputStringStream</name>
        </type>
        <type derived="true" id="type.8699911">
            <name>OutputStringStream&amp;</name>
            <content>
                <baseType ref="class_OutputStringStream_8F218027BFFB6474E691BDF3B8611AF5171C9174"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702999">
            <name>OutputStringStream&amp;&amp;</name>
            <content>
                <baseType ref="class_OutputStringStream_8F218027BFFB6474E691BDF3B8611AF5171C9174"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699910">
            <name>OutputStringStream*</name>
            <content>
                <baseType ref="class_OutputStringStream_8F218027BFFB6474E691BDF3B8611AF5171C9174"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699811">
            <name>P</name>
        </type>
        <type id="type.8700988" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8700967"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type id="type.8701067" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8701046"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8701069">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8701067"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700990">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8700988"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700989">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.8700988"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701068">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.8701067"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703835" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8703814"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8703837">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8703835"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705641">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703835"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703836">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>*</name>
            <content>
                <baseType ref="type.8703835"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704875" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8704854"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8704877">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8704875"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706051">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704875"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704876">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>*</name>
            <content>
                <baseType ref="type.8704875"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704459" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8704438"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8704461">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8704459"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705887">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704459"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704460">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>*</name>
            <content>
                <baseType ref="type.8704459"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704667" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8704646"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8704669">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8704667"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705969">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704667"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704668">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>*</name>
            <content>
                <baseType ref="type.8704667"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703205" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8703184"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8703207">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8703205"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705395">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703205"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703206">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>*</name>
            <content>
                <baseType ref="type.8703205"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703416" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8703395"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8703418">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8703416"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705477">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703416"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703417">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>*</name>
            <content>
                <baseType ref="type.8703416"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703627" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8703606"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8703629">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8703627"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705559">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703627"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703628">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>*</name>
            <content>
                <baseType ref="type.8703627"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704251" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8704230"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8704253">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8704251"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705805">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704251"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704252">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>*</name>
            <content>
                <baseType ref="type.8704251"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704043" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8704022"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8704045">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8704043"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705723">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704043"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704044">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>*</name>
            <content>
                <baseType ref="type.8704043"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703759" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8703738"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8703761">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8703759"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705633">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703759"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703760">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>, bool>*</name>
            <content>
                <baseType ref="type.8703759"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704799" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8704778"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8704801">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8704799"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706043">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704799"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704800">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>, bool>*</name>
            <content>
                <baseType ref="type.8704799"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704383" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8704362"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8704385">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8704383"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705879">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704383"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704384">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>, bool>*</name>
            <content>
                <baseType ref="type.8704383"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704591" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8704570"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8704593">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8704591"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705961">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704591"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704592">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>, bool>*</name>
            <content>
                <baseType ref="type.8704591"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703108" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8703087"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8703110">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8703108"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705387">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703108"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703109">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>, bool>*</name>
            <content>
                <baseType ref="type.8703108"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703340" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8703319"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8703342">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8703340"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705469">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703340"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703341">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>, bool>*</name>
            <content>
                <baseType ref="type.8703340"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703551" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8703530"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8703553">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8703551"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705551">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703551"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703552">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>, bool>*</name>
            <content>
                <baseType ref="type.8703551"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704175" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8704154"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8704177">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8704175"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705797">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704175"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704176">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>, bool>*</name>
            <content>
                <baseType ref="type.8704175"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703967" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8703946"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8703969">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8703967"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705715">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703967"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703968">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>, bool>*</name>
            <content>
                <baseType ref="type.8703967"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701216" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type id="type.8701142" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type id="type.8701216" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8701144">
            <name>Pair&lt;HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8701142"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701218">
            <name>Pair&lt;HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8701216"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701217">
            <name>Pair&lt;HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.8701216"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701143">
            <name>Pair&lt;HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.8701142"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701326" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.class_HashtableIterator_ValueType_ValueType_R_ValueType_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A8752F817C504EBDF51FB4440DE5237504D01981"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8701328">
            <name>Pair&lt;HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8701326"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701327">
            <name>Pair&lt;HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>, bool>*</name>
            <content>
                <baseType ref="type.8701326"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_I_I_5D033C5BBBF2C4C78CF59858CFB85B4F03BBACA3" specialization="true">
            <name>Pair&lt;I, I></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="8699264"/>
                <argumentType ref="8699264"/>
            </content>
        </type>
        <type derived="true" id="type.8700124">
            <name>Pair&lt;I, I>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_I_I_5D033C5BBBF2C4C78CF59858CFB85B4F03BBACA3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700129">
            <name>Pair&lt;I, I>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_I_I_5D033C5BBBF2C4C78CF59858CFB85B4F03BBACA3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700115">
            <name>Pair&lt;I, I>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_I_I_5D033C5BBBF2C4C78CF59858CFB85B4F03BBACA3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700124">
            <name>Pair&lt;I, I>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_I_I_5D033C5BBBF2C4C78CF59858CFB85B4F03BBACA3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700128">
            <name>Pair&lt;I, I>*</name>
            <content>
                <baseType ref="type.class_Pair_I_I_5D033C5BBBF2C4C78CF59858CFB85B4F03BBACA3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700123">
            <name>Pair&lt;I, I>*</name>
            <content>
                <baseType ref="type.class_Pair_I_I_5D033C5BBBF2C4C78CF59858CFB85B4F03BBACA3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700114">
            <name>Pair&lt;I, I>*</name>
            <content>
                <baseType ref="type.class_Pair_I_I_5D033C5BBBF2C4C78CF59858CFB85B4F03BBACA3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980" specialization="true">
            <name>Pair&lt;K, T></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="8699697"/>
                <argumentType ref="8699698"/>
            </content>
        </type>
        <type derived="true" id="type.8700948">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701027">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700948">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701026">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700947">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183" specialization="true">
            <name>Pair&lt;Key, Value></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="8699750"/>
                <argumentType ref="8699751"/>
            </content>
        </type>
        <type derived="true" id="type.8701621">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701620">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701668" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8701660"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8701670">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.8701668"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701669">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.8701668"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8702040" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type id="type.8701983" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type id="type.8702097" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type id="type.8701983" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8702099">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool>&amp;</name>
            <content>
                <baseType ref="type.8702097"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702042">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool>&amp;</name>
            <content>
                <baseType ref="type.8702040"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702099">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool>&amp;</name>
            <content>
                <baseType ref="type.8702097"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701985">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool>&amp;</name>
            <content>
                <baseType ref="type.8701983"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702098">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool>*</name>
            <content>
                <baseType ref="type.8702097"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701984">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool>*</name>
            <content>
                <baseType ref="type.8701983"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702098">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool>*</name>
            <content>
                <baseType ref="type.8702097"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702041">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool>*</name>
            <content>
                <baseType ref="type.8702040"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701925" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8701927">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>, bool>&amp;</name>
            <content>
                <baseType ref="type.8701925"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701926">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>, bool>*</name>
            <content>
                <baseType ref="type.8701925"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703795" specialization="true">
            <name>Pair&lt;String&lt;char>, Age*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8699988"/>
            </content>
        </type>
        <type derived="true" id="type.8703797">
            <name>Pair&lt;String&lt;char>, Age*>&amp;</name>
            <content>
                <baseType ref="type.8703795"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705606">
            <name>Pair&lt;String&lt;char>, Age*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703795"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703796">
            <name>Pair&lt;String&lt;char>, Age*>*</name>
            <content>
                <baseType ref="type.8703795"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704835" specialization="true">
            <name>Pair&lt;String&lt;char>, AliasType*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700059"/>
            </content>
        </type>
        <type derived="true" id="type.8704837">
            <name>Pair&lt;String&lt;char>, AliasType*>&amp;</name>
            <content>
                <baseType ref="type.8704835"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706016">
            <name>Pair&lt;String&lt;char>, AliasType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704835"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704836">
            <name>Pair&lt;String&lt;char>, AliasType*>*</name>
            <content>
                <baseType ref="type.8704835"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704419" specialization="true">
            <name>Pair&lt;String&lt;char>, BidiClass*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700033"/>
            </content>
        </type>
        <type derived="true" id="type.8704421">
            <name>Pair&lt;String&lt;char>, BidiClass*>&amp;</name>
            <content>
                <baseType ref="type.8704419"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705852">
            <name>Pair&lt;String&lt;char>, BidiClass*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704419"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704420">
            <name>Pair&lt;String&lt;char>, BidiClass*>*</name>
            <content>
                <baseType ref="type.8704419"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704627" specialization="true">
            <name>Pair&lt;String&lt;char>, BidiPairedBracketType*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700046"/>
            </content>
        </type>
        <type derived="true" id="type.8704629">
            <name>Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;</name>
            <content>
                <baseType ref="type.8704627"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705934">
            <name>Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704627"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704628">
            <name>Pair&lt;String&lt;char>, BidiPairedBracketType*>*</name>
            <content>
                <baseType ref="type.8704627"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703165" specialization="true">
            <name>Pair&lt;String&lt;char>, BinaryProperty*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8699958"/>
            </content>
        </type>
        <type derived="true" id="type.8703167">
            <name>Pair&lt;String&lt;char>, BinaryProperty*>&amp;</name>
            <content>
                <baseType ref="type.8703165"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705337">
            <name>Pair&lt;String&lt;char>, BinaryProperty*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703165"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703166">
            <name>Pair&lt;String&lt;char>, BinaryProperty*>*</name>
            <content>
                <baseType ref="type.8703165"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703376" specialization="true">
            <name>Pair&lt;String&lt;char>, Block*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8699968"/>
            </content>
        </type>
        <type derived="true" id="type.8703378">
            <name>Pair&lt;String&lt;char>, Block*>&amp;</name>
            <content>
                <baseType ref="type.8703376"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705442">
            <name>Pair&lt;String&lt;char>, Block*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703376"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703377">
            <name>Pair&lt;String&lt;char>, Block*>*</name>
            <content>
                <baseType ref="type.8703376"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703587" specialization="true">
            <name>Pair&lt;String&lt;char>, GeneralCategory*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8699978"/>
            </content>
        </type>
        <type derived="true" id="type.8703589">
            <name>Pair&lt;String&lt;char>, GeneralCategory*>&amp;</name>
            <content>
                <baseType ref="type.8703587"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705524">
            <name>Pair&lt;String&lt;char>, GeneralCategory*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703587"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703588">
            <name>Pair&lt;String&lt;char>, GeneralCategory*>*</name>
            <content>
                <baseType ref="type.8703587"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704211" specialization="true">
            <name>Pair&lt;String&lt;char>, NumericType*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700020"/>
            </content>
        </type>
        <type derived="true" id="type.8704213">
            <name>Pair&lt;String&lt;char>, NumericType*>&amp;</name>
            <content>
                <baseType ref="type.8704211"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705770">
            <name>Pair&lt;String&lt;char>, NumericType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704211"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704212">
            <name>Pair&lt;String&lt;char>, NumericType*>*</name>
            <content>
                <baseType ref="type.8704211"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704003" specialization="true">
            <name>Pair&lt;String&lt;char>, Script*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700001"/>
            </content>
        </type>
        <type derived="true" id="type.8704005">
            <name>Pair&lt;String&lt;char>, Script*>&amp;</name>
            <content>
                <baseType ref="type.8704003"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705688">
            <name>Pair&lt;String&lt;char>, Script*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704003"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704004">
            <name>Pair&lt;String&lt;char>, Script*>*</name>
            <content>
                <baseType ref="type.8704003"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703718" specialization="true">
            <name>Pair&lt;System.Unicode.AgeId, Age*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                <argumentType ref="type.8699988"/>
            </content>
        </type>
        <type derived="true" id="type.8703720">
            <name>Pair&lt;System.Unicode.AgeId, Age*>&amp;</name>
            <content>
                <baseType ref="type.8703718"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705569">
            <name>Pair&lt;System.Unicode.AgeId, Age*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703718"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703719">
            <name>Pair&lt;System.Unicode.AgeId, Age*>*</name>
            <content>
                <baseType ref="type.8703718"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704758" specialization="true">
            <name>Pair&lt;System.Unicode.AliasTypeId, AliasType*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                <argumentType ref="type.8700059"/>
            </content>
        </type>
        <type derived="true" id="type.8704760">
            <name>Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;</name>
            <content>
                <baseType ref="type.8704758"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705979">
            <name>Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704758"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704759">
            <name>Pair&lt;System.Unicode.AliasTypeId, AliasType*>*</name>
            <content>
                <baseType ref="type.8704758"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704342" specialization="true">
            <name>Pair&lt;System.Unicode.BidiClassId, BidiClass*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                <argumentType ref="type.8700033"/>
            </content>
        </type>
        <type derived="true" id="type.8704344">
            <name>Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;</name>
            <content>
                <baseType ref="type.8704342"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705815">
            <name>Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704342"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704343">
            <name>Pair&lt;System.Unicode.BidiClassId, BidiClass*>*</name>
            <content>
                <baseType ref="type.8704342"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704550" specialization="true">
            <name>Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                <argumentType ref="type.8700046"/>
            </content>
        </type>
        <type derived="true" id="type.8704552">
            <name>Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;</name>
            <content>
                <baseType ref="type.8704550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705897">
            <name>Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704550"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704551">
            <name>Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*</name>
            <content>
                <baseType ref="type.8704550"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703067" specialization="true">
            <name>Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                <argumentType ref="type.8699958"/>
            </content>
        </type>
        <type derived="true" id="type.8703069">
            <name>Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;</name>
            <content>
                <baseType ref="type.8703067"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705300">
            <name>Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703067"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703068">
            <name>Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*</name>
            <content>
                <baseType ref="type.8703067"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703299" specialization="true">
            <name>Pair&lt;System.Unicode.BlockId, Block*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                <argumentType ref="type.8699968"/>
            </content>
        </type>
        <type derived="true" id="type.8703301">
            <name>Pair&lt;System.Unicode.BlockId, Block*>&amp;</name>
            <content>
                <baseType ref="type.8703299"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705405">
            <name>Pair&lt;System.Unicode.BlockId, Block*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703299"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703300">
            <name>Pair&lt;System.Unicode.BlockId, Block*>*</name>
            <content>
                <baseType ref="type.8703299"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703510" specialization="true">
            <name>Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                <argumentType ref="type.8699978"/>
            </content>
        </type>
        <type derived="true" id="type.8703512">
            <name>Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;</name>
            <content>
                <baseType ref="type.8703510"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705487">
            <name>Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703510"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703511">
            <name>Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*</name>
            <content>
                <baseType ref="type.8703510"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704134" specialization="true">
            <name>Pair&lt;System.Unicode.NumericTypeId, NumericType*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                <argumentType ref="type.8700020"/>
            </content>
        </type>
        <type derived="true" id="type.8704136">
            <name>Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;</name>
            <content>
                <baseType ref="type.8704134"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705733">
            <name>Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704134"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704135">
            <name>Pair&lt;System.Unicode.NumericTypeId, NumericType*>*</name>
            <content>
                <baseType ref="type.8704134"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703926" specialization="true">
            <name>Pair&lt;System.Unicode.ScriptId, Script*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                <argumentType ref="type.8700001"/>
            </content>
        </type>
        <type derived="true" id="type.8703928">
            <name>Pair&lt;System.Unicode.ScriptId, Script*>&amp;</name>
            <content>
                <baseType ref="type.8703926"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705651">
            <name>Pair&lt;System.Unicode.ScriptId, Script*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703926"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703927">
            <name>Pair&lt;System.Unicode.ScriptId, Script*>*</name>
            <content>
                <baseType ref="type.8703926"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="8699772"/>
                <argumentType ref="8699773"/>
            </content>
        </type>
        <type id="class_Pair_1DF07F738C5AB5EDB194C393BB2469E66540C6A8">
            <name>Pair&lt;T, U></name>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="8699770"/>
                <argumentType ref="8699771"/>
            </content>
        </type>
        <type derived="true" id="type.8701738">
            <name>Pair&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701760">
            <name>Pair&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701745">
            <name>Pair&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701730">
            <name>Pair&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701719">
            <name>Pair&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701760">
            <name>Pair&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701724">
            <name>Pair&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701718">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701744">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701737">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701744">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701723">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701759">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701729">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699916">
            <name>ParameterizedThreadStartFunction</name>
        </type>
        <type derived="true" id="type.8703004">
            <name>ParameterizedThreadStartFunction&amp;</name>
            <content>
                <baseType ref="8699916"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703005">
            <name>ParameterizedThreadStartFunction&amp;&amp;</name>
            <content>
                <baseType ref="8699916"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703003">
            <name>ParameterizedThreadStartFunction*</name>
            <content>
                <baseType ref="8699916"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699918">
            <name>ParameterizedThreadStartMethod</name>
        </type>
        <type derived="true" id="type.8703016">
            <name>ParameterizedThreadStartMethod&amp;</name>
            <content>
                <baseType ref="8699918"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703019">
            <name>ParameterizedThreadStartMethod&amp;&amp;</name>
            <content>
                <baseType ref="8699918"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703015">
            <name>ParameterizedThreadStartMethod*</name>
            <content>
                <baseType ref="8699918"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Path_B0E1FFEB70B93FC23B5C8F52471855FFA604AAE2">
            <name>Path</name>
        </type>
        <type derived="true" id="type.8705288">
            <name>Path&amp;</name>
            <content>
                <baseType ref="class_Path_B0E1FFEB70B93FC23B5C8F52471855FFA604AAE2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705287">
            <name>Path*</name>
            <content>
                <baseType ref="class_Path_B0E1FFEB70B93FC23B5C8F52471855FFA604AAE2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Plus_T_A04F66A1C888E4BFBAF2F85FF94CD1A38D050A00" specialization="true">
            <name>Plus&lt;T></name>
            <content>
                <primaryType ref="class_Plus_T_A04F66A1C888E4BFBAF2F85FF94CD1A38D050A00"/>
                <argumentType ref="8699622"/>
            </content>
        </type>
        <type id="class_Plus_5E0360803E8AC7B5FD56298DDAFABB8E8983C5FF">
            <name>Plus&lt;T></name>
        </type>
        <type derived="true" id="type.8700578">
            <name>Plus&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Plus_T_A04F66A1C888E4BFBAF2F85FF94CD1A38D050A00"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700568">
            <name>Plus&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Plus_T_A04F66A1C888E4BFBAF2F85FF94CD1A38D050A00"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700567">
            <name>Plus&lt;T>*</name>
            <content>
                <baseType ref="type.class_Plus_T_A04F66A1C888E4BFBAF2F85FF94CD1A38D050A00"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700577">
            <name>Plus&lt;T>*</name>
            <content>
                <baseType ref="type.class_Plus_T_A04F66A1C888E4BFBAF2F85FF94CD1A38D050A00"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699543">
            <name>Predicate</name>
        </type>
        <type derived="true" id="type.8700383">
            <name>Predicate&amp;</name>
            <content>
                <baseType ref="8699543"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700384">
            <name>Predicate&amp;&amp;</name>
            <content>
                <baseType ref="8699543"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700382">
            <name>Predicate*</name>
            <content>
                <baseType ref="8699543"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699544">
            <name>PredicateMethod</name>
        </type>
        <type derived="true" id="type.8700388">
            <name>PredicateMethod&amp;</name>
            <content>
                <baseType ref="8699544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700391">
            <name>PredicateMethod&amp;&amp;</name>
            <content>
                <baseType ref="8699544"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700387">
            <name>PredicateMethod*</name>
            <content>
                <baseType ref="8699544"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Queue_T_1C9B1484040D488EB9F21C531882DC9EB5B8CA02" specialization="true">
            <name>Queue&lt;T></name>
            <content>
                <primaryType ref="class_Queue_T_1C9B1484040D488EB9F21C531882DC9EB5B8CA02"/>
                <argumentType ref="8699789"/>
            </content>
        </type>
        <type id="class_Queue_4AE2F3291709E2E14DDE341CF8D8CDF02897FBEC">
            <name>Queue&lt;T></name>
        </type>
        <type id="type.class_Queue_T_1C9B1484040D488EB9F21C531882DC9EB5B8CA02" specialization="true">
            <name>Queue&lt;T></name>
            <content>
                <primaryType ref="class_Queue_T_1C9B1484040D488EB9F21C531882DC9EB5B8CA02"/>
                <argumentType ref="8699789"/>
            </content>
        </type>
        <type derived="true" id="type.8701777">
            <name>Queue&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Queue_T_1C9B1484040D488EB9F21C531882DC9EB5B8CA02"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701776">
            <name>Queue&lt;T>*</name>
            <content>
                <baseType ref="type.class_Queue_T_1C9B1484040D488EB9F21C531882DC9EB5B8CA02"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699810">
            <name>R</name>
        </type>
        <type id="type.8703886" specialization="true">
            <name>RandomAccessIter&lt;Age*, Age*&amp;, Age**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699988"/>
                <argumentType ref="type.8703788"/>
                <argumentType ref="type.8703885"/>
            </content>
        </type>
        <type derived="true" id="type.8703888">
            <name>RandomAccessIter&lt;Age*, Age*&amp;, Age**>&amp;</name>
            <content>
                <baseType ref="type.8703886"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703892">
            <name>RandomAccessIter&lt;Age*, Age*&amp;, Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703886"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703887">
            <name>RandomAccessIter&lt;Age*, Age*&amp;, Age**>*</name>
            <content>
                <baseType ref="type.8703886"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703878" specialization="true">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699988"/>
                <argumentType ref="type.8703721"/>
                <argumentType ref="type.8703877"/>
            </content>
        </type>
        <type derived="true" id="type.8703880">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;</name>
            <content>
                <baseType ref="type.8703878"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.324">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703878"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703879">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>*</name>
            <content>
                <baseType ref="type.8703878"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704926" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, AliasType*&amp;, AliasType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700059"/>
                <argumentType ref="type.8704828"/>
                <argumentType ref="type.8704925"/>
            </content>
        </type>
        <type derived="true" id="type.8704928">
            <name>RandomAccessIter&lt;AliasType*, AliasType*&amp;, AliasType**>&amp;</name>
            <content>
                <baseType ref="type.8704926"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704932">
            <name>RandomAccessIter&lt;AliasType*, AliasType*&amp;, AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704926"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704927">
            <name>RandomAccessIter&lt;AliasType*, AliasType*&amp;, AliasType**>*</name>
            <content>
                <baseType ref="type.8704926"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704918" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700059"/>
                <argumentType ref="type.8704761"/>
                <argumentType ref="type.8704917"/>
            </content>
        </type>
        <type derived="true" id="type.8704920">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;</name>
            <content>
                <baseType ref="type.8704918"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.349">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704918"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704919">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>*</name>
            <content>
                <baseType ref="type.8704918"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704510" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, BidiClass*&amp;, BidiClass**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700033"/>
                <argumentType ref="type.8704412"/>
                <argumentType ref="type.8704509"/>
            </content>
        </type>
        <type derived="true" id="type.8704512">
            <name>RandomAccessIter&lt;BidiClass*, BidiClass*&amp;, BidiClass**>&amp;</name>
            <content>
                <baseType ref="type.8704510"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704516">
            <name>RandomAccessIter&lt;BidiClass*, BidiClass*&amp;, BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704510"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704511">
            <name>RandomAccessIter&lt;BidiClass*, BidiClass*&amp;, BidiClass**>*</name>
            <content>
                <baseType ref="type.8704510"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704502" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700033"/>
                <argumentType ref="type.8704345"/>
                <argumentType ref="type.8704501"/>
            </content>
        </type>
        <type derived="true" id="type.8704504">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;</name>
            <content>
                <baseType ref="type.8704502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.339">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704502"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704503">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>*</name>
            <content>
                <baseType ref="type.8704502"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704718" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, BidiPairedBracketType*&amp;, BidiPairedBracketType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700046"/>
                <argumentType ref="type.8704620"/>
                <argumentType ref="type.8704717"/>
            </content>
        </type>
        <type derived="true" id="type.8704720">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, BidiPairedBracketType*&amp;, BidiPairedBracketType**>&amp;</name>
            <content>
                <baseType ref="type.8704718"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704724">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, BidiPairedBracketType*&amp;, BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704718"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704719">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, BidiPairedBracketType*&amp;, BidiPairedBracketType**>*</name>
            <content>
                <baseType ref="type.8704718"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704710" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700046"/>
                <argumentType ref="type.8704553"/>
                <argumentType ref="type.8704709"/>
            </content>
        </type>
        <type derived="true" id="type.8704712">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;</name>
            <content>
                <baseType ref="type.8704710"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.344">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704710"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704711">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>*</name>
            <content>
                <baseType ref="type.8704710"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703249" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, BinaryProperty*&amp;, BinaryProperty**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699958"/>
                <argumentType ref="type.8703137"/>
                <argumentType ref="type.8703248"/>
            </content>
        </type>
        <type derived="true" id="type.8703251">
            <name>RandomAccessIter&lt;BinaryProperty*, BinaryProperty*&amp;, BinaryProperty**>&amp;</name>
            <content>
                <baseType ref="type.8703249"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703255">
            <name>RandomAccessIter&lt;BinaryProperty*, BinaryProperty*&amp;, BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703249"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703250">
            <name>RandomAccessIter&lt;BinaryProperty*, BinaryProperty*&amp;, BinaryProperty**>*</name>
            <content>
                <baseType ref="type.8703249"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703241" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699958"/>
                <argumentType ref="type.8703070"/>
                <argumentType ref="type.8703240"/>
            </content>
        </type>
        <type derived="true" id="type.8703243">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;</name>
            <content>
                <baseType ref="type.8703241"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.309">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703241"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703242">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>*</name>
            <content>
                <baseType ref="type.8703241"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703467" specialization="true">
            <name>RandomAccessIter&lt;Block*, Block*&amp;, Block**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699968"/>
                <argumentType ref="type.8703369"/>
                <argumentType ref="type.8703466"/>
            </content>
        </type>
        <type derived="true" id="type.8703469">
            <name>RandomAccessIter&lt;Block*, Block*&amp;, Block**>&amp;</name>
            <content>
                <baseType ref="type.8703467"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703473">
            <name>RandomAccessIter&lt;Block*, Block*&amp;, Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703467"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703468">
            <name>RandomAccessIter&lt;Block*, Block*&amp;, Block**>*</name>
            <content>
                <baseType ref="type.8703467"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703459" specialization="true">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699968"/>
                <argumentType ref="type.8703302"/>
                <argumentType ref="type.8703458"/>
            </content>
        </type>
        <type derived="true" id="type.8703461">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;</name>
            <content>
                <baseType ref="type.8703459"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.314">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703459"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703460">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>*</name>
            <content>
                <baseType ref="type.8703459"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701087" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8701053"/>
                <argumentType ref="type.8701085"/>
                <argumentType ref="type.8701086"/>
            </content>
        </type>
        <type id="type.8701009" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700974"/>
                <argumentType ref="type.8701007"/>
                <argumentType ref="type.8701008"/>
            </content>
        </type>
        <type derived="true" id="type.8701011">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.8701009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701089">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.8701087"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.126">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.131">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701087"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701088">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.8701087"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701010">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.8701009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701088">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.8701087"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701078" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8701053"/>
                <argumentType ref="type.8701076"/>
                <argumentType ref="type.8701077"/>
            </content>
        </type>
        <type id="type.8701000" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700974"/>
                <argumentType ref="type.8700998"/>
                <argumentType ref="type.8700999"/>
            </content>
        </type>
        <type derived="true" id="type.8701080">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.8701078"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701002">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.8701000"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.130">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701078"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.125">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701000"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701001">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.8701000"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701079">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.8701078"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701001">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.8701000"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703855" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703821"/>
                <argumentType ref="type.8703853"/>
                <argumentType ref="type.8703854"/>
            </content>
        </type>
        <type derived="true" id="type.8703857">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;</name>
            <content>
                <baseType ref="type.8703855"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.323">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703855"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703856">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>*</name>
            <content>
                <baseType ref="type.8703855"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703846" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703821"/>
                <argumentType ref="type.8703844"/>
                <argumentType ref="type.8703845"/>
            </content>
        </type>
        <type derived="true" id="type.8703848">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;</name>
            <content>
                <baseType ref="type.8703846"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.322">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703846"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703847">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>*</name>
            <content>
                <baseType ref="type.8703846"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704895" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704861"/>
                <argumentType ref="type.8704893"/>
                <argumentType ref="type.8704894"/>
            </content>
        </type>
        <type derived="true" id="type.8704897">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;</name>
            <content>
                <baseType ref="type.8704895"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.348">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704895"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704896">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>*</name>
            <content>
                <baseType ref="type.8704895"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704886" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704861"/>
                <argumentType ref="type.8704884"/>
                <argumentType ref="type.8704885"/>
            </content>
        </type>
        <type derived="true" id="type.8704888">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;</name>
            <content>
                <baseType ref="type.8704886"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.347">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704886"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704887">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>*</name>
            <content>
                <baseType ref="type.8704886"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704479" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704445"/>
                <argumentType ref="type.8704477"/>
                <argumentType ref="type.8704478"/>
            </content>
        </type>
        <type derived="true" id="type.8704481">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;</name>
            <content>
                <baseType ref="type.8704479"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.338">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704479"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704480">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>*</name>
            <content>
                <baseType ref="type.8704479"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704470" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704445"/>
                <argumentType ref="type.8704468"/>
                <argumentType ref="type.8704469"/>
            </content>
        </type>
        <type derived="true" id="type.8704472">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;</name>
            <content>
                <baseType ref="type.8704470"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.337">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704470"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704471">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>*</name>
            <content>
                <baseType ref="type.8704470"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704687" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704653"/>
                <argumentType ref="type.8704685"/>
                <argumentType ref="type.8704686"/>
            </content>
        </type>
        <type derived="true" id="type.8704689">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <baseType ref="type.8704687"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.343">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704687"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704688">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>*</name>
            <content>
                <baseType ref="type.8704687"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704678" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704653"/>
                <argumentType ref="type.8704676"/>
                <argumentType ref="type.8704677"/>
            </content>
        </type>
        <type derived="true" id="type.8704680">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <baseType ref="type.8704678"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.342">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704678"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704679">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>*</name>
            <content>
                <baseType ref="type.8704678"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703225" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703191"/>
                <argumentType ref="type.8703223"/>
                <argumentType ref="type.8703224"/>
            </content>
        </type>
        <type derived="true" id="type.8703227">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;</name>
            <content>
                <baseType ref="type.8703225"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.308">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703225"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703226">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>*</name>
            <content>
                <baseType ref="type.8703225"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703216" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703191"/>
                <argumentType ref="type.8703214"/>
                <argumentType ref="type.8703215"/>
            </content>
        </type>
        <type derived="true" id="type.8703218">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;</name>
            <content>
                <baseType ref="type.8703216"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.307">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703216"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703217">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>*</name>
            <content>
                <baseType ref="type.8703216"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703436" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703402"/>
                <argumentType ref="type.8703434"/>
                <argumentType ref="type.8703435"/>
            </content>
        </type>
        <type derived="true" id="type.8703438">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;</name>
            <content>
                <baseType ref="type.8703436"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.313">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703436"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703437">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>*</name>
            <content>
                <baseType ref="type.8703436"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703427" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703402"/>
                <argumentType ref="type.8703425"/>
                <argumentType ref="type.8703426"/>
            </content>
        </type>
        <type derived="true" id="type.8703429">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;</name>
            <content>
                <baseType ref="type.8703427"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.312">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703427"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703428">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>*</name>
            <content>
                <baseType ref="type.8703427"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703647" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703613"/>
                <argumentType ref="type.8703645"/>
                <argumentType ref="type.8703646"/>
            </content>
        </type>
        <type derived="true" id="type.8703649">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;</name>
            <content>
                <baseType ref="type.8703647"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.318">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703647"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703648">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>*</name>
            <content>
                <baseType ref="type.8703647"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703638" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703613"/>
                <argumentType ref="type.8703636"/>
                <argumentType ref="type.8703637"/>
            </content>
        </type>
        <type derived="true" id="type.8703640">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;</name>
            <content>
                <baseType ref="type.8703638"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.317">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703638"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703639">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>*</name>
            <content>
                <baseType ref="type.8703638"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704271" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704237"/>
                <argumentType ref="type.8704269"/>
                <argumentType ref="type.8704270"/>
            </content>
        </type>
        <type derived="true" id="type.8704273">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;</name>
            <content>
                <baseType ref="type.8704271"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.333">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704271"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704272">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>*</name>
            <content>
                <baseType ref="type.8704271"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704262" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704237"/>
                <argumentType ref="type.8704260"/>
                <argumentType ref="type.8704261"/>
            </content>
        </type>
        <type derived="true" id="type.8704264">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;</name>
            <content>
                <baseType ref="type.8704262"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.332">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704262"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704263">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>*</name>
            <content>
                <baseType ref="type.8704262"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704063" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704029"/>
                <argumentType ref="type.8704061"/>
                <argumentType ref="type.8704062"/>
            </content>
        </type>
        <type derived="true" id="type.8704065">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;</name>
            <content>
                <baseType ref="type.8704063"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.328">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704063"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704064">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>*</name>
            <content>
                <baseType ref="type.8704063"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704054" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704029"/>
                <argumentType ref="type.8704052"/>
                <argumentType ref="type.8704053"/>
            </content>
        </type>
        <type derived="true" id="type.8704056">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;</name>
            <content>
                <baseType ref="type.8704054"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.327">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704054"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704055">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>*</name>
            <content>
                <baseType ref="type.8704054"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703779" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703745"/>
                <argumentType ref="type.8703777"/>
                <argumentType ref="type.8703778"/>
            </content>
        </type>
        <type derived="true" id="type.8703781">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;</name>
            <content>
                <baseType ref="type.8703779"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.321">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703779"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703780">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>*</name>
            <content>
                <baseType ref="type.8703779"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703770" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703745"/>
                <argumentType ref="type.8703768"/>
                <argumentType ref="type.8703769"/>
            </content>
        </type>
        <type derived="true" id="type.8703772">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;</name>
            <content>
                <baseType ref="type.8703770"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.320">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703770"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703771">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>*</name>
            <content>
                <baseType ref="type.8703770"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704819" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704785"/>
                <argumentType ref="type.8704817"/>
                <argumentType ref="type.8704818"/>
            </content>
        </type>
        <type derived="true" id="type.8704821">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;</name>
            <content>
                <baseType ref="type.8704819"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.346">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704819"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704820">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>*</name>
            <content>
                <baseType ref="type.8704819"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704810" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704785"/>
                <argumentType ref="type.8704808"/>
                <argumentType ref="type.8704809"/>
            </content>
        </type>
        <type derived="true" id="type.8704812">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;</name>
            <content>
                <baseType ref="type.8704810"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.345">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704810"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704811">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>*</name>
            <content>
                <baseType ref="type.8704810"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704403" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704369"/>
                <argumentType ref="type.8704401"/>
                <argumentType ref="type.8704402"/>
            </content>
        </type>
        <type derived="true" id="type.8704405">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;</name>
            <content>
                <baseType ref="type.8704403"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.336">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704403"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704404">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>*</name>
            <content>
                <baseType ref="type.8704403"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704394" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704369"/>
                <argumentType ref="type.8704392"/>
                <argumentType ref="type.8704393"/>
            </content>
        </type>
        <type derived="true" id="type.8704396">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;</name>
            <content>
                <baseType ref="type.8704394"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.335">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704394"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704395">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>*</name>
            <content>
                <baseType ref="type.8704394"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704611" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704577"/>
                <argumentType ref="type.8704609"/>
                <argumentType ref="type.8704610"/>
            </content>
        </type>
        <type derived="true" id="type.8704613">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <baseType ref="type.8704611"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.341">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704611"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704612">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>*</name>
            <content>
                <baseType ref="type.8704611"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704602" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704577"/>
                <argumentType ref="type.8704600"/>
                <argumentType ref="type.8704601"/>
            </content>
        </type>
        <type derived="true" id="type.8704604">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <baseType ref="type.8704602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.340">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704602"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704603">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>*</name>
            <content>
                <baseType ref="type.8704602"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703128" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703094"/>
                <argumentType ref="type.8703126"/>
                <argumentType ref="type.8703127"/>
            </content>
        </type>
        <type derived="true" id="type.8703130">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;</name>
            <content>
                <baseType ref="type.8703128"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.306">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703128"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703129">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>*</name>
            <content>
                <baseType ref="type.8703128"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703119" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703094"/>
                <argumentType ref="type.8703117"/>
                <argumentType ref="type.8703118"/>
            </content>
        </type>
        <type derived="true" id="type.8703121">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;</name>
            <content>
                <baseType ref="type.8703119"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.305">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703119"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703120">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>*</name>
            <content>
                <baseType ref="type.8703119"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703360" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703326"/>
                <argumentType ref="type.8703358"/>
                <argumentType ref="type.8703359"/>
            </content>
        </type>
        <type derived="true" id="type.8703362">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;</name>
            <content>
                <baseType ref="type.8703360"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.311">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703360"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703361">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>*</name>
            <content>
                <baseType ref="type.8703360"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703351" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703326"/>
                <argumentType ref="type.8703349"/>
                <argumentType ref="type.8703350"/>
            </content>
        </type>
        <type derived="true" id="type.8703353">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;</name>
            <content>
                <baseType ref="type.8703351"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.310">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703351"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703352">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>*</name>
            <content>
                <baseType ref="type.8703351"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703571" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703537"/>
                <argumentType ref="type.8703569"/>
                <argumentType ref="type.8703570"/>
            </content>
        </type>
        <type derived="true" id="type.8703573">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;</name>
            <content>
                <baseType ref="type.8703571"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.316">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703571"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703572">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>*</name>
            <content>
                <baseType ref="type.8703571"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703562" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703537"/>
                <argumentType ref="type.8703560"/>
                <argumentType ref="type.8703561"/>
            </content>
        </type>
        <type derived="true" id="type.8703564">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;</name>
            <content>
                <baseType ref="type.8703562"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.315">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703562"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703563">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>*</name>
            <content>
                <baseType ref="type.8703562"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704195" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704161"/>
                <argumentType ref="type.8704193"/>
                <argumentType ref="type.8704194"/>
            </content>
        </type>
        <type derived="true" id="type.8704197">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;</name>
            <content>
                <baseType ref="type.8704195"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.331">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704195"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704196">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>*</name>
            <content>
                <baseType ref="type.8704195"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704186" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704161"/>
                <argumentType ref="type.8704184"/>
                <argumentType ref="type.8704185"/>
            </content>
        </type>
        <type derived="true" id="type.8704188">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;</name>
            <content>
                <baseType ref="type.8704186"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.330">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704186"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704187">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>*</name>
            <content>
                <baseType ref="type.8704186"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703987" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703953"/>
                <argumentType ref="type.8703985"/>
                <argumentType ref="type.8703986"/>
            </content>
        </type>
        <type derived="true" id="type.8703989">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;</name>
            <content>
                <baseType ref="type.8703987"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.326">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703987"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703988">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>*</name>
            <content>
                <baseType ref="type.8703987"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703978" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703953"/>
                <argumentType ref="type.8703976"/>
                <argumentType ref="type.8703977"/>
            </content>
        </type>
        <type derived="true" id="type.8703980">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;</name>
            <content>
                <baseType ref="type.8703978"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.325">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703978"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703979">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>*</name>
            <content>
                <baseType ref="type.8703978"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701162" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8701128"/>
                <argumentType ref="type.8701160"/>
                <argumentType ref="type.8701161"/>
            </content>
        </type>
        <type id="type.8701236" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8701202"/>
                <argumentType ref="type.8701234"/>
                <argumentType ref="type.8701235"/>
            </content>
        </type>
        <type id="type.8701162" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8701128"/>
                <argumentType ref="type.8701160"/>
                <argumentType ref="type.8701161"/>
            </content>
        </type>
        <type derived="true" id="type.8701164">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;</name>
            <content>
                <baseType ref="type.8701162"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701238">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;</name>
            <content>
                <baseType ref="type.8701236"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.134">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701162"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.138">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701236"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701163">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>*</name>
            <content>
                <baseType ref="type.8701162"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701237">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>*</name>
            <content>
                <baseType ref="type.8701236"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701153" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8701128"/>
                <argumentType ref="type.8701151"/>
                <argumentType ref="type.8701152"/>
            </content>
        </type>
        <type id="type.8701227" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8701202"/>
                <argumentType ref="type.8701225"/>
                <argumentType ref="type.8701226"/>
            </content>
        </type>
        <type derived="true" id="type.8701155">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;</name>
            <content>
                <baseType ref="type.8701153"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701229">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;</name>
            <content>
                <baseType ref="type.8701227"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701155">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;</name>
            <content>
                <baseType ref="type.8701153"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.133">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701153"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.137">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701227"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701154">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>*</name>
            <content>
                <baseType ref="type.8701153"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701228">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>*</name>
            <content>
                <baseType ref="type.8701227"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701154">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>*</name>
            <content>
                <baseType ref="type.8701153"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701347" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8701311"/>
                <argumentType ref="type.8701345"/>
                <argumentType ref="type.8701346"/>
            </content>
        </type>
        <type derived="true" id="type.8701349">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;</name>
            <content>
                <baseType ref="type.8701347"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.147">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701347"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701348">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>*</name>
            <content>
                <baseType ref="type.8701347"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701338" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8701311"/>
                <argumentType ref="type.8701336"/>
                <argumentType ref="type.8701337"/>
            </content>
        </type>
        <type derived="true" id="type.8701340">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;</name>
            <content>
                <baseType ref="type.8701338"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.146">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701338"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701339">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>*</name>
            <content>
                <baseType ref="type.8701338"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="8699902"/>
                <argumentType ref="type.8702967"/>
                <argumentType ref="type.8702968"/>
            </content>
        </type>
        <type derived="true" id="type.8702971">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702924">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702830">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702783">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702736">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702689">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702877">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702783">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.282">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.286">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.294">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.298">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.290">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.276">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.302">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702923">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702876">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702735">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702970">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702688">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702782">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702970">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702829">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="8699901"/>
                <argumentType ref="type.8702906"/>
                <argumentType ref="type.8702904"/>
            </content>
        </type>
        <type derived="true" id="type.8702868">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702915">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702774">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702821">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702962">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702727">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702680">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702962">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.289">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.285">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.275">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.293">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.301">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.297">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.281">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702961">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702867">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702726">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702914">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702679">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702773">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702820">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703678" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, GeneralCategory*&amp;, GeneralCategory**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699978"/>
                <argumentType ref="type.8703580"/>
                <argumentType ref="type.8703677"/>
            </content>
        </type>
        <type derived="true" id="type.8703680">
            <name>RandomAccessIter&lt;GeneralCategory*, GeneralCategory*&amp;, GeneralCategory**>&amp;</name>
            <content>
                <baseType ref="type.8703678"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703684">
            <name>RandomAccessIter&lt;GeneralCategory*, GeneralCategory*&amp;, GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703678"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703679">
            <name>RandomAccessIter&lt;GeneralCategory*, GeneralCategory*&amp;, GeneralCategory**>*</name>
            <content>
                <baseType ref="type.8703678"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703670" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699978"/>
                <argumentType ref="type.8703513"/>
                <argumentType ref="type.8703669"/>
            </content>
        </type>
        <type derived="true" id="type.8703672">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;</name>
            <content>
                <baseType ref="type.8703670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.319">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703670"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703671">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>*</name>
            <content>
                <baseType ref="type.8703670"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704295" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, NumericType*&amp;, NumericType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700020"/>
                <argumentType ref="type.8704204"/>
                <argumentType ref="type.8704294"/>
            </content>
        </type>
        <type derived="true" id="type.8704297">
            <name>RandomAccessIter&lt;NumericType*, NumericType*&amp;, NumericType**>&amp;</name>
            <content>
                <baseType ref="type.8704295"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704301">
            <name>RandomAccessIter&lt;NumericType*, NumericType*&amp;, NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704295"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704296">
            <name>RandomAccessIter&lt;NumericType*, NumericType*&amp;, NumericType**>*</name>
            <content>
                <baseType ref="type.8704295"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704287" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700020"/>
                <argumentType ref="type.8704137"/>
                <argumentType ref="type.8704286"/>
            </content>
        </type>
        <type derived="true" id="type.8704289">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;</name>
            <content>
                <baseType ref="type.8704287"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.334">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704287"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704288">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>*</name>
            <content>
                <baseType ref="type.8704287"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704094" specialization="true">
            <name>RandomAccessIter&lt;Script*, Script*&amp;, Script**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700001"/>
                <argumentType ref="type.8703996"/>
                <argumentType ref="type.8704093"/>
            </content>
        </type>
        <type derived="true" id="type.8704096">
            <name>RandomAccessIter&lt;Script*, Script*&amp;, Script**>&amp;</name>
            <content>
                <baseType ref="type.8704094"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704100">
            <name>RandomAccessIter&lt;Script*, Script*&amp;, Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704094"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704095">
            <name>RandomAccessIter&lt;Script*, Script*&amp;, Script**>*</name>
            <content>
                <baseType ref="type.8704094"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704086" specialization="true">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700001"/>
                <argumentType ref="type.8703929"/>
                <argumentType ref="type.8704085"/>
            </content>
        </type>
        <type derived="true" id="type.8704088">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;</name>
            <content>
                <baseType ref="type.8704086"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.329">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704086"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704087">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>*</name>
            <content>
                <baseType ref="type.8704086"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8702896" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702859"/>
                <argumentType ref="type.8702858"/>
            </content>
        </type>
        <type id="type.8702990" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702953"/>
                <argumentType ref="type.8702952"/>
            </content>
        </type>
        <type id="type.8702755" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702718"/>
                <argumentType ref="type.8702717"/>
            </content>
        </type>
        <type id="type.8702849" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702812"/>
                <argumentType ref="type.8702811"/>
            </content>
        </type>
        <type id="type.8702708" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702671"/>
                <argumentType ref="type.8702670"/>
            </content>
        </type>
        <type id="type.8702943" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702909"/>
                <argumentType ref="type.8702908"/>
            </content>
        </type>
        <type id="type.8702849" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702812"/>
                <argumentType ref="type.8702811"/>
            </content>
        </type>
        <type id="type.8702802" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702765"/>
                <argumentType ref="type.8702764"/>
            </content>
        </type>
        <type derived="true" id="type.8702757">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.8702755"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702851">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.8702849"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702710">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.8702708"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702898">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.8702896"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702804">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.8702802"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702898">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.8702896"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702992">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.8702990"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702945">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.8702943"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.296">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702896"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.304">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.300">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702943"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.288">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702802"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.279">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702708"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.292">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702849"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.284">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702755"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702803">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.8702802"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702897">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.8702896"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702944">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.8702943"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702991">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.8702990"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702850">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.8702849"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702709">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.8702708"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702756">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.8702755"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8702795" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702768"/>
                <argumentType ref="type.8702767"/>
            </content>
        </type>
        <type id="type.8702983" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702956"/>
                <argumentType ref="type.8702955"/>
            </content>
        </type>
        <type id="type.8702936" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702912"/>
                <argumentType ref="type.8702911"/>
            </content>
        </type>
        <type id="type.8702983" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702956"/>
                <argumentType ref="type.8702955"/>
            </content>
        </type>
        <type id="type.8702842" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702815"/>
                <argumentType ref="type.8702814"/>
            </content>
        </type>
        <type id="type.8702748" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702721"/>
                <argumentType ref="type.8702720"/>
            </content>
        </type>
        <type id="type.8702701" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702674"/>
                <argumentType ref="type.8702673"/>
            </content>
        </type>
        <type id="type.8702889" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702862"/>
                <argumentType ref="type.8702861"/>
            </content>
        </type>
        <type derived="true" id="type.8702891">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.8702889"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702985">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.8702983"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702797">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.8702795"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702985">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.8702983"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702844">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.8702842"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702703">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.8702701"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702750">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.8702748"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702938">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.8702936"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.299">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702936"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.291">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702842"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.283">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702748"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.295">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702889"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.303">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702983"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.287">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702795"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.278">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702701"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702937">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.8702936"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702843">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.8702842"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702702">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.8702701"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702796">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.8702795"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702890">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.8702889"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702749">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.8702748"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702937">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.8702936"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702984">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.8702983"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700241" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700208"/>
                <argumentType ref="type.8700207"/>
            </content>
        </type>
        <type derived="true" id="type.8700243">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;</name>
            <content>
                <baseType ref="type.8700241"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.48">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700241"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700242">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>*</name>
            <content>
                <baseType ref="type.8700241"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700234" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700211"/>
                <argumentType ref="type.8700210"/>
            </content>
        </type>
        <type derived="true" id="type.8700236">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;</name>
            <content>
                <baseType ref="type.8700234"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.47">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700234"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700235">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>*</name>
            <content>
                <baseType ref="type.8700234"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700331" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8700296"/>
                <argumentType ref="type.8700295"/>
            </content>
        </type>
        <type derived="true" id="type.8700333">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;</name>
            <content>
                <baseType ref="type.8700331"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.67">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700331"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700332">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>*</name>
            <content>
                <baseType ref="type.8700331"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700324" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8700299"/>
                <argumentType ref="type.8700298"/>
            </content>
        </type>
        <type derived="true" id="type.8700326">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;</name>
            <content>
                <baseType ref="type.8700324"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.66">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700324"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700325">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>*</name>
            <content>
                <baseType ref="type.8700324"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700286" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700249"/>
                <argumentType ref="type.8700251"/>
                <argumentType ref="type.8700250"/>
            </content>
        </type>
        <type derived="true" id="type.8700288">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;</name>
            <content>
                <baseType ref="type.8700286"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.57">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700286"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700287">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>*</name>
            <content>
                <baseType ref="type.8700286"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700279" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700249"/>
                <argumentType ref="type.8700254"/>
                <argumentType ref="type.8700253"/>
            </content>
        </type>
        <type derived="true" id="type.8700281">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;</name>
            <content>
                <baseType ref="type.8700279"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.56">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700279"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700280">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>*</name>
            <content>
                <baseType ref="type.8700279"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704948" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.8700072"/>
                <argumentType ref="type.8700071"/>
            </content>
        </type>
        <type derived="true" id="type.8704950">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;</name>
            <content>
                <baseType ref="type.8704948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.351">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704949">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>*</name>
            <content>
                <baseType ref="type.8704948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704941" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.8700075"/>
                <argumentType ref="type.8700074"/>
            </content>
        </type>
        <type derived="true" id="type.8704943">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;</name>
            <content>
                <baseType ref="type.8704941"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.350">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704941"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704942">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>*</name>
            <content>
                <baseType ref="type.8704941"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="8699809"/>
                <argumentType ref="8699810"/>
                <argumentType ref="8699811"/>
            </content>
        </type>
        <type id="class_RandomAccessIter_7E89D708D80608849CCB7CE3F32B682D703BCF2F">
            <name>RandomAccessIter&lt;T, R, P></name>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="8699806"/>
                <argumentType ref="8699807"/>
                <argumentType ref="8699808"/>
            </content>
        </type>
        <type derived="true" id="type.8701821">
            <name>RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701814">
            <name>RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701807">
            <name>RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701828">
            <name>RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701849">
            <name>RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701842">
            <name>RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701835">
            <name>RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701828">
            <name>RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.194">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.198">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.193">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.195">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.199">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.197">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.196">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701820">
            <name>RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701806">
            <name>RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701813">
            <name>RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701827">
            <name>RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701834">
            <name>RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701841">
            <name>RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701848">
            <name>RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="8699743"/>
                <argumentType ref="type.8701542"/>
                <argumentType ref="type.8701543"/>
            </content>
        </type>
        <type derived="true" id="type.8701799">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702662">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701799">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701573">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701546">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701600">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.161">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.191">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.159">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.273">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.155">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701798">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701545">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702661">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701572">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701599">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="8699873"/>
                <argumentType ref="type.8702641"/>
                <argumentType ref="type.8702650"/>
            </content>
        </type>
        <type derived="true" id="type.8701790">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701537">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702654">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701591">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701537">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701564">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.154">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.190">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.158">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.272">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.160">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701590">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701789">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702653">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701563">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701536">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702653">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704977" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704957"/>
                <argumentType ref="type.8704959"/>
                <argumentType ref="type.8704958"/>
            </content>
        </type>
        <type derived="true" id="type.8704979">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;</name>
            <content>
                <baseType ref="type.8704977"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.353">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704977"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704978">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>*</name>
            <content>
                <baseType ref="type.8704977"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704970" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704957"/>
                <argumentType ref="type.8704962"/>
                <argumentType ref="type.8704961"/>
            </content>
        </type>
        <type derived="true" id="type.8704972">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;</name>
            <content>
                <baseType ref="type.8704970"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.352">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704970"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704971">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>*</name>
            <content>
                <baseType ref="type.8704970"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8705073" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8705053"/>
                <argumentType ref="type.8705055"/>
                <argumentType ref="type.8705054"/>
            </content>
        </type>
        <type derived="true" id="type.8705075">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;</name>
            <content>
                <baseType ref="type.8705073"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.369">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705073"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705074">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>*</name>
            <content>
                <baseType ref="type.8705073"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8705066" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8705053"/>
                <argumentType ref="type.8705058"/>
                <argumentType ref="type.8705057"/>
            </content>
        </type>
        <type derived="true" id="type.8705068">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;</name>
            <content>
                <baseType ref="type.8705066"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.368">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705066"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705067">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>*</name>
            <content>
                <baseType ref="type.8705066"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8705005" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704985"/>
                <argumentType ref="type.8704987"/>
                <argumentType ref="type.8704986"/>
            </content>
        </type>
        <type derived="true" id="type.8705007">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;</name>
            <content>
                <baseType ref="type.8705005"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.355">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705005"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705006">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>*</name>
            <content>
                <baseType ref="type.8705005"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704998" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704985"/>
                <argumentType ref="type.8704990"/>
                <argumentType ref="type.8704989"/>
            </content>
        </type>
        <type derived="true" id="type.8705000">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;</name>
            <content>
                <baseType ref="type.8704998"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.354">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704998"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704999">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>*</name>
            <content>
                <baseType ref="type.8704998"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8705108" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8705088"/>
                <argumentType ref="type.8705090"/>
                <argumentType ref="type.8705089"/>
            </content>
        </type>
        <type derived="true" id="type.8705110">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;</name>
            <content>
                <baseType ref="type.8705108"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.371">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705108"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705109">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>*</name>
            <content>
                <baseType ref="type.8705108"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8705101" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8705088"/>
                <argumentType ref="type.8705093"/>
                <argumentType ref="type.8705092"/>
            </content>
        </type>
        <type derived="true" id="type.8705103">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;</name>
            <content>
                <baseType ref="type.8705101"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.370">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705101"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705102">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>*</name>
            <content>
                <baseType ref="type.8705101"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701696" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699067"/>
                <argumentType ref="type.8699088"/>
                <argumentType ref="type.8699087"/>
            </content>
        </type>
        <type id="type.169" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699067"/>
                <argumentType ref="type.8699088"/>
                <argumentType ref="type.8699087"/>
            </content>
        </type>
        <type id="type.8701696" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699067"/>
                <argumentType ref="type.8699088"/>
                <argumentType ref="type.8699087"/>
            </content>
        </type>
        <type derived="true" id="type.171">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.169"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701698">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.8701696"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.175">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.169"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.176">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701696"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.170">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.169"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701697">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.8701696"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701689" specialization="true">
            <name>RandomAccessIter&lt;byte, const byte&amp;, const byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699067"/>
                <argumentType ref="type.8701688"/>
                <argumentType ref="type.8701680"/>
            </content>
        </type>
        <type derived="true" id="type.8701691">
            <name>RandomAccessIter&lt;byte, const byte&amp;, const byte*>&amp;</name>
            <content>
                <baseType ref="type.8701689"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701695">
            <name>RandomAccessIter&lt;byte, const byte&amp;, const byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701689"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701690">
            <name>RandomAccessIter&lt;byte, const byte&amp;, const byte*>*</name>
            <content>
                <baseType ref="type.8701689"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700220" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699076"/>
                <argumentType ref="type.8699115"/>
                <argumentType ref="type.8699114"/>
            </content>
        </type>
        <type id="type.40" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699076"/>
                <argumentType ref="type.8699115"/>
                <argumentType ref="type.8699114"/>
            </content>
        </type>
        <type derived="true" id="type.42">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.40"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700222">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.8700220"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700226">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700220"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.46">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.40"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700226">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700220"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700221">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.8700220"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.41">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.40"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700221">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.8700220"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700213" specialization="true">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699076"/>
                <argumentType ref="type.8700212"/>
                <argumentType ref="type.8699214"/>
            </content>
        </type>
        <type derived="true" id="type.8700215">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>&amp;</name>
            <content>
                <baseType ref="type.8700213"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700219">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700213"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700214">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>*</name>
            <content>
                <baseType ref="type.8700213"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700303" specialization="true">
            <name>RandomAccessIter&lt;uchar, const uchar&amp;, const uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699078"/>
                <argumentType ref="type.8700300"/>
                <argumentType ref="type.8700301"/>
            </content>
        </type>
        <type derived="true" id="type.8700305">
            <name>RandomAccessIter&lt;uchar, const uchar&amp;, const uchar*>&amp;</name>
            <content>
                <baseType ref="type.8700303"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700309">
            <name>RandomAccessIter&lt;uchar, const uchar&amp;, const uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700303"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700304">
            <name>RandomAccessIter&lt;uchar, const uchar&amp;, const uchar*>*</name>
            <content>
                <baseType ref="type.8700303"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700310" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699078"/>
                <argumentType ref="type.8699121"/>
                <argumentType ref="type.8699120"/>
            </content>
        </type>
        <type id="type.59" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699078"/>
                <argumentType ref="type.8699121"/>
                <argumentType ref="type.8699120"/>
            </content>
        </type>
        <type id="type.8700310" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699078"/>
                <argumentType ref="type.8699121"/>
                <argumentType ref="type.8699120"/>
            </content>
        </type>
        <type derived="true" id="type.8700312">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.8700310"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.61">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.59"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.68">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700310"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.65">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.59"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700311">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.8700310"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.60">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.59"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700311">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.8700310"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8705022" specialization="true">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699071"/>
                <argumentType ref="type.8705019"/>
                <argumentType ref="type.8705020"/>
            </content>
        </type>
        <type derived="true" id="type.8705024">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;</name>
            <content>
                <baseType ref="type.8705022"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.356">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705022"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705023">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>*</name>
            <content>
                <baseType ref="type.8705022"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.357" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699071"/>
                <argumentType ref="type.8699100"/>
                <argumentType ref="type.8699099"/>
            </content>
        </type>
        <type id="type.8705029" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699071"/>
                <argumentType ref="type.8699100"/>
                <argumentType ref="type.8699099"/>
            </content>
        </type>
        <type derived="true" id="type.359">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.357"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705031">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.8705029"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.363">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.357"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.364">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705029"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.358">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.357"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705030">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.8705029"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700353" specialization="true">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699073"/>
                <argumentType ref="type.8700350"/>
                <argumentType ref="type.8700351"/>
            </content>
        </type>
        <type derived="true" id="type.8700355">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;</name>
            <content>
                <baseType ref="type.8700353"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.69">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700353"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700354">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>*</name>
            <content>
                <baseType ref="type.8700353"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.70" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699073"/>
                <argumentType ref="type.8699106"/>
                <argumentType ref="type.8699105"/>
            </content>
        </type>
        <type id="type.8700360" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699073"/>
                <argumentType ref="type.8699106"/>
                <argumentType ref="type.8699105"/>
            </content>
        </type>
        <type derived="true" id="type.72">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.70"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700362">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.8700360"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.76">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.70"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.77">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700360"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.71">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.70"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700361">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.8700360"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700258" specialization="true">
            <name>RandomAccessIter&lt;wchar, const wchar&amp;, const wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699077"/>
                <argumentType ref="type.8700255"/>
                <argumentType ref="type.8700256"/>
            </content>
        </type>
        <type derived="true" id="type.8700260">
            <name>RandomAccessIter&lt;wchar, const wchar&amp;, const wchar*>&amp;</name>
            <content>
                <baseType ref="type.8700258"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700264">
            <name>RandomAccessIter&lt;wchar, const wchar&amp;, const wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700258"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700259">
            <name>RandomAccessIter&lt;wchar, const wchar&amp;, const wchar*>*</name>
            <content>
                <baseType ref="type.8700258"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700265" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699077"/>
                <argumentType ref="type.8699118"/>
                <argumentType ref="type.8699117"/>
            </content>
        </type>
        <type id="type.49" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699077"/>
                <argumentType ref="type.8699118"/>
                <argumentType ref="type.8699117"/>
            </content>
        </type>
        <type derived="true" id="type.8700267">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.8700265"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.51">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.49"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.58">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700265"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.55">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.49"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700266">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.8700265"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.50">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.49"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82">
            <name>RecursiveMutex</name>
        </type>
        <type derived="true" id="type.8699764">
            <name>RecursiveMutex&amp;</name>
            <content>
                <baseType ref="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701709">
            <name>RecursiveMutex&amp;&amp;</name>
            <content>
                <baseType ref="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699763">
            <name>RecursiveMutex*</name>
            <content>
                <baseType ref="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047" specialization="true">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="8699750"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <argumentType ref="8699752"/>
            </content>
        </type>
        <type derived="true" id="type.8701636">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.166">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701635">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="8699829"/>
                <argumentType ref="8699830"/>
                <argumentType ref="8699831"/>
                <argumentType ref="8699832"/>
            </content>
        </type>
        <type id="class_RedBlackTree_CAA312876C42EE37C825B33A3964B87CCF3E7637">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
        </type>
        <type derived="true" id="type.8701894">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.208">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701893">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="8699835"/>
                <argumentType ref="8699835"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="8699836"/>
            </content>
        </type>
        <type derived="true" id="type.8701954">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702068">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702011">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702039">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702096">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.213">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701953">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702010">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702067">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701648" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.8701650">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.8701648"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701649">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.8701648"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="8699820"/>
            </content>
        </type>
        <type id="class_RedBlackTreeNode_B6FC57EAD42816057DEE7D364E0100B0C606F3FF">
            <name>RedBlackTreeNode&lt;T></name>
        </type>
        <type id="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="8699825"/>
            </content>
        </type>
        <type derived="true" id="type.8701856">
            <name>RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701870">
            <name>RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701968">
            <name>RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701885">
            <name>RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702025">
            <name>RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702082">
            <name>RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701855">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702081">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701967">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702024">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702081">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701884">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701869">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855" specialization="true">
            <name>RedBlackTreeNode&lt;ValueType></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="8699830"/>
            </content>
        </type>
        <type derived="true" id="type.8701909">
            <name>RedBlackTreeNode&lt;ValueType>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701908">
            <name>RedBlackTreeNode&lt;ValueType>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948">
            <name>RedBlackTreeNodeBase</name>
        </type>
        <type derived="true" id="type.2">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699815">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.389">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699814">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701658">
            <name>RedBlackTreeNodeBase*&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705290">
            <name>RedBlackTreeNodeBase**</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705293">
            <name>RedBlackTreeNodeBase**&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705292">
            <name>RedBlackTreeNodeBase***</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701660" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.8701621"/>
                <argumentType ref="type.8701620"/>
            </content>
        </type>
        <type derived="true" id="type.8701662">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.8701660"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.165">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701660"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701661">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.8701660"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701642" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.8701631"/>
                <argumentType ref="type.8701640"/>
            </content>
        </type>
        <type derived="true" id="type.8701644">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.8701642"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.164">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701642"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701643">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.8701642"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_RedBlackTreeNodeIterator_2F3F8989ABE308F39284B450DB62CC22F1EC129B">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="8699822"/>
                <argumentType ref="8699823"/>
                <argumentType ref="8699824"/>
            </content>
        </type>
        <type derived="true" id="type.8701879">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701864">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.204">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.205">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701878">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701863">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="8699835"/>
                <argumentType ref="type.8701972"/>
                <argumentType ref="type.8701974"/>
            </content>
        </type>
        <type derived="true" id="type.8702091">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701977">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702034">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.212">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.216">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.218">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702090">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701976">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702033">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="8699839"/>
                <argumentType ref="type.8702063"/>
                <argumentType ref="type.8702072"/>
            </content>
        </type>
        <type derived="true" id="type.8702019">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702076">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701962">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702076">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.215">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.211">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.217">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701961">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702075">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702018">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702075">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="8699830"/>
                <argumentType ref="type.8701913"/>
                <argumentType ref="type.8701915"/>
            </content>
        </type>
        <type derived="true" id="type.8701918">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.207">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701917">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="8699830"/>
                <argumentType ref="type.8701898"/>
                <argumentType ref="type.8701899"/>
            </content>
        </type>
        <type derived="true" id="type.8701903">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.206">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701902">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>*</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071" specialization="true">
            <name>Rel&lt;Argument></name>
            <content>
                <primaryType ref="class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071"/>
                <argumentType ref="8699641"/>
            </content>
        </type>
        <type id="class_Rel_E5A5D2468FFEBDC756D17532B6412C0D036F815E">
            <name>Rel&lt;Argument></name>
        </type>
        <type id="type.class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071" specialization="true">
            <name>Rel&lt;Argument></name>
            <content>
                <primaryType ref="class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071"/>
                <argumentType ref="8699641"/>
            </content>
        </type>
        <type derived="true" id="type.8700659">
            <name>Rel&lt;Argument>&amp;</name>
            <content>
                <baseType ref="type.class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700658">
            <name>Rel&lt;Argument>*</name>
            <content>
                <baseType ref="type.class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703148" specialization="true">
            <name>Rel&lt;String&lt;char>></name>
            <content>
                <primaryType ref="class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071"/>
                <argumentType ref="type.8700206"/>
            </content>
        </type>
        <type derived="true" id="type.8703156">
            <name>Rel&lt;String&lt;char>>&amp;</name>
            <content>
                <baseType ref="type.8703148"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705349">
            <name>Rel&lt;String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703148"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703155">
            <name>Rel&lt;String&lt;char>>*</name>
            <content>
                <baseType ref="type.8703148"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703701" specialization="true">
            <name>Rel&lt;System.Unicode.AgeId></name>
            <content>
                <primaryType ref="class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071"/>
                <argumentType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
            </content>
        </type>
        <type derived="true" id="type.8703709">
            <name>Rel&lt;System.Unicode.AgeId>&amp;</name>
            <content>
                <baseType ref="type.8703701"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705583">
            <name>Rel&lt;System.Unicode.AgeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703701"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703708">
            <name>Rel&lt;System.Unicode.AgeId>*</name>
            <content>
                <baseType ref="type.8703701"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704741" specialization="true">
            <name>Rel&lt;System.Unicode.AliasTypeId></name>
            <content>
                <primaryType ref="class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071"/>
                <argumentType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
            </content>
        </type>
        <type derived="true" id="type.8704749">
            <name>Rel&lt;System.Unicode.AliasTypeId>&amp;</name>
            <content>
                <baseType ref="type.8704741"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705993">
            <name>Rel&lt;System.Unicode.AliasTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704741"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704748">
            <name>Rel&lt;System.Unicode.AliasTypeId>*</name>
            <content>
                <baseType ref="type.8704741"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704325" specialization="true">
            <name>Rel&lt;System.Unicode.BidiClassId></name>
            <content>
                <primaryType ref="class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071"/>
                <argumentType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
            </content>
        </type>
        <type derived="true" id="type.8704333">
            <name>Rel&lt;System.Unicode.BidiClassId>&amp;</name>
            <content>
                <baseType ref="type.8704325"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705829">
            <name>Rel&lt;System.Unicode.BidiClassId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704325"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704332">
            <name>Rel&lt;System.Unicode.BidiClassId>*</name>
            <content>
                <baseType ref="type.8704325"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704533" specialization="true">
            <name>Rel&lt;System.Unicode.BidiPairedBracketTypeId></name>
            <content>
                <primaryType ref="class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071"/>
                <argumentType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
            </content>
        </type>
        <type derived="true" id="type.8704541">
            <name>Rel&lt;System.Unicode.BidiPairedBracketTypeId>&amp;</name>
            <content>
                <baseType ref="type.8704533"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705911">
            <name>Rel&lt;System.Unicode.BidiPairedBracketTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704533"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704540">
            <name>Rel&lt;System.Unicode.BidiPairedBracketTypeId>*</name>
            <content>
                <baseType ref="type.8704533"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703050" specialization="true">
            <name>Rel&lt;System.Unicode.BinaryPropertyId></name>
            <content>
                <primaryType ref="class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071"/>
                <argumentType ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
            </content>
        </type>
        <type derived="true" id="type.8703058">
            <name>Rel&lt;System.Unicode.BinaryPropertyId>&amp;</name>
            <content>
                <baseType ref="type.8703050"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705314">
            <name>Rel&lt;System.Unicode.BinaryPropertyId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703050"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703057">
            <name>Rel&lt;System.Unicode.BinaryPropertyId>*</name>
            <content>
                <baseType ref="type.8703050"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703282" specialization="true">
            <name>Rel&lt;System.Unicode.BlockId></name>
            <content>
                <primaryType ref="class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071"/>
                <argumentType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
            </content>
        </type>
        <type derived="true" id="type.8703290">
            <name>Rel&lt;System.Unicode.BlockId>&amp;</name>
            <content>
                <baseType ref="type.8703282"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705419">
            <name>Rel&lt;System.Unicode.BlockId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703282"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703289">
            <name>Rel&lt;System.Unicode.BlockId>*</name>
            <content>
                <baseType ref="type.8703282"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703493" specialization="true">
            <name>Rel&lt;System.Unicode.GeneralCategoryId></name>
            <content>
                <primaryType ref="class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071"/>
                <argumentType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
            </content>
        </type>
        <type derived="true" id="type.8703501">
            <name>Rel&lt;System.Unicode.GeneralCategoryId>&amp;</name>
            <content>
                <baseType ref="type.8703493"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705501">
            <name>Rel&lt;System.Unicode.GeneralCategoryId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703493"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703500">
            <name>Rel&lt;System.Unicode.GeneralCategoryId>*</name>
            <content>
                <baseType ref="type.8703493"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704117" specialization="true">
            <name>Rel&lt;System.Unicode.NumericTypeId></name>
            <content>
                <primaryType ref="class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071"/>
                <argumentType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
            </content>
        </type>
        <type derived="true" id="type.8704125">
            <name>Rel&lt;System.Unicode.NumericTypeId>&amp;</name>
            <content>
                <baseType ref="type.8704117"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705747">
            <name>Rel&lt;System.Unicode.NumericTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704117"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704124">
            <name>Rel&lt;System.Unicode.NumericTypeId>*</name>
            <content>
                <baseType ref="type.8704117"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703909" specialization="true">
            <name>Rel&lt;System.Unicode.ScriptId></name>
            <content>
                <primaryType ref="class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071"/>
                <argumentType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
            </content>
        </type>
        <type derived="true" id="type.8703917">
            <name>Rel&lt;System.Unicode.ScriptId>&amp;</name>
            <content>
                <baseType ref="type.8703909"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705665">
            <name>Rel&lt;System.Unicode.ScriptId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703909"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703916">
            <name>Rel&lt;System.Unicode.ScriptId>*</name>
            <content>
                <baseType ref="type.8703909"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071"/>
                <argumentType ref="8699665"/>
            </content>
        </type>
        <type derived="true" id="type.8700832">
            <name>Rel&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700772">
            <name>Rel&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700682">
            <name>Rel&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700712">
            <name>Rel&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700802">
            <name>Rel&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700742">
            <name>Rel&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700802">
            <name>Rel&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700801">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700741">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700831">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700711">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700831">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700771">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700681">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.class_Rel_T_032D8AAD2ACCC09FF4E660D552EC9D776F3CA84D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Remainder_T_FE01252D1C3D34D2A8358028C0C92616A4A54BE1" specialization="true">
            <name>Remainder&lt;T></name>
            <content>
                <primaryType ref="class_Remainder_T_FE01252D1C3D34D2A8358028C0C92616A4A54BE1"/>
                <argumentType ref="8699634"/>
            </content>
        </type>
        <type id="class_Remainder_53358041EB60B861E44BE13DD6EC18FF95B34F8A">
            <name>Remainder&lt;T></name>
        </type>
        <type derived="true" id="type.8700638">
            <name>Remainder&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Remainder_T_FE01252D1C3D34D2A8358028C0C92616A4A54BE1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700637">
            <name>Remainder&lt;T>*</name>
            <content>
                <baseType ref="type.class_Remainder_T_FE01252D1C3D34D2A8358028C0C92616A4A54BE1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699620">
            <name>Result</name>
        </type>
        <type id="class_Script_B4DC79C213FBE18703FB167088AE40DA330EDFEE">
            <name>Script</name>
        </type>
        <type derived="true" id="type.8700002">
            <name>Script&amp;</name>
            <content>
                <baseType ref="class_Script_B4DC79C213FBE18703FB167088AE40DA330EDFEE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700001">
            <name>Script*</name>
            <content>
                <baseType ref="class_Script_B4DC79C213FBE18703FB167088AE40DA330EDFEE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703996">
            <name>Script*&amp;</name>
            <content>
                <baseType ref="class_Script_B4DC79C213FBE18703FB167088AE40DA330EDFEE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704102">
            <name>Script*&amp;&amp;</name>
            <content>
                <baseType ref="class_Script_B4DC79C213FBE18703FB167088AE40DA330EDFEE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704093">
            <name>Script**</name>
            <content>
                <baseType ref="class_Script_B4DC79C213FBE18703FB167088AE40DA330EDFEE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705653">
            <name>Script**&amp;</name>
            <content>
                <baseType ref="class_Script_B4DC79C213FBE18703FB167088AE40DA330EDFEE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705706">
            <name>Script**&amp;&amp;</name>
            <content>
                <baseType ref="class_Script_B4DC79C213FBE18703FB167088AE40DA330EDFEE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705705">
            <name>Script***</name>
            <content>
                <baseType ref="class_Script_B4DC79C213FBE18703FB167088AE40DA330EDFEE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7">
            <name>ScriptId</name>
        </type>
        <type derived="true" id="type.8703896">
            <name>ScriptId&amp;</name>
            <content>
                <baseType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703897">
            <name>ScriptId&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703895">
            <name>ScriptId*</name>
            <content>
                <baseType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ScriptTable_CEB3F0C6961FADA195D3CEC50AC41CB1955D92CF">
            <name>ScriptTable</name>
        </type>
        <type derived="true" id="type.8700011">
            <name>ScriptTable&amp;</name>
            <content>
                <baseType ref="class_ScriptTable_CEB3F0C6961FADA195D3CEC50AC41CB1955D92CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700010">
            <name>ScriptTable*</name>
            <content>
                <baseType ref="class_ScriptTable_CEB3F0C6961FADA195D3CEC50AC41CB1955D92CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705648">
            <name>ScriptTable*&amp;</name>
            <content>
                <baseType ref="class_ScriptTable_CEB3F0C6961FADA195D3CEC50AC41CB1955D92CF"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705647">
            <name>ScriptTable**</name>
            <content>
                <baseType ref="class_ScriptTable_CEB3F0C6961FADA195D3CEC50AC41CB1955D92CF"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21" specialization="true">
            <name>SelectFirst&lt;K, T></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="8699693"/>
                <argumentType ref="8699694"/>
            </content>
        </type>
        <type derived="true" id="type.8700960">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701039">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701038">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700959">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7" specialization="true">
            <name>SelectFirst&lt;Key, Value></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="8699750"/>
                <argumentType ref="8699751"/>
            </content>
        </type>
        <type derived="true" id="type.8701633">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701632">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703798" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, Age*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8699988"/>
            </content>
        </type>
        <type derived="true" id="type.8703807">
            <name>SelectFirst&lt;String&lt;char>, Age*>&amp;</name>
            <content>
                <baseType ref="type.8703798"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705607">
            <name>SelectFirst&lt;String&lt;char>, Age*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703798"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703806">
            <name>SelectFirst&lt;String&lt;char>, Age*>*</name>
            <content>
                <baseType ref="type.8703798"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705617">
            <name>SelectFirst&lt;String&lt;char>, Age*>*&amp;</name>
            <content>
                <baseType ref="type.8703798"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705616">
            <name>SelectFirst&lt;String&lt;char>, Age*>**</name>
            <content>
                <baseType ref="type.8703798"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704838" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, AliasType*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700059"/>
            </content>
        </type>
        <type derived="true" id="type.8704847">
            <name>SelectFirst&lt;String&lt;char>, AliasType*>&amp;</name>
            <content>
                <baseType ref="type.8704838"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706017">
            <name>SelectFirst&lt;String&lt;char>, AliasType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704838"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704846">
            <name>SelectFirst&lt;String&lt;char>, AliasType*>*</name>
            <content>
                <baseType ref="type.8704838"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706027">
            <name>SelectFirst&lt;String&lt;char>, AliasType*>*&amp;</name>
            <content>
                <baseType ref="type.8704838"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706026">
            <name>SelectFirst&lt;String&lt;char>, AliasType*>**</name>
            <content>
                <baseType ref="type.8704838"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704422" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, BidiClass*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700033"/>
            </content>
        </type>
        <type derived="true" id="type.8704431">
            <name>SelectFirst&lt;String&lt;char>, BidiClass*>&amp;</name>
            <content>
                <baseType ref="type.8704422"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705853">
            <name>SelectFirst&lt;String&lt;char>, BidiClass*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704422"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704430">
            <name>SelectFirst&lt;String&lt;char>, BidiClass*>*</name>
            <content>
                <baseType ref="type.8704422"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705863">
            <name>SelectFirst&lt;String&lt;char>, BidiClass*>*&amp;</name>
            <content>
                <baseType ref="type.8704422"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705862">
            <name>SelectFirst&lt;String&lt;char>, BidiClass*>**</name>
            <content>
                <baseType ref="type.8704422"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704630" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, BidiPairedBracketType*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700046"/>
            </content>
        </type>
        <type derived="true" id="type.8704639">
            <name>SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>&amp;</name>
            <content>
                <baseType ref="type.8704630"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705935">
            <name>SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704630"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704638">
            <name>SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>*</name>
            <content>
                <baseType ref="type.8704630"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705945">
            <name>SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>*&amp;</name>
            <content>
                <baseType ref="type.8704630"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705944">
            <name>SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>**</name>
            <content>
                <baseType ref="type.8704630"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703168" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, BinaryProperty*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8699958"/>
            </content>
        </type>
        <type derived="true" id="type.8703177">
            <name>SelectFirst&lt;String&lt;char>, BinaryProperty*>&amp;</name>
            <content>
                <baseType ref="type.8703168"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705338">
            <name>SelectFirst&lt;String&lt;char>, BinaryProperty*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703168"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703176">
            <name>SelectFirst&lt;String&lt;char>, BinaryProperty*>*</name>
            <content>
                <baseType ref="type.8703168"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705364">
            <name>SelectFirst&lt;String&lt;char>, BinaryProperty*>*&amp;</name>
            <content>
                <baseType ref="type.8703168"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705363">
            <name>SelectFirst&lt;String&lt;char>, BinaryProperty*>**</name>
            <content>
                <baseType ref="type.8703168"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703379" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, Block*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8699968"/>
            </content>
        </type>
        <type derived="true" id="type.8703388">
            <name>SelectFirst&lt;String&lt;char>, Block*>&amp;</name>
            <content>
                <baseType ref="type.8703379"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705443">
            <name>SelectFirst&lt;String&lt;char>, Block*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703379"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703387">
            <name>SelectFirst&lt;String&lt;char>, Block*>*</name>
            <content>
                <baseType ref="type.8703379"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705453">
            <name>SelectFirst&lt;String&lt;char>, Block*>*&amp;</name>
            <content>
                <baseType ref="type.8703379"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705452">
            <name>SelectFirst&lt;String&lt;char>, Block*>**</name>
            <content>
                <baseType ref="type.8703379"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703590" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, GeneralCategory*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8699978"/>
            </content>
        </type>
        <type derived="true" id="type.8703599">
            <name>SelectFirst&lt;String&lt;char>, GeneralCategory*>&amp;</name>
            <content>
                <baseType ref="type.8703590"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705525">
            <name>SelectFirst&lt;String&lt;char>, GeneralCategory*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703590"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703598">
            <name>SelectFirst&lt;String&lt;char>, GeneralCategory*>*</name>
            <content>
                <baseType ref="type.8703590"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705535">
            <name>SelectFirst&lt;String&lt;char>, GeneralCategory*>*&amp;</name>
            <content>
                <baseType ref="type.8703590"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705534">
            <name>SelectFirst&lt;String&lt;char>, GeneralCategory*>**</name>
            <content>
                <baseType ref="type.8703590"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704214" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, NumericType*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700020"/>
            </content>
        </type>
        <type derived="true" id="type.8704223">
            <name>SelectFirst&lt;String&lt;char>, NumericType*>&amp;</name>
            <content>
                <baseType ref="type.8704214"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705771">
            <name>SelectFirst&lt;String&lt;char>, NumericType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704214"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704222">
            <name>SelectFirst&lt;String&lt;char>, NumericType*>*</name>
            <content>
                <baseType ref="type.8704214"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705781">
            <name>SelectFirst&lt;String&lt;char>, NumericType*>*&amp;</name>
            <content>
                <baseType ref="type.8704214"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705780">
            <name>SelectFirst&lt;String&lt;char>, NumericType*>**</name>
            <content>
                <baseType ref="type.8704214"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704006" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, Script*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700001"/>
            </content>
        </type>
        <type derived="true" id="type.8704015">
            <name>SelectFirst&lt;String&lt;char>, Script*>&amp;</name>
            <content>
                <baseType ref="type.8704006"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705689">
            <name>SelectFirst&lt;String&lt;char>, Script*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704006"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704014">
            <name>SelectFirst&lt;String&lt;char>, Script*>*</name>
            <content>
                <baseType ref="type.8704006"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705699">
            <name>SelectFirst&lt;String&lt;char>, Script*>*&amp;</name>
            <content>
                <baseType ref="type.8704006"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705698">
            <name>SelectFirst&lt;String&lt;char>, Script*>**</name>
            <content>
                <baseType ref="type.8704006"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703722" specialization="true">
            <name>SelectFirst&lt;System.Unicode.AgeId, Age*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                <argumentType ref="type.8699988"/>
            </content>
        </type>
        <type derived="true" id="type.8703731">
            <name>SelectFirst&lt;System.Unicode.AgeId, Age*>&amp;</name>
            <content>
                <baseType ref="type.8703722"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705572">
            <name>SelectFirst&lt;System.Unicode.AgeId, Age*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703722"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703730">
            <name>SelectFirst&lt;System.Unicode.AgeId, Age*>*</name>
            <content>
                <baseType ref="type.8703722"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705598">
            <name>SelectFirst&lt;System.Unicode.AgeId, Age*>*&amp;</name>
            <content>
                <baseType ref="type.8703722"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705597">
            <name>SelectFirst&lt;System.Unicode.AgeId, Age*>**</name>
            <content>
                <baseType ref="type.8703722"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704762" specialization="true">
            <name>SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                <argumentType ref="type.8700059"/>
            </content>
        </type>
        <type derived="true" id="type.8704771">
            <name>SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>&amp;</name>
            <content>
                <baseType ref="type.8704762"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705982">
            <name>SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704762"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704770">
            <name>SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>*</name>
            <content>
                <baseType ref="type.8704762"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706008">
            <name>SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>*&amp;</name>
            <content>
                <baseType ref="type.8704762"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706007">
            <name>SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>**</name>
            <content>
                <baseType ref="type.8704762"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704346" specialization="true">
            <name>SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                <argumentType ref="type.8700033"/>
            </content>
        </type>
        <type derived="true" id="type.8704355">
            <name>SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>&amp;</name>
            <content>
                <baseType ref="type.8704346"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705818">
            <name>SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704346"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704354">
            <name>SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>*</name>
            <content>
                <baseType ref="type.8704346"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705844">
            <name>SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>*&amp;</name>
            <content>
                <baseType ref="type.8704346"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705843">
            <name>SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>**</name>
            <content>
                <baseType ref="type.8704346"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704554" specialization="true">
            <name>SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                <argumentType ref="type.8700046"/>
            </content>
        </type>
        <type derived="true" id="type.8704563">
            <name>SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;</name>
            <content>
                <baseType ref="type.8704554"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705900">
            <name>SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704554"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704562">
            <name>SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*</name>
            <content>
                <baseType ref="type.8704554"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705926">
            <name>SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*&amp;</name>
            <content>
                <baseType ref="type.8704554"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705925">
            <name>SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>**</name>
            <content>
                <baseType ref="type.8704554"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703071" specialization="true">
            <name>SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                <argumentType ref="type.8699958"/>
            </content>
        </type>
        <type derived="true" id="type.8703080">
            <name>SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;</name>
            <content>
                <baseType ref="type.8703071"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705303">
            <name>SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703071"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703079">
            <name>SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*</name>
            <content>
                <baseType ref="type.8703071"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705329">
            <name>SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*&amp;</name>
            <content>
                <baseType ref="type.8703071"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705328">
            <name>SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>**</name>
            <content>
                <baseType ref="type.8703071"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703303" specialization="true">
            <name>SelectFirst&lt;System.Unicode.BlockId, Block*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                <argumentType ref="type.8699968"/>
            </content>
        </type>
        <type derived="true" id="type.8703312">
            <name>SelectFirst&lt;System.Unicode.BlockId, Block*>&amp;</name>
            <content>
                <baseType ref="type.8703303"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705408">
            <name>SelectFirst&lt;System.Unicode.BlockId, Block*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703303"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703311">
            <name>SelectFirst&lt;System.Unicode.BlockId, Block*>*</name>
            <content>
                <baseType ref="type.8703303"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705434">
            <name>SelectFirst&lt;System.Unicode.BlockId, Block*>*&amp;</name>
            <content>
                <baseType ref="type.8703303"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705433">
            <name>SelectFirst&lt;System.Unicode.BlockId, Block*>**</name>
            <content>
                <baseType ref="type.8703303"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703514" specialization="true">
            <name>SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                <argumentType ref="type.8699978"/>
            </content>
        </type>
        <type derived="true" id="type.8703523">
            <name>SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;</name>
            <content>
                <baseType ref="type.8703514"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705490">
            <name>SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703514"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703522">
            <name>SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*</name>
            <content>
                <baseType ref="type.8703514"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705516">
            <name>SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*&amp;</name>
            <content>
                <baseType ref="type.8703514"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705515">
            <name>SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>**</name>
            <content>
                <baseType ref="type.8703514"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704138" specialization="true">
            <name>SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                <argumentType ref="type.8700020"/>
            </content>
        </type>
        <type derived="true" id="type.8704147">
            <name>SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>&amp;</name>
            <content>
                <baseType ref="type.8704138"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705736">
            <name>SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704138"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704146">
            <name>SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>*</name>
            <content>
                <baseType ref="type.8704138"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705762">
            <name>SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>*&amp;</name>
            <content>
                <baseType ref="type.8704138"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705761">
            <name>SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>**</name>
            <content>
                <baseType ref="type.8704138"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703930" specialization="true">
            <name>SelectFirst&lt;System.Unicode.ScriptId, Script*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                <argumentType ref="type.8700001"/>
            </content>
        </type>
        <type derived="true" id="type.8703939">
            <name>SelectFirst&lt;System.Unicode.ScriptId, Script*>&amp;</name>
            <content>
                <baseType ref="type.8703930"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705654">
            <name>SelectFirst&lt;System.Unicode.ScriptId, Script*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703930"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703938">
            <name>SelectFirst&lt;System.Unicode.ScriptId, Script*>*</name>
            <content>
                <baseType ref="type.8703930"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705680">
            <name>SelectFirst&lt;System.Unicode.ScriptId, Script*>*&amp;</name>
            <content>
                <baseType ref="type.8703930"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705679">
            <name>SelectFirst&lt;System.Unicode.ScriptId, Script*>**</name>
            <content>
                <baseType ref="type.8703930"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_SelectFirst_27F778CB2274DCA3B8B0B9B7CC946D951524507A">
            <name>SelectFirst&lt;T, U></name>
        </type>
        <type id="type.class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282" specialization="true">
            <name>SelectFirst&lt;T, U></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="8699779"/>
                <argumentType ref="8699780"/>
            </content>
        </type>
        <type derived="true" id="type.8701753">
            <name>SelectFirst&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701752">
            <name>SelectFirst&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_SelectSecond_84517FB334E6245CFF8B670860005E97B70C1C17">
            <name>SelectSecond&lt;T, U></name>
        </type>
        <type id="type.class_SelectSecond_T_U_6B42DA73E58D1044102625EF244FA1CB02A13170" specialization="true">
            <name>SelectSecond&lt;T, U></name>
            <content>
                <primaryType ref="class_SelectSecond_T_U_6B42DA73E58D1044102625EF244FA1CB02A13170"/>
                <argumentType ref="8699782"/>
                <argumentType ref="8699783"/>
            </content>
        </type>
        <type derived="true" id="type.8701768">
            <name>SelectSecond&lt;T, U>&amp;</name>
            <content>
                <baseType ref="type.class_SelectSecond_T_U_6B42DA73E58D1044102625EF244FA1CB02A13170"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701767">
            <name>SelectSecond&lt;T, U>*</name>
            <content>
                <baseType ref="type.class_SelectSecond_T_U_6B42DA73E58D1044102625EF244FA1CB02A13170"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F" specialization="true">
            <name>Set&lt;T, C></name>
            <content>
                <primaryType ref="class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
                <argumentType ref="8699837"/>
                <argumentType ref="8699838"/>
            </content>
        </type>
        <type id="class_Set_34FB591F9EA26A17F0500DF856A5FA48BF133C1E">
            <name>Set&lt;T, C></name>
        </type>
        <type derived="true" id="type.8702052">
            <name>Set&lt;T, C>&amp;</name>
            <content>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701995">
            <name>Set&lt;T, C>&amp;</name>
            <content>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701938">
            <name>Set&lt;T, C>&amp;</name>
            <content>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702052">
            <name>Set&lt;T, C>&amp;</name>
            <content>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701937">
            <name>Set&lt;T, C>*</name>
            <content>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701994">
            <name>Set&lt;T, C>*</name>
            <content>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702051">
            <name>Set&lt;T, C>*</name>
            <content>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_ShareableFromThis_T_77C6ADA1F44650830C3217EE01FADA865F0D2818" specialization="true">
            <name>ShareableFromThis&lt;T></name>
            <content>
                <primaryType ref="class_ShareableFromThis_T_77C6ADA1F44650830C3217EE01FADA865F0D2818"/>
                <argumentType ref="8699870"/>
            </content>
        </type>
        <type id="class_ShareableFromThis_2D69C8E4B239601DB86E8F95BAF922C508D6C4E8">
            <name>ShareableFromThis&lt;T></name>
        </type>
        <type derived="true" id="type.8702512">
            <name>ShareableFromThis&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_ShareableFromThis_T_77C6ADA1F44650830C3217EE01FADA865F0D2818"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702576">
            <name>ShareableFromThis&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_ShareableFromThis_T_77C6ADA1F44650830C3217EE01FADA865F0D2818"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702511">
            <name>ShareableFromThis&lt;T>*</name>
            <content>
                <baseType ref="type.class_ShareableFromThis_T_77C6ADA1F44650830C3217EE01FADA865F0D2818"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702575">
            <name>ShareableFromThis&lt;T>*</name>
            <content>
                <baseType ref="type.class_ShareableFromThis_T_77C6ADA1F44650830C3217EE01FADA865F0D2818"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700174" specialization="true">
            <name>SharedCount&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.8700176">
            <name>SharedCount&lt;System.IO.ByteStream>&amp;</name>
            <content>
                <baseType ref="type.8700174"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700187">
            <name>SharedCount&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700174"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700175">
            <name>SharedCount&lt;System.IO.ByteStream>*</name>
            <content>
                <baseType ref="type.8700174"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076" specialization="true">
            <name>SharedCount&lt;T></name>
            <content>
                <primaryType ref="class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <argumentType ref="8699856"/>
            </content>
        </type>
        <type id="class_SharedCount_00E6CEBCEEB440F937B1DFDB99ACB04EB11DA036">
            <name>SharedCount&lt;T></name>
        </type>
        <type id="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076" specialization="true">
            <name>SharedCount&lt;T></name>
            <content>
                <primaryType ref="class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <argumentType ref="8699854"/>
            </content>
        </type>
        <type derived="true" id="type.8702585">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702494">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702299">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702335">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702286">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702264">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702139">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702371">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702161">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702494">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702521">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702407">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702242">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702117">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702551">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702183">
            <name>SharedCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702419">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702347">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702290">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.235">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.241">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702173">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.257">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702419">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702563">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702195">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702597">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702268">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.225">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702151">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702383">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.263">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702493">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702406">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702241">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702370">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702520">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702334">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702285">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702116">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702584">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702160">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702550">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702138">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702182">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702263">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702493">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702298">
            <name>SharedCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1" specialization="true">
            <name>SharedCount&lt;U></name>
            <content>
                <primaryType ref="class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <argumentType ref="8699853"/>
            </content>
        </type>
        <type derived="true" id="type.8702205">
            <name>SharedCount&lt;U>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702617">
            <name>SharedCount&lt;U>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702443">
            <name>SharedCount&lt;U>&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702217">
            <name>SharedCount&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702455">
            <name>SharedCount&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702627">
            <name>SharedCount&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702616">
            <name>SharedCount&lt;U>*</name>
            <content>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702442">
            <name>SharedCount&lt;U>*</name>
            <content>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702204">
            <name>SharedCount&lt;U>*</name>
            <content>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700168" specialization="true">
            <name>SharedPtr&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.8700170">
            <name>SharedPtr&lt;System.IO.ByteStream>&amp;</name>
            <content>
                <baseType ref="type.8700168"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700195">
            <name>SharedPtr&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700168"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700169">
            <name>SharedPtr&lt;System.IO.ByteStream>*</name>
            <content>
                <baseType ref="type.8700168"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F" specialization="true">
            <name>SharedPtr&lt;T></name>
            <content>
                <primaryType ref="class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="8699870"/>
            </content>
        </type>
        <type id="class_SharedPtr_D6F983124C9CC6AA3788F83673980F30250FFC3D">
            <name>SharedPtr&lt;T></name>
        </type>
        <type id="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F" specialization="true">
            <name>SharedPtr&lt;T></name>
            <content>
                <primaryType ref="class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="8699861"/>
            </content>
        </type>
        <type derived="true" id="type.8702293">
            <name>SharedPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702329">
            <name>SharedPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702579">
            <name>SharedPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702515">
            <name>SharedPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702401">
            <name>SharedPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702365">
            <name>SharedPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702579">
            <name>SharedPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702501">
            <name>SharedPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702391">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702605">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.243">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.265">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702427">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.258">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702355">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702391">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702578">
            <name>SharedPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702364">
            <name>SharedPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702292">
            <name>SharedPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702328">
            <name>SharedPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702500">
            <name>SharedPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702400">
            <name>SharedPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702364">
            <name>SharedPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702514">
            <name>SharedPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SharedPtr_U_19F1777EF4935F63CFF924FFE6F2925770367C61" specialization="true">
            <name>SharedPtr&lt;U></name>
            <content>
                <primaryType ref="class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="8699863"/>
            </content>
        </type>
        <type derived="true" id="type.8702437">
            <name>SharedPtr&lt;U>&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_U_19F1777EF4935F63CFF924FFE6F2925770367C61"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702463">
            <name>SharedPtr&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_U_19F1777EF4935F63CFF924FFE6F2925770367C61"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702436">
            <name>SharedPtr&lt;U>*</name>
            <content>
                <baseType ref="type.class_SharedPtr_U_19F1777EF4935F63CFF924FFE6F2925770367C61"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ShiftLeft_E704922BD5628C0FEF77F2D953D4DEE28E35F81C">
            <name>ShiftLeft&lt;T></name>
        </type>
        <type id="type.class_ShiftLeft_T_DAB649CF57196205F80F4D84BB4327636B5ABCF0" specialization="true">
            <name>ShiftLeft&lt;T></name>
            <content>
                <primaryType ref="class_ShiftLeft_T_DAB649CF57196205F80F4D84BB4327636B5ABCF0"/>
                <argumentType ref="8699689"/>
            </content>
        </type>
        <type derived="true" id="type.8700929">
            <name>ShiftLeft&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_ShiftLeft_T_DAB649CF57196205F80F4D84BB4327636B5ABCF0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700928">
            <name>ShiftLeft&lt;T>*</name>
            <content>
                <baseType ref="type.class_ShiftLeft_T_DAB649CF57196205F80F4D84BB4327636B5ABCF0"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_ShiftRight_T_1954DF2ABCC6CB200031ECB8BB6DB1F536A47027" specialization="true">
            <name>ShiftRight&lt;T></name>
            <content>
                <primaryType ref="class_ShiftRight_T_1954DF2ABCC6CB200031ECB8BB6DB1F536A47027"/>
                <argumentType ref="8699691"/>
            </content>
        </type>
        <type id="class_ShiftRight_376722E3A352CA5A72D40AB2ADAE885722B7447B">
            <name>ShiftRight&lt;T></name>
        </type>
        <type derived="true" id="type.8700939">
            <name>ShiftRight&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_ShiftRight_T_1954DF2ABCC6CB200031ECB8BB6DB1F536A47027"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700938">
            <name>ShiftRight&lt;T>*</name>
            <content>
                <baseType ref="type.class_ShiftRight_T_1954DF2ABCC6CB200031ECB8BB6DB1F536A47027"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Stack_T_44313E678C6CD0E8DB3743953B65AA105D55A963" specialization="true">
            <name>Stack&lt;T></name>
            <content>
                <primaryType ref="class_Stack_T_44313E678C6CD0E8DB3743953B65AA105D55A963"/>
                <argumentType ref="8699873"/>
            </content>
        </type>
        <type id="class_Stack_D7EC5C667BC1B24C3801E2F7F47969CC2A9CB8AB">
            <name>Stack&lt;T></name>
        </type>
        <type derived="true" id="type.8702640">
            <name>Stack&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_Stack_T_44313E678C6CD0E8DB3743953B65AA105D55A963"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702639">
            <name>Stack&lt;T>*</name>
            <content>
                <baseType ref="type.class_Stack_T_44313E678C6CD0E8DB3743953B65AA105D55A963"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C">
            <name>StaticInitCriticalSection</name>
        </type>
        <type derived="true" id="type.376">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_StreamReader_8A8267CD81BA8B198AF295474A8CB0B2DFBB7B57">
            <name>StreamReader</name>
        </type>
        <type derived="true" id="type.8699888">
            <name>StreamReader&amp;</name>
            <content>
                <baseType ref="class_StreamReader_8A8267CD81BA8B198AF295474A8CB0B2DFBB7B57"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700395">
            <name>StreamReader&amp;&amp;</name>
            <content>
                <baseType ref="class_StreamReader_8A8267CD81BA8B198AF295474A8CB0B2DFBB7B57"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699887">
            <name>StreamReader*</name>
            <content>
                <baseType ref="class_StreamReader_8A8267CD81BA8B198AF295474A8CB0B2DFBB7B57"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311">
            <name>StreamWriter</name>
        </type>
        <type derived="true" id="type.8699894">
            <name>StreamWriter&amp;</name>
            <content>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700396">
            <name>StreamWriter&amp;&amp;</name>
            <content>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699893">
            <name>StreamWriter*</name>
            <content>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="8699902"/>
            </content>
        </type>
        <type id="class_String_A8B6185398540D25A41824E9ABD40BD0048B2E9A">
            <name>String&lt;CharT></name>
        </type>
        <type id="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="8699900"/>
            </content>
        </type>
        <type derived="true" id="type.8702953">
            <name>String&lt;CharT>&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702671">
            <name>String&lt;CharT>&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702765">
            <name>String&lt;CharT>&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702859">
            <name>String&lt;CharT>&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702812">
            <name>String&lt;CharT>&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702953">
            <name>String&lt;CharT>&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702718">
            <name>String&lt;CharT>&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702909">
            <name>String&lt;CharT>&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702882">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.277">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702835">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702976">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702788">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702929">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702741">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702976">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702858">
            <name>String&lt;CharT>*</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702670">
            <name>String&lt;CharT>*</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702811">
            <name>String&lt;CharT>*</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702952">
            <name>String&lt;CharT>*</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702717">
            <name>String&lt;CharT>*</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702764">
            <name>String&lt;CharT>*</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702908">
            <name>String&lt;CharT>*</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702858">
            <name>String&lt;CharT>*</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700206" specialization="true">
            <name>String&lt;char></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8699076"/>
            </content>
        </type>
        <type derived="true" id="type.8700208">
            <name>String&lt;char>&amp;</name>
            <content>
                <baseType ref="type.8700206"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700227">
            <name>String&lt;char>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700206"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700207">
            <name>String&lt;char>*</name>
            <content>
                <baseType ref="type.8700206"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705238">
            <name>String&lt;char>*&amp;</name>
            <content>
                <baseType ref="type.8700206"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705237">
            <name>String&lt;char>**</name>
            <content>
                <baseType ref="type.8700206"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700294" specialization="true">
            <name>String&lt;uchar></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8699078"/>
            </content>
        </type>
        <type derived="true" id="type.8700296">
            <name>String&lt;uchar>&amp;</name>
            <content>
                <baseType ref="type.8700294"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700317">
            <name>String&lt;uchar>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700294"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700295">
            <name>String&lt;uchar>*</name>
            <content>
                <baseType ref="type.8700294"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700249" specialization="true">
            <name>String&lt;wchar></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8699077"/>
            </content>
        </type>
        <type derived="true" id="type.8700251">
            <name>String&lt;wchar>&amp;</name>
            <content>
                <baseType ref="type.8700249"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700272">
            <name>String&lt;wchar>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700249"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700250">
            <name>String&lt;wchar>*</name>
            <content>
                <baseType ref="type.8700249"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8700164">
            <name>System.Ascii.CharClass[256]</name>
        </type>
        <type derived="true" id="type.8705157">
            <name>System.Ascii.CharClass[256]&amp;</name>
            <content>
                <baseType ref="8700164"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705156">
            <name>System.Ascii.CharClass[256]*</name>
            <content>
                <baseType ref="8700164"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8700105">
            <name>T</name>
        </type>
        <type derived="true" id="type.8702559">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699869"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702029">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699837"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.129">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699694"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702086">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699839"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702529">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699868"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702147">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699851"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.79">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702191">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699854"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.141">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699711"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.143">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699713"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700455">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699607"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701972">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699835"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.151">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699730"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.81">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699604"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702111">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699848"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701442">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699739"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701096">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699698"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701376">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699732"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702415">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699864"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702169">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699852"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701795">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699789"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701193">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699705"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701596">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699745"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702593">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699870"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702125">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699850"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705135">
            <name>T&amp;</name>
            <content>
                <baseType ref="8700105"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705147">
            <name>T&amp;</name>
            <content>
                <baseType ref="8700106"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701412">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699735"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702379">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699862"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701119">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699702"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701569">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699744"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705135">
            <name>T&amp;</name>
            <content>
                <baseType ref="8700105"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.203">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699822"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701542">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699743"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702343">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699861"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700542">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699613"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705123">
            <name>T&amp;</name>
            <content>
                <baseType ref="8700104"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702487">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699866"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701890">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699825"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702643">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699873"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.201">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699820"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701295">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699717"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702279">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699858"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700402">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699556"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700403">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699557"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700404">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699558"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700112">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699261"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702307">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699860"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700405">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699559"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701502">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699741"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702257">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699857"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702235">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699856"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700510">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699612"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700478">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699611"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701472">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699740"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.157">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="8699743"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701579">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="8699744"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.271">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="8699873"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701935">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="8699833"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.189">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="8699789"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701935">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="8699833"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701606">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="8699745"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702168">
            <name>T*</name>
            <content>
                <baseType ref="8699852"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702088">
            <name>T*</name>
            <content>
                <baseType ref="8699839"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702146">
            <name>T*</name>
            <content>
                <baseType ref="8699851"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701194">
            <name>T*</name>
            <content>
                <baseType ref="8699705"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702110">
            <name>T*</name>
            <content>
                <baseType ref="8699848"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702486">
            <name>T*</name>
            <content>
                <baseType ref="8699866"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705134">
            <name>T*</name>
            <content>
                <baseType ref="8700105"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702414">
            <name>T*</name>
            <content>
                <baseType ref="8699864"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701597">
            <name>T*</name>
            <content>
                <baseType ref="8699745"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701796">
            <name>T*</name>
            <content>
                <baseType ref="8699789"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705146">
            <name>T*</name>
            <content>
                <baseType ref="8700106"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701570">
            <name>T*</name>
            <content>
                <baseType ref="8699744"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701413">
            <name>T*</name>
            <content>
                <baseType ref="8699735"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705134">
            <name>T*</name>
            <content>
                <baseType ref="8700105"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702558">
            <name>T*</name>
            <content>
                <baseType ref="8699869"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702278">
            <name>T*</name>
            <content>
                <baseType ref="8699858"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700480">
            <name>T*</name>
            <content>
                <baseType ref="8699611"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702234">
            <name>T*</name>
            <content>
                <baseType ref="8699856"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700512">
            <name>T*</name>
            <content>
                <baseType ref="8699612"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700544">
            <name>T*</name>
            <content>
                <baseType ref="8699613"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701974">
            <name>T*</name>
            <content>
                <baseType ref="8699835"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701443">
            <name>T*</name>
            <content>
                <baseType ref="8699739"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701473">
            <name>T*</name>
            <content>
                <baseType ref="8699740"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702592">
            <name>T*</name>
            <content>
                <baseType ref="8699870"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702528">
            <name>T*</name>
            <content>
                <baseType ref="8699868"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702378">
            <name>T*</name>
            <content>
                <baseType ref="8699862"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701120">
            <name>T*</name>
            <content>
                <baseType ref="8699702"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702031">
            <name>T*</name>
            <content>
                <baseType ref="8699837"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702342">
            <name>T*</name>
            <content>
                <baseType ref="8699861"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701503">
            <name>T*</name>
            <content>
                <baseType ref="8699741"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702124">
            <name>T*</name>
            <content>
                <baseType ref="8699850"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702306">
            <name>T*</name>
            <content>
                <baseType ref="8699860"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702659">
            <name>T*</name>
            <content>
                <baseType ref="8699873"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701543">
            <name>T*</name>
            <content>
                <baseType ref="8699743"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701377">
            <name>T*</name>
            <content>
                <baseType ref="8699732"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702190">
            <name>T*</name>
            <content>
                <baseType ref="8699854"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705122">
            <name>T*</name>
            <content>
                <baseType ref="8700104"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702256">
            <name>T*</name>
            <content>
                <baseType ref="8699857"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_Thread_805238682CDC09B4D1BB5C11ACA935F47C73BA4F">
            <name>Thread</name>
        </type>
        <type derived="true" id="type.8699924">
            <name>Thread&amp;</name>
            <content>
                <baseType ref="class_Thread_805238682CDC09B4D1BB5C11ACA935F47C73BA4F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703023">
            <name>Thread&amp;&amp;</name>
            <content>
                <baseType ref="class_Thread_805238682CDC09B4D1BB5C11ACA935F47C73BA4F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699923">
            <name>Thread*</name>
            <content>
                <baseType ref="class_Thread_805238682CDC09B4D1BB5C11ACA935F47C73BA4F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699915">
            <name>ThreadStartFunction</name>
        </type>
        <type derived="true" id="type.8703001">
            <name>ThreadStartFunction&amp;</name>
            <content>
                <baseType ref="8699915"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703002">
            <name>ThreadStartFunction&amp;&amp;</name>
            <content>
                <baseType ref="8699915"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703000">
            <name>ThreadStartFunction*</name>
            <content>
                <baseType ref="8699915"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699917">
            <name>ThreadStartMethod</name>
        </type>
        <type derived="true" id="type.8703009">
            <name>ThreadStartMethod&amp;</name>
            <content>
                <baseType ref="8699917"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703012">
            <name>ThreadStartMethod&amp;&amp;</name>
            <content>
                <baseType ref="8699917"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703008">
            <name>ThreadStartMethod*</name>
            <content>
                <baseType ref="8699917"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670">
            <name>ThreadingException</name>
        </type>
        <type derived="true" id="type.8699921">
            <name>ThreadingException&amp;</name>
            <content>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703022">
            <name>ThreadingException&amp;&amp;</name>
            <content>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699920">
            <name>ThreadingException*</name>
            <content>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_TimePoint_BE09785FA47D4049B051C2D868BEEED92062875C">
            <name>TimePoint</name>
        </type>
        <type derived="true" id="type.8699930">
            <name>TimePoint&amp;</name>
            <content>
                <baseType ref="class_TimePoint_BE09785FA47D4049B051C2D868BEEED92062875C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703024">
            <name>TimePoint&amp;&amp;</name>
            <content>
                <baseType ref="class_TimePoint_BE09785FA47D4049B051C2D868BEEED92062875C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699929">
            <name>TimePoint*</name>
            <content>
                <baseType ref="class_TimePoint_BE09785FA47D4049B051C2D868BEEED92062875C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699871">
            <name>U</name>
        </type>
        <type derived="true" id="type.8702451">
            <name>U&amp;</name>
            <content>
                <baseType ref="8699863"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702213">
            <name>U&amp;</name>
            <content>
                <baseType ref="8699853"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702451">
            <name>U&amp;</name>
            <content>
                <baseType ref="8699863"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702614">
            <name>U&amp;</name>
            <content>
                <baseType ref="8699871"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702613">
            <name>U*</name>
            <content>
                <baseType ref="8699871"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702450">
            <name>U*</name>
            <content>
                <baseType ref="8699863"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702212">
            <name>U*</name>
            <content>
                <baseType ref="8699853"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_UnaryFun_14ECE60479129203D732B7F7CF59E1797DAF518F">
            <name>UnaryFun&lt;Argument, Result></name>
        </type>
        <type id="type.class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646" specialization="true">
            <name>UnaryFun&lt;Argument, Result></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="8699615"/>
                <argumentType ref="8699616"/>
            </content>
        </type>
        <type derived="true" id="type.8700555">
            <name>UnaryFun&lt;Argument, Result>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700554">
            <name>UnaryFun&lt;Argument, Result>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_UnaryFun_Argument_bool_4ABF8E4B6DF957D2063F0D3BDE00A838373AC968" specialization="true">
            <name>UnaryFun&lt;Argument, bool></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="8699636"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8700642">
            <name>UnaryFun&lt;Argument, bool>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Argument_bool_4ABF8E4B6DF957D2063F0D3BDE00A838373AC968"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700641">
            <name>UnaryFun&lt;Argument, bool>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Argument_bool_4ABF8E4B6DF957D2063F0D3BDE00A838373AC968"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D" specialization="true">
            <name>UnaryFun&lt;Pair&lt;K, T>, K></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="8699697"/>
            </content>
        </type>
        <type derived="true" id="type.8700957">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701036">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701035">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700956">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701035">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF" specialization="true">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="8699750"/>
            </content>
        </type>
        <type derived="true" id="type.8701630">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701629">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703802" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Age*>, String&lt;char>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8703795"/>
                <argumentType ref="type.8700206"/>
            </content>
        </type>
        <type derived="true" id="type.8703804">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Age*>, String&lt;char>>&amp;</name>
            <content>
                <baseType ref="type.8703802"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705608">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Age*>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703802"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703803">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Age*>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.8703802"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704842" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, AliasType*>, String&lt;char>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8704835"/>
                <argumentType ref="type.8700206"/>
            </content>
        </type>
        <type derived="true" id="type.8704844">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, AliasType*>, String&lt;char>>&amp;</name>
            <content>
                <baseType ref="type.8704842"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706018">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, AliasType*>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704842"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704843">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, AliasType*>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.8704842"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704426" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BidiClass*>, String&lt;char>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8704419"/>
                <argumentType ref="type.8700206"/>
            </content>
        </type>
        <type derived="true" id="type.8704428">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BidiClass*>, String&lt;char>>&amp;</name>
            <content>
                <baseType ref="type.8704426"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705854">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BidiClass*>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704426"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704427">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BidiClass*>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.8704426"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704634" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, String&lt;char>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8704627"/>
                <argumentType ref="type.8700206"/>
            </content>
        </type>
        <type derived="true" id="type.8704636">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, String&lt;char>>&amp;</name>
            <content>
                <baseType ref="type.8704634"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705936">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704634"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704635">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.8704634"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703172" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BinaryProperty*>, String&lt;char>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8703165"/>
                <argumentType ref="type.8700206"/>
            </content>
        </type>
        <type derived="true" id="type.8703174">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BinaryProperty*>, String&lt;char>>&amp;</name>
            <content>
                <baseType ref="type.8703172"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705339">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BinaryProperty*>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703172"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703173">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BinaryProperty*>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.8703172"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703383" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Block*>, String&lt;char>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8703376"/>
                <argumentType ref="type.8700206"/>
            </content>
        </type>
        <type derived="true" id="type.8703385">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Block*>, String&lt;char>>&amp;</name>
            <content>
                <baseType ref="type.8703383"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705444">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Block*>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703383"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703384">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Block*>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.8703383"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703594" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, GeneralCategory*>, String&lt;char>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8703587"/>
                <argumentType ref="type.8700206"/>
            </content>
        </type>
        <type derived="true" id="type.8703596">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, GeneralCategory*>, String&lt;char>>&amp;</name>
            <content>
                <baseType ref="type.8703594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705526">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, GeneralCategory*>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703594"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703595">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, GeneralCategory*>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.8703594"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704218" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, NumericType*>, String&lt;char>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8704211"/>
                <argumentType ref="type.8700206"/>
            </content>
        </type>
        <type derived="true" id="type.8704220">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, NumericType*>, String&lt;char>>&amp;</name>
            <content>
                <baseType ref="type.8704218"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705772">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, NumericType*>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704218"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704219">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, NumericType*>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.8704218"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704010" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Script*>, String&lt;char>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8704003"/>
                <argumentType ref="type.8700206"/>
            </content>
        </type>
        <type derived="true" id="type.8704012">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Script*>, String&lt;char>>&amp;</name>
            <content>
                <baseType ref="type.8704010"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705690">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Script*>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704010"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704011">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Script*>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.8704010"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703726" specialization="true">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.AgeId, Age*>, System.Unicode.AgeId></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8703718"/>
                <argumentType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
            </content>
        </type>
        <type derived="true" id="type.8703728">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.AgeId, Age*>, System.Unicode.AgeId>&amp;</name>
            <content>
                <baseType ref="type.8703726"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705573">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.AgeId, Age*>, System.Unicode.AgeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703726"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703727">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.AgeId, Age*>, System.Unicode.AgeId>*</name>
            <content>
                <baseType ref="type.8703726"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704766" specialization="true">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, System.Unicode.AliasTypeId></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8704758"/>
                <argumentType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
            </content>
        </type>
        <type derived="true" id="type.8704768">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, System.Unicode.AliasTypeId>&amp;</name>
            <content>
                <baseType ref="type.8704766"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705983">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, System.Unicode.AliasTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704766"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704767">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, System.Unicode.AliasTypeId>*</name>
            <content>
                <baseType ref="type.8704766"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704350" specialization="true">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, System.Unicode.BidiClassId></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8704342"/>
                <argumentType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
            </content>
        </type>
        <type derived="true" id="type.8704352">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, System.Unicode.BidiClassId>&amp;</name>
            <content>
                <baseType ref="type.8704350"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705819">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, System.Unicode.BidiClassId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704350"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704351">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, System.Unicode.BidiClassId>*</name>
            <content>
                <baseType ref="type.8704350"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704558" specialization="true">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, System.Unicode.BidiPairedBracketTypeId></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8704550"/>
                <argumentType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
            </content>
        </type>
        <type derived="true" id="type.8704560">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, System.Unicode.BidiPairedBracketTypeId>&amp;</name>
            <content>
                <baseType ref="type.8704558"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705901">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, System.Unicode.BidiPairedBracketTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704558"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704559">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, System.Unicode.BidiPairedBracketTypeId>*</name>
            <content>
                <baseType ref="type.8704558"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703075" specialization="true">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, System.Unicode.BinaryPropertyId></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8703067"/>
                <argumentType ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
            </content>
        </type>
        <type derived="true" id="type.8703077">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, System.Unicode.BinaryPropertyId>&amp;</name>
            <content>
                <baseType ref="type.8703075"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705304">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, System.Unicode.BinaryPropertyId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703075"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703076">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, System.Unicode.BinaryPropertyId>*</name>
            <content>
                <baseType ref="type.8703075"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703307" specialization="true">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BlockId, Block*>, System.Unicode.BlockId></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8703299"/>
                <argumentType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
            </content>
        </type>
        <type derived="true" id="type.8703309">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BlockId, Block*>, System.Unicode.BlockId>&amp;</name>
            <content>
                <baseType ref="type.8703307"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705409">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BlockId, Block*>, System.Unicode.BlockId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703307"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703308">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BlockId, Block*>, System.Unicode.BlockId>*</name>
            <content>
                <baseType ref="type.8703307"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703518" specialization="true">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, System.Unicode.GeneralCategoryId></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8703510"/>
                <argumentType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
            </content>
        </type>
        <type derived="true" id="type.8703520">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, System.Unicode.GeneralCategoryId>&amp;</name>
            <content>
                <baseType ref="type.8703518"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705491">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, System.Unicode.GeneralCategoryId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703518"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703519">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, System.Unicode.GeneralCategoryId>*</name>
            <content>
                <baseType ref="type.8703518"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704142" specialization="true">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, System.Unicode.NumericTypeId></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8704134"/>
                <argumentType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
            </content>
        </type>
        <type derived="true" id="type.8704144">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, System.Unicode.NumericTypeId>&amp;</name>
            <content>
                <baseType ref="type.8704142"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705737">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, System.Unicode.NumericTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704142"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704143">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, System.Unicode.NumericTypeId>*</name>
            <content>
                <baseType ref="type.8704142"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703934" specialization="true">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.ScriptId, Script*>, System.Unicode.ScriptId></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8703926"/>
                <argumentType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
            </content>
        </type>
        <type derived="true" id="type.8703936">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.ScriptId, Script*>, System.Unicode.ScriptId>&amp;</name>
            <content>
                <baseType ref="type.8703934"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705655">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.ScriptId, Script*>, System.Unicode.ScriptId>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703934"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703935">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.ScriptId, Script*>, System.Unicode.ScriptId>*</name>
            <content>
                <baseType ref="type.8703934"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_UnaryFun_Pair_T_U_T_6C06CE9A98778C3B50A77283B333E2C76F881D7D" specialization="true">
            <name>UnaryFun&lt;Pair&lt;T, U>, T></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="8699779"/>
            </content>
        </type>
        <type derived="true" id="type.8701750">
            <name>UnaryFun&lt;Pair&lt;T, U>, T>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_T_U_T_6C06CE9A98778C3B50A77283B333E2C76F881D7D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701749">
            <name>UnaryFun&lt;Pair&lt;T, U>, T>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_T_U_T_6C06CE9A98778C3B50A77283B333E2C76F881D7D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_UnaryFun_Pair_T_U_U_609C7CFCC40BF059FA8523A4C125711C279AE266" specialization="true">
            <name>UnaryFun&lt;Pair&lt;T, U>, U></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="8699783"/>
            </content>
        </type>
        <type derived="true" id="type.8701765">
            <name>UnaryFun&lt;Pair&lt;T, U>, U>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_T_U_U_609C7CFCC40BF059FA8523A4C125711C279AE266"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701764">
            <name>UnaryFun&lt;Pair&lt;T, U>, U>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_T_U_U_609C7CFCC40BF059FA8523A4C125711C279AE266"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703141" specialization="true">
            <name>UnaryFun&lt;String&lt;char>, ulong></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8699073"/>
            </content>
        </type>
        <type derived="true" id="type.8703143">
            <name>UnaryFun&lt;String&lt;char>, ulong>&amp;</name>
            <content>
                <baseType ref="type.8703141"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705345">
            <name>UnaryFun&lt;String&lt;char>, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703141"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703142">
            <name>UnaryFun&lt;String&lt;char>, ulong>*</name>
            <content>
                <baseType ref="type.8703141"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703693" specialization="true">
            <name>UnaryFun&lt;System.Unicode.AgeId, ulong></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                <argumentType ref="type.8699073"/>
            </content>
        </type>
        <type derived="true" id="type.8703695">
            <name>UnaryFun&lt;System.Unicode.AgeId, ulong>&amp;</name>
            <content>
                <baseType ref="type.8703693"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705579">
            <name>UnaryFun&lt;System.Unicode.AgeId, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703693"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703694">
            <name>UnaryFun&lt;System.Unicode.AgeId, ulong>*</name>
            <content>
                <baseType ref="type.8703693"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704733" specialization="true">
            <name>UnaryFun&lt;System.Unicode.AliasTypeId, ulong></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                <argumentType ref="type.8699073"/>
            </content>
        </type>
        <type derived="true" id="type.8704735">
            <name>UnaryFun&lt;System.Unicode.AliasTypeId, ulong>&amp;</name>
            <content>
                <baseType ref="type.8704733"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705989">
            <name>UnaryFun&lt;System.Unicode.AliasTypeId, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704733"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704734">
            <name>UnaryFun&lt;System.Unicode.AliasTypeId, ulong>*</name>
            <content>
                <baseType ref="type.8704733"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704317" specialization="true">
            <name>UnaryFun&lt;System.Unicode.BidiClassId, ulong></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                <argumentType ref="type.8699073"/>
            </content>
        </type>
        <type derived="true" id="type.8704319">
            <name>UnaryFun&lt;System.Unicode.BidiClassId, ulong>&amp;</name>
            <content>
                <baseType ref="type.8704317"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705825">
            <name>UnaryFun&lt;System.Unicode.BidiClassId, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704317"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704318">
            <name>UnaryFun&lt;System.Unicode.BidiClassId, ulong>*</name>
            <content>
                <baseType ref="type.8704317"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704525" specialization="true">
            <name>UnaryFun&lt;System.Unicode.BidiPairedBracketTypeId, ulong></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                <argumentType ref="type.8699073"/>
            </content>
        </type>
        <type derived="true" id="type.8704527">
            <name>UnaryFun&lt;System.Unicode.BidiPairedBracketTypeId, ulong>&amp;</name>
            <content>
                <baseType ref="type.8704525"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705907">
            <name>UnaryFun&lt;System.Unicode.BidiPairedBracketTypeId, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704525"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704526">
            <name>UnaryFun&lt;System.Unicode.BidiPairedBracketTypeId, ulong>*</name>
            <content>
                <baseType ref="type.8704525"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703042" specialization="true">
            <name>UnaryFun&lt;System.Unicode.BinaryPropertyId, ulong></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                <argumentType ref="type.8699073"/>
            </content>
        </type>
        <type derived="true" id="type.8703044">
            <name>UnaryFun&lt;System.Unicode.BinaryPropertyId, ulong>&amp;</name>
            <content>
                <baseType ref="type.8703042"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705310">
            <name>UnaryFun&lt;System.Unicode.BinaryPropertyId, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703042"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703043">
            <name>UnaryFun&lt;System.Unicode.BinaryPropertyId, ulong>*</name>
            <content>
                <baseType ref="type.8703042"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703274" specialization="true">
            <name>UnaryFun&lt;System.Unicode.BlockId, ulong></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                <argumentType ref="type.8699073"/>
            </content>
        </type>
        <type derived="true" id="type.8703276">
            <name>UnaryFun&lt;System.Unicode.BlockId, ulong>&amp;</name>
            <content>
                <baseType ref="type.8703274"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705415">
            <name>UnaryFun&lt;System.Unicode.BlockId, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703274"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703275">
            <name>UnaryFun&lt;System.Unicode.BlockId, ulong>*</name>
            <content>
                <baseType ref="type.8703274"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703485" specialization="true">
            <name>UnaryFun&lt;System.Unicode.GeneralCategoryId, ulong></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                <argumentType ref="type.8699073"/>
            </content>
        </type>
        <type derived="true" id="type.8703487">
            <name>UnaryFun&lt;System.Unicode.GeneralCategoryId, ulong>&amp;</name>
            <content>
                <baseType ref="type.8703485"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705497">
            <name>UnaryFun&lt;System.Unicode.GeneralCategoryId, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703485"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703486">
            <name>UnaryFun&lt;System.Unicode.GeneralCategoryId, ulong>*</name>
            <content>
                <baseType ref="type.8703485"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704109" specialization="true">
            <name>UnaryFun&lt;System.Unicode.NumericTypeId, ulong></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                <argumentType ref="type.8699073"/>
            </content>
        </type>
        <type derived="true" id="type.8704111">
            <name>UnaryFun&lt;System.Unicode.NumericTypeId, ulong>&amp;</name>
            <content>
                <baseType ref="type.8704109"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705743">
            <name>UnaryFun&lt;System.Unicode.NumericTypeId, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704109"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704110">
            <name>UnaryFun&lt;System.Unicode.NumericTypeId, ulong>*</name>
            <content>
                <baseType ref="type.8704109"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703901" specialization="true">
            <name>UnaryFun&lt;System.Unicode.ScriptId, ulong></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                <argumentType ref="type.8699073"/>
            </content>
        </type>
        <type derived="true" id="type.8703903">
            <name>UnaryFun&lt;System.Unicode.ScriptId, ulong>&amp;</name>
            <content>
                <baseType ref="type.8703901"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705661">
            <name>UnaryFun&lt;System.Unicode.ScriptId, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703901"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703902">
            <name>UnaryFun&lt;System.Unicode.ScriptId, ulong>*</name>
            <content>
                <baseType ref="type.8703901"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="8699625"/>
                <argumentType ref="8699625"/>
            </content>
        </type>
        <type derived="true" id="type.8700916">
            <name>UnaryFun&lt;T, T>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701183">
            <name>UnaryFun&lt;T, T>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700666">
            <name>UnaryFun&lt;T, T>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702062">
            <name>UnaryFun&lt;T, T>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700585">
            <name>UnaryFun&lt;T, T>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701109">
            <name>UnaryFun&lt;T, T>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702062">
            <name>UnaryFun&lt;T, T>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702005">
            <name>UnaryFun&lt;T, T>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701948">
            <name>UnaryFun&lt;T, T>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702061">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702004">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702061">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701108">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701947">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700665">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701182">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700584">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700915">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_T_DA92F1EA04665A611169328A8F58FE29401B2D0B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_UnaryFun_T_ulong_A5DC55099E130EBC88925E5C1D4BFFAE1CC23ECA" specialization="true">
            <name>UnaryFun&lt;T, ulong></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="8699709"/>
                <argumentType ref="type.8699073"/>
            </content>
        </type>
        <type derived="true" id="type.8701254">
            <name>UnaryFun&lt;T, ulong>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_ulong_A5DC55099E130EBC88925E5C1D4BFFAE1CC23ECA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701253">
            <name>UnaryFun&lt;T, ulong>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_T_ulong_A5DC55099E130EBC88925E5C1D4BFFAE1CC23ECA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700873" specialization="true">
            <name>UnaryFun&lt;bool, bool></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8699065"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8700875">
            <name>UnaryFun&lt;bool, bool>&amp;</name>
            <content>
                <baseType ref="type.8700873"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700874">
            <name>UnaryFun&lt;bool, bool>*</name>
            <content>
                <baseType ref="type.8700873"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_UnaryPred_Argument_998EBBF0D75A93FF6E3871FF481847CF33A59C33" specialization="true">
            <name>UnaryPred&lt;Argument></name>
            <content>
                <primaryType ref="class_UnaryPred_Argument_998EBBF0D75A93FF6E3871FF481847CF33A59C33"/>
                <argumentType ref="8699636"/>
            </content>
        </type>
        <type id="class_UnaryPred_C212084DFB3940E78E2E9F0BAE4A57E5C01EDAA1">
            <name>UnaryPred&lt;Argument></name>
        </type>
        <type id="type.class_UnaryPred_Argument_998EBBF0D75A93FF6E3871FF481847CF33A59C33" specialization="true">
            <name>UnaryPred&lt;Argument></name>
            <content>
                <primaryType ref="class_UnaryPred_Argument_998EBBF0D75A93FF6E3871FF481847CF33A59C33"/>
                <argumentType ref="8699636"/>
            </content>
        </type>
        <type derived="true" id="type.8700644">
            <name>UnaryPred&lt;Argument>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryPred_Argument_998EBBF0D75A93FF6E3871FF481847CF33A59C33"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700643">
            <name>UnaryPred&lt;Argument>*</name>
            <content>
                <baseType ref="type.class_UnaryPred_Argument_998EBBF0D75A93FF6E3871FF481847CF33A59C33"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700872" specialization="true">
            <name>UnaryPred&lt;bool></name>
            <content>
                <primaryType ref="class_UnaryPred_Argument_998EBBF0D75A93FF6E3871FF481847CF33A59C33"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8700877">
            <name>UnaryPred&lt;bool>&amp;</name>
            <content>
                <baseType ref="type.8700872"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700876">
            <name>UnaryPred&lt;bool>*</name>
            <content>
                <baseType ref="type.8700872"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079">
            <name>UnicodeException</name>
        </type>
        <type derived="true" id="type.8699955">
            <name>UnicodeException&amp;</name>
            <content>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703032">
            <name>UnicodeException&amp;&amp;</name>
            <content>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699954">
            <name>UnicodeException*</name>
            <content>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701671" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.8701648"/>
            </content>
        </type>
        <type derived="true" id="type.8701673">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.8701671"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.167">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701671"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701672">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.8701671"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8702043" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type id="type.8702100" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type id="type.8701986" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type id="type.8702100" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.8701988">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;</name>
            <content>
                <baseType ref="type.8701986"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702102">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;</name>
            <content>
                <baseType ref="type.8702100"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702045">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;</name>
            <content>
                <baseType ref="type.8702043"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702102">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;</name>
            <content>
                <baseType ref="type.8702100"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702049">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702043"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.214">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701986"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702106">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702100"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702101">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>*</name>
            <content>
                <baseType ref="type.8702100"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701987">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>*</name>
            <content>
                <baseType ref="type.8701986"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702044">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>*</name>
            <content>
                <baseType ref="type.8702043"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702101">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>*</name>
            <content>
                <baseType ref="type.8702100"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701928" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
            </content>
        </type>
        <type derived="true" id="type.8701930">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;</name>
            <content>
                <baseType ref="type.8701928"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.210">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701928"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701929">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>*</name>
            <content>
                <baseType ref="type.8701928"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700154" specialization="true">
            <name>UniquePtr&lt;System.Ascii.CharClassTable></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_CharClassTable_B24A43EB28B26916FCA6AA24AA09EDB0A1923A1A"/>
            </content>
        </type>
        <type derived="true" id="type.8700156">
            <name>UniquePtr&lt;System.Ascii.CharClassTable>&amp;</name>
            <content>
                <baseType ref="type.8700154"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700160">
            <name>UniquePtr&lt;System.Ascii.CharClassTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700154"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700155">
            <name>UniquePtr&lt;System.Ascii.CharClassTable>*</name>
            <content>
                <baseType ref="type.8700154"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8705182" specialization="true">
            <name>UniquePtr&lt;System.Exception></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
            </content>
        </type>
        <type derived="true" id="type.8705184">
            <name>UniquePtr&lt;System.Exception>&amp;</name>
            <content>
                <baseType ref="type.8705182"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.373">
            <name>UniquePtr&lt;System.Exception>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705182"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705183">
            <name>UniquePtr&lt;System.Exception>*</name>
            <content>
                <baseType ref="type.8705182"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703864" specialization="true">
            <name>UniquePtr&lt;System.Unicode.AgeTable></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_AgeTable_2C086A707D70C073F820A6B1E5C3E9839D613039"/>
            </content>
        </type>
        <type derived="true" id="type.8703866">
            <name>UniquePtr&lt;System.Unicode.AgeTable>&amp;</name>
            <content>
                <baseType ref="type.8703864"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703870">
            <name>UniquePtr&lt;System.Unicode.AgeTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703864"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703865">
            <name>UniquePtr&lt;System.Unicode.AgeTable>*</name>
            <content>
                <baseType ref="type.8703864"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704904" specialization="true">
            <name>UniquePtr&lt;System.Unicode.AliasTypeTable></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_AliasTypeTable_5D27F2122BC2C5367359CE5C354526AB494783FF"/>
            </content>
        </type>
        <type derived="true" id="type.8704906">
            <name>UniquePtr&lt;System.Unicode.AliasTypeTable>&amp;</name>
            <content>
                <baseType ref="type.8704904"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704910">
            <name>UniquePtr&lt;System.Unicode.AliasTypeTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704904"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704905">
            <name>UniquePtr&lt;System.Unicode.AliasTypeTable>*</name>
            <content>
                <baseType ref="type.8704904"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704488" specialization="true">
            <name>UniquePtr&lt;System.Unicode.BidiClassTable></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_BidiClassTable_C2D5046C361B79F9A690C84020C0EA764E7E73C5"/>
            </content>
        </type>
        <type derived="true" id="type.8704490">
            <name>UniquePtr&lt;System.Unicode.BidiClassTable>&amp;</name>
            <content>
                <baseType ref="type.8704488"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704494">
            <name>UniquePtr&lt;System.Unicode.BidiClassTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704488"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704489">
            <name>UniquePtr&lt;System.Unicode.BidiClassTable>*</name>
            <content>
                <baseType ref="type.8704488"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704696" specialization="true">
            <name>UniquePtr&lt;System.Unicode.BidiPairedBracketTypeTable></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_BidiPairedBracketTypeTable_0064D862A1F33AB5C9E09D707B6EC98CAC6E1BA7"/>
            </content>
        </type>
        <type derived="true" id="type.8704698">
            <name>UniquePtr&lt;System.Unicode.BidiPairedBracketTypeTable>&amp;</name>
            <content>
                <baseType ref="type.8704696"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704702">
            <name>UniquePtr&lt;System.Unicode.BidiPairedBracketTypeTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704696"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704697">
            <name>UniquePtr&lt;System.Unicode.BidiPairedBracketTypeTable>*</name>
            <content>
                <baseType ref="type.8704696"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703258" specialization="true">
            <name>UniquePtr&lt;System.Unicode.BinaryPropertyTable></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_BinaryPropertyTable_D9F900B43A497D516547526966A7747D0329EEEA"/>
            </content>
        </type>
        <type derived="true" id="type.8703260">
            <name>UniquePtr&lt;System.Unicode.BinaryPropertyTable>&amp;</name>
            <content>
                <baseType ref="type.8703258"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703264">
            <name>UniquePtr&lt;System.Unicode.BinaryPropertyTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703258"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703259">
            <name>UniquePtr&lt;System.Unicode.BinaryPropertyTable>*</name>
            <content>
                <baseType ref="type.8703258"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703445" specialization="true">
            <name>UniquePtr&lt;System.Unicode.BlockTable></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_BlockTable_6443121076F39E567B3BAACE0620D0ABC989F5D7"/>
            </content>
        </type>
        <type derived="true" id="type.8703447">
            <name>UniquePtr&lt;System.Unicode.BlockTable>&amp;</name>
            <content>
                <baseType ref="type.8703445"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703451">
            <name>UniquePtr&lt;System.Unicode.BlockTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703445"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703446">
            <name>UniquePtr&lt;System.Unicode.BlockTable>*</name>
            <content>
                <baseType ref="type.8703445"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704957" specialization="true">
            <name>UniquePtr&lt;System.Unicode.CharacterInfo></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_CharacterInfo_E7387AE78EC58246E84889A73F5B953D7D1E7336"/>
            </content>
        </type>
        <type derived="true" id="type.8704959">
            <name>UniquePtr&lt;System.Unicode.CharacterInfo>&amp;</name>
            <content>
                <baseType ref="type.8704957"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704963">
            <name>UniquePtr&lt;System.Unicode.CharacterInfo>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704957"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704958">
            <name>UniquePtr&lt;System.Unicode.CharacterInfo>*</name>
            <content>
                <baseType ref="type.8704957"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706062">
            <name>UniquePtr&lt;System.Unicode.CharacterInfo>*&amp;</name>
            <content>
                <baseType ref="type.8704957"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706061">
            <name>UniquePtr&lt;System.Unicode.CharacterInfo>**</name>
            <content>
                <baseType ref="type.8704957"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8705053" specialization="true">
            <name>UniquePtr&lt;System.Unicode.CharacterInfoPage></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_CharacterInfoPage_69DB089EE4A51A51BA9C5A5F28F2606E5F0A871D"/>
            </content>
        </type>
        <type derived="true" id="type.8705055">
            <name>UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;</name>
            <content>
                <baseType ref="type.8705053"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705059">
            <name>UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705053"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705054">
            <name>UniquePtr&lt;System.Unicode.CharacterInfoPage>*</name>
            <content>
                <baseType ref="type.8705053"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706077">
            <name>UniquePtr&lt;System.Unicode.CharacterInfoPage>*&amp;</name>
            <content>
                <baseType ref="type.8705053"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706076">
            <name>UniquePtr&lt;System.Unicode.CharacterInfoPage>**</name>
            <content>
                <baseType ref="type.8705053"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8705043" specialization="true">
            <name>UniquePtr&lt;System.Unicode.CharacterTable></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_CharacterTable_0A8C28D5AD9E5EB7406E88B0F6CD21F3D0C1F854"/>
            </content>
        </type>
        <type derived="true" id="type.8705045">
            <name>UniquePtr&lt;System.Unicode.CharacterTable>&amp;</name>
            <content>
                <baseType ref="type.8705043"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705049">
            <name>UniquePtr&lt;System.Unicode.CharacterTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705043"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705044">
            <name>UniquePtr&lt;System.Unicode.CharacterTable>*</name>
            <content>
                <baseType ref="type.8705043"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704985" specialization="true">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfo></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ExtendedCharacterInfo_16A04F00C660DF07340D57AC4BB8303B8A7CBAD5"/>
            </content>
        </type>
        <type derived="true" id="type.8704987">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;</name>
            <content>
                <baseType ref="type.8704985"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704991">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704985"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704986">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*</name>
            <content>
                <baseType ref="type.8704985"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706068">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*&amp;</name>
            <content>
                <baseType ref="type.8704985"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706067">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>**</name>
            <content>
                <baseType ref="type.8704985"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8705081" specialization="true">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoHeader></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ExtendedCharacterInfoHeader_576C0EF15E9D47D0C66368F00AC7DC7E893196EA"/>
            </content>
        </type>
        <type derived="true" id="type.8705083">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoHeader>&amp;</name>
            <content>
                <baseType ref="type.8705081"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705087">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoHeader>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705081"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705082">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoHeader>*</name>
            <content>
                <baseType ref="type.8705081"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8705088" specialization="true">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ExtendedCharacterInfoPage_0C6801CB06DC546FE37445397210DCBF2F411EC7"/>
            </content>
        </type>
        <type derived="true" id="type.8705090">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;</name>
            <content>
                <baseType ref="type.8705088"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705094">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705088"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705089">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*</name>
            <content>
                <baseType ref="type.8705088"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706086">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*&amp;</name>
            <content>
                <baseType ref="type.8705088"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706085">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>**</name>
            <content>
                <baseType ref="type.8705088"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703656" specialization="true">
            <name>UniquePtr&lt;System.Unicode.GeneralCategoryTable></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_GeneralCategoryTable_3109B631555A0B27CBC86AC6578E1E5835FD0ADE"/>
            </content>
        </type>
        <type derived="true" id="type.8703658">
            <name>UniquePtr&lt;System.Unicode.GeneralCategoryTable>&amp;</name>
            <content>
                <baseType ref="type.8703656"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703662">
            <name>UniquePtr&lt;System.Unicode.GeneralCategoryTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703656"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703657">
            <name>UniquePtr&lt;System.Unicode.GeneralCategoryTable>*</name>
            <content>
                <baseType ref="type.8703656"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704304" specialization="true">
            <name>UniquePtr&lt;System.Unicode.NumericTypeTable></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_NumericTypeTable_D5D406F33CCAC2C03087278A817836F0F3A3D92A"/>
            </content>
        </type>
        <type derived="true" id="type.8704306">
            <name>UniquePtr&lt;System.Unicode.NumericTypeTable>&amp;</name>
            <content>
                <baseType ref="type.8704304"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704310">
            <name>UniquePtr&lt;System.Unicode.NumericTypeTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704304"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704305">
            <name>UniquePtr&lt;System.Unicode.NumericTypeTable>*</name>
            <content>
                <baseType ref="type.8704304"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8704072" specialization="true">
            <name>UniquePtr&lt;System.Unicode.ScriptTable></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ScriptTable_CEB3F0C6961FADA195D3CEC50AC41CB1955D92CF"/>
            </content>
        </type>
        <type derived="true" id="type.8704074">
            <name>UniquePtr&lt;System.Unicode.ScriptTable>&amp;</name>
            <content>
                <baseType ref="type.8704072"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704078">
            <name>UniquePtr&lt;System.Unicode.ScriptTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704072"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704073">
            <name>UniquePtr&lt;System.Unicode.ScriptTable>*</name>
            <content>
                <baseType ref="type.8704072"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="8700105"/>
            </content>
        </type>
        <type id="class_UniquePtr_87F1890A67C8907AAF9CB11D13609AE4F6F663F7">
            <name>UniquePtr&lt;T></name>
        </type>
        <type id="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="8700106"/>
            </content>
        </type>
        <type derived="true" id="type.8705142">
            <name>UniquePtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705118">
            <name>UniquePtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705130">
            <name>UniquePtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705148">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705136">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.372">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705129">
            <name>UniquePtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705117">
            <name>UniquePtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705141">
            <name>UniquePtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8699480">
            <name>V</name>
        </type>
        <type id="8699491">
            <name>Value</name>
        </type>
        <type derived="true" id="type.168">
            <name>Value&amp;</name>
            <content>
                <baseType ref="8699751"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="8699830">
            <name>ValueType</name>
        </type>
        <type derived="true" id="type.8701608">
            <name>ValueType&amp;</name>
            <content>
                <baseType ref="8699746"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701913">
            <name>ValueType&amp;</name>
            <content>
                <baseType ref="8699830"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701612">
            <name>ValueType&amp;</name>
            <content>
                <baseType ref="8699748"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701610">
            <name>ValueType&amp;</name>
            <content>
                <baseType ref="8699747"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701608">
            <name>ValueType&amp;</name>
            <content>
                <baseType ref="8699746"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701302">
            <name>ValueType&amp;</name>
            <content>
                <baseType ref="8699723"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701607">
            <name>ValueType*</name>
            <content>
                <baseType ref="8699746"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701915">
            <name>ValueType*</name>
            <content>
                <baseType ref="8699830"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701611">
            <name>ValueType*</name>
            <content>
                <baseType ref="8699748"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701303">
            <name>ValueType*</name>
            <content>
                <baseType ref="8699723"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701611">
            <name>ValueType*</name>
            <content>
                <baseType ref="8699748"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701609">
            <name>ValueType*</name>
            <content>
                <baseType ref="8699747"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700188" specialization="true">
            <name>WeakCount&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.8700190">
            <name>WeakCount&lt;System.IO.ByteStream>&amp;</name>
            <content>
                <baseType ref="type.8700188"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700194">
            <name>WeakCount&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700188"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700189">
            <name>WeakCount&lt;System.IO.ByteStream>*</name>
            <content>
                <baseType ref="type.8700188"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F" specialization="true">
            <name>WeakCount&lt;T></name>
            <content>
                <primaryType ref="class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <argumentType ref="8699850"/>
            </content>
        </type>
        <type id="class_WeakCount_620EFA4AF513B3C1ED7162BF1548EFFABA457953">
            <name>WeakCount&lt;T></name>
        </type>
        <type id="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F" specialization="true">
            <name>WeakCount&lt;T></name>
            <content>
                <primaryType ref="class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <argumentType ref="8699866"/>
            </content>
        </type>
        <type derived="true" id="type.8702132">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702249">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702350">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702198">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702566">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702314">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702154">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702386">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702227">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702566">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702271">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702479">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702536">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702600">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702176">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702422">
            <name>WeakCount&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702158">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702390">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702570">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702426">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702604">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702354">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702180">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.226">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.234">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702604">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.242">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702202">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702283">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702261">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.256">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.264">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702599">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702175">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702131">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702313">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702478">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702270">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702599">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702197">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702385">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702248">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702535">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702153">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702565">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702349">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702226">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702421">
            <name>WeakCount&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557" specialization="true">
            <name>WeakCount&lt;U></name>
            <content>
                <primaryType ref="class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <argumentType ref="8699871"/>
            </content>
        </type>
        <type derived="true" id="type.8702630">
            <name>WeakCount&lt;U>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702220">
            <name>WeakCount&lt;U>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702458">
            <name>WeakCount&lt;U>&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702634">
            <name>WeakCount&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702462">
            <name>WeakCount&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702224">
            <name>WeakCount&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702634">
            <name>WeakCount&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702219">
            <name>WeakCount&lt;U>*</name>
            <content>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702457">
            <name>WeakCount&lt;U>*</name>
            <content>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702629">
            <name>WeakCount&lt;U>*</name>
            <content>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700196" specialization="true">
            <name>WeakPtr&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.8700198">
            <name>WeakPtr&lt;System.IO.ByteStream>&amp;</name>
            <content>
                <baseType ref="type.8700196"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.39">
            <name>WeakPtr&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700196"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700197">
            <name>WeakPtr&lt;System.IO.ByteStream>*</name>
            <content>
                <baseType ref="type.8700196"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC" specialization="true">
            <name>WeakPtr&lt;T></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="8699861"/>
            </content>
        </type>
        <type id="class_WeakPtr_1C689807CA5B7918878684C6AEC75C01411F88AF">
            <name>WeakPtr&lt;T></name>
        </type>
        <type id="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC" specialization="true">
            <name>WeakPtr&lt;T></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="8699864"/>
            </content>
        </type>
        <type derived="true" id="type.8702608">
            <name>WeakPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702358">
            <name>WeakPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702473">
            <name>WeakPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702430">
            <name>WeakPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702394">
            <name>WeakPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702544">
            <name>WeakPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702322">
            <name>WeakPtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.250">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.259">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.266">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.248">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.246">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.244">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.269">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702393">
            <name>WeakPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702543">
            <name>WeakPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702357">
            <name>WeakPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702321">
            <name>WeakPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702607">
            <name>WeakPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702472">
            <name>WeakPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702429">
            <name>WeakPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702607">
            <name>WeakPtr&lt;T>*</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021" specialization="true">
            <name>WeakPtr&lt;U></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="8699863"/>
            </content>
        </type>
        <type derived="true" id="type.8702466">
            <name>WeakPtr&lt;U>&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.252">
            <name>WeakPtr&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702465">
            <name>WeakPtr&lt;U>*</name>
            <content>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699065">
            <name>bool</name>
        </type>
        <type derived="true" id="type.8699082">
            <name>bool&amp;</name>
            <content>
                <baseType ref="type.8699065"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699067">
            <name>byte</name>
        </type>
        <type derived="true" id="type.8699088">
            <name>byte&amp;</name>
            <content>
                <baseType ref="type.8699067"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699087">
            <name>byte*</name>
            <content>
                <baseType ref="type.8699067"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705279">
            <name>byte*&amp;</name>
            <content>
                <baseType ref="type.8699067"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705280">
            <name>byte*&amp;&amp;</name>
            <content>
                <baseType ref="type.8699067"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705278">
            <name>byte**</name>
            <content>
                <baseType ref="type.8699067"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699076">
            <name>char</name>
        </type>
        <type derived="true" id="type.8699115">
            <name>char&amp;</name>
            <content>
                <baseType ref="type.8699076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699114">
            <name>char*</name>
            <content>
                <baseType ref="type.8699076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705166">
            <name>char*&amp;</name>
            <content>
                <baseType ref="type.8699076"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705167">
            <name>char*&amp;&amp;</name>
            <content>
                <baseType ref="type.8699076"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705165">
            <name>char**</name>
            <content>
                <baseType ref="type.8699076"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699990">
            <name>const Age</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Age_20ED92992C09B89F8F5B6F690EFAF17F626D7291"/>
            </content>
        </type>
        <type derived="true" id="type.8699992">
            <name>const Age&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Age_20ED92992C09B89F8F5B6F690EFAF17F626D7291"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699991">
            <name>const Age*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Age_20ED92992C09B89F8F5B6F690EFAF17F626D7291"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703721">
            <name>const Age*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Age_20ED92992C09B89F8F5B6F690EFAF17F626D7291"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703877">
            <name>const Age**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Age_20ED92992C09B89F8F5B6F690EFAF17F626D7291"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703696">
            <name>const AgeId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="enumerated_type_AgeId_573E8A421862CABC368C87F14984A870D0CF7027"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699994">
            <name>const AgeTable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AgeTable_2C086A707D70C073F820A6B1E5C3E9839D613039"/>
            </content>
        </type>
        <type derived="true" id="type.8699996">
            <name>const AgeTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AgeTable_2C086A707D70C073F820A6B1E5C3E9839D613039"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699995">
            <name>const AgeTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AgeTable_2C086A707D70C073F820A6B1E5C3E9839D613039"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705605">
            <name>const AgeTable*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AgeTable_2C086A707D70C073F820A6B1E5C3E9839D613039"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705604">
            <name>const AgeTable**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AgeTable_2C086A707D70C073F820A6B1E5C3E9839D613039"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700073">
            <name>const Alias</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
            </content>
        </type>
        <type derived="true" id="type.8700075">
            <name>const Alias&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700074">
            <name>const Alias*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700061">
            <name>const AliasType</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AliasType_26C1BD4B52D4B4FA45C72272C56F7F26186F16BD"/>
            </content>
        </type>
        <type derived="true" id="type.8700063">
            <name>const AliasType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AliasType_26C1BD4B52D4B4FA45C72272C56F7F26186F16BD"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700062">
            <name>const AliasType*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AliasType_26C1BD4B52D4B4FA45C72272C56F7F26186F16BD"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704761">
            <name>const AliasType*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AliasType_26C1BD4B52D4B4FA45C72272C56F7F26186F16BD"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704917">
            <name>const AliasType**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AliasType_26C1BD4B52D4B4FA45C72272C56F7F26186F16BD"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704736">
            <name>const AliasTypeId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="enumerated_type_AliasTypeId_7FC85F30EF822D1494ABEF86D1AE5D80A01D6A27"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700065">
            <name>const AliasTypeTable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AliasTypeTable_5D27F2122BC2C5367359CE5C354526AB494783FF"/>
            </content>
        </type>
        <type derived="true" id="type.8700067">
            <name>const AliasTypeTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AliasTypeTable_5D27F2122BC2C5367359CE5C354526AB494783FF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700066">
            <name>const AliasTypeTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AliasTypeTable_5D27F2122BC2C5367359CE5C354526AB494783FF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706015">
            <name>const AliasTypeTable*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AliasTypeTable_5D27F2122BC2C5367359CE5C354526AB494783FF"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706014">
            <name>const AliasTypeTable**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AliasTypeTable_5D27F2122BC2C5367359CE5C354526AB494783FF"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700035">
            <name>const BidiClass</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiClass_C91AB3C9A69B59FAC907E2B6BF6ED6742175BB63"/>
            </content>
        </type>
        <type derived="true" id="type.8700037">
            <name>const BidiClass&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiClass_C91AB3C9A69B59FAC907E2B6BF6ED6742175BB63"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700036">
            <name>const BidiClass*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiClass_C91AB3C9A69B59FAC907E2B6BF6ED6742175BB63"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704345">
            <name>const BidiClass*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiClass_C91AB3C9A69B59FAC907E2B6BF6ED6742175BB63"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704501">
            <name>const BidiClass**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiClass_C91AB3C9A69B59FAC907E2B6BF6ED6742175BB63"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704320">
            <name>const BidiClassId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="enumerated_type_BidiClassId_24D8E2595A24C24A944FBEFE347E448B98E153B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700039">
            <name>const BidiClassTable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiClassTable_C2D5046C361B79F9A690C84020C0EA764E7E73C5"/>
            </content>
        </type>
        <type derived="true" id="type.8700041">
            <name>const BidiClassTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiClassTable_C2D5046C361B79F9A690C84020C0EA764E7E73C5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700040">
            <name>const BidiClassTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiClassTable_C2D5046C361B79F9A690C84020C0EA764E7E73C5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705851">
            <name>const BidiClassTable*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiClassTable_C2D5046C361B79F9A690C84020C0EA764E7E73C5"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705850">
            <name>const BidiClassTable**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiClassTable_C2D5046C361B79F9A690C84020C0EA764E7E73C5"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700048">
            <name>const BidiPairedBracketType</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiPairedBracketType_8577BAE017C9877F73B079DC41550D9EB6D2202C"/>
            </content>
        </type>
        <type derived="true" id="type.8700050">
            <name>const BidiPairedBracketType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiPairedBracketType_8577BAE017C9877F73B079DC41550D9EB6D2202C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700049">
            <name>const BidiPairedBracketType*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiPairedBracketType_8577BAE017C9877F73B079DC41550D9EB6D2202C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704553">
            <name>const BidiPairedBracketType*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiPairedBracketType_8577BAE017C9877F73B079DC41550D9EB6D2202C"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704709">
            <name>const BidiPairedBracketType**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiPairedBracketType_8577BAE017C9877F73B079DC41550D9EB6D2202C"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704528">
            <name>const BidiPairedBracketTypeId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="enumerated_type_BidiPairedBracketTypeId_CE5D2B1A3597AF31D53D8E32B3F609530B7E86A0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700052">
            <name>const BidiPairedBracketTypeTable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiPairedBracketTypeTable_0064D862A1F33AB5C9E09D707B6EC98CAC6E1BA7"/>
            </content>
        </type>
        <type derived="true" id="type.8700054">
            <name>const BidiPairedBracketTypeTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiPairedBracketTypeTable_0064D862A1F33AB5C9E09D707B6EC98CAC6E1BA7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700053">
            <name>const BidiPairedBracketTypeTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiPairedBracketTypeTable_0064D862A1F33AB5C9E09D707B6EC98CAC6E1BA7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705933">
            <name>const BidiPairedBracketTypeTable*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiPairedBracketTypeTable_0064D862A1F33AB5C9E09D707B6EC98CAC6E1BA7"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705932">
            <name>const BidiPairedBracketTypeTable**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BidiPairedBracketTypeTable_0064D862A1F33AB5C9E09D707B6EC98CAC6E1BA7"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705357">
            <name>const BinaryFun&lt;String&lt;char>, String&lt;char>, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703150"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705591">
            <name>const BinaryFun&lt;System.Unicode.AgeId, System.Unicode.AgeId, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703703"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706001">
            <name>const BinaryFun&lt;System.Unicode.AliasTypeId, System.Unicode.AliasTypeId, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704743"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705837">
            <name>const BinaryFun&lt;System.Unicode.BidiClassId, System.Unicode.BidiClassId, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704327"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705919">
            <name>const BinaryFun&lt;System.Unicode.BidiPairedBracketTypeId, System.Unicode.BidiPairedBracketTypeId, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704535"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705322">
            <name>const BinaryFun&lt;System.Unicode.BinaryPropertyId, System.Unicode.BinaryPropertyId, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703052"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705427">
            <name>const BinaryFun&lt;System.Unicode.BlockId, System.Unicode.BlockId, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705509">
            <name>const BinaryFun&lt;System.Unicode.GeneralCategoryId, System.Unicode.GeneralCategoryId, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703495"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705755">
            <name>const BinaryFun&lt;System.Unicode.NumericTypeId, System.Unicode.NumericTypeId, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704119"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705673">
            <name>const BinaryFun&lt;System.Unicode.ScriptId, System.Unicode.ScriptId, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703911"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705354">
            <name>const BinaryPred&lt;String&lt;char>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703149"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705588">
            <name>const BinaryPred&lt;System.Unicode.AgeId, System.Unicode.AgeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703702"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705998">
            <name>const BinaryPred&lt;System.Unicode.AliasTypeId, System.Unicode.AliasTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704742"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705834">
            <name>const BinaryPred&lt;System.Unicode.BidiClassId, System.Unicode.BidiClassId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704326"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705916">
            <name>const BinaryPred&lt;System.Unicode.BidiPairedBracketTypeId, System.Unicode.BidiPairedBracketTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704534"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705319">
            <name>const BinaryPred&lt;System.Unicode.BinaryPropertyId, System.Unicode.BinaryPropertyId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703051"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705424">
            <name>const BinaryPred&lt;System.Unicode.BlockId, System.Unicode.BlockId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703283"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705506">
            <name>const BinaryPred&lt;System.Unicode.GeneralCategoryId, System.Unicode.GeneralCategoryId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703494"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705752">
            <name>const BinaryPred&lt;System.Unicode.NumericTypeId, System.Unicode.NumericTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704118"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705670">
            <name>const BinaryPred&lt;System.Unicode.ScriptId, System.Unicode.ScriptId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703910"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703037">
            <name>const BinaryProperty</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryProperty_9535AC1669FC6F9049F470BDFFC16D1B40ACA307"/>
            </content>
        </type>
        <type derived="true" id="type.8703038">
            <name>const BinaryProperty&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryProperty_9535AC1669FC6F9049F470BDFFC16D1B40ACA307"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703036">
            <name>const BinaryProperty*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryProperty_9535AC1669FC6F9049F470BDFFC16D1B40ACA307"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703070">
            <name>const BinaryProperty*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryProperty_9535AC1669FC6F9049F470BDFFC16D1B40ACA307"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703240">
            <name>const BinaryProperty**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryProperty_9535AC1669FC6F9049F470BDFFC16D1B40ACA307"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703045">
            <name>const BinaryPropertyId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="enumerated_type_BinaryPropertyId_D574895B5DC4FE8A7F3DEA3A3FD9166BDA78792E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699961">
            <name>const BinaryPropertyTable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryPropertyTable_D9F900B43A497D516547526966A7747D0329EEEA"/>
            </content>
        </type>
        <type derived="true" id="type.8699963">
            <name>const BinaryPropertyTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryPropertyTable_D9F900B43A497D516547526966A7747D0329EEEA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699962">
            <name>const BinaryPropertyTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryPropertyTable_D9F900B43A497D516547526966A7747D0329EEEA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705336">
            <name>const BinaryPropertyTable*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryPropertyTable_D9F900B43A497D516547526966A7747D0329EEEA"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705335">
            <name>const BinaryPropertyTable**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryPropertyTable_D9F900B43A497D516547526966A7747D0329EEEA"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.377">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
            </content>
        </type>
        <type derived="true" id="type.378">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.379">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
            </content>
        </type>
        <type derived="true" id="type.380">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700881">
            <name>const BitAnd&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BitAnd_T_AC930DBF44CAD4AF5C16EEB91A5A85BD51AA5A95"/>
            </content>
        </type>
        <type derived="true" id="type.8700883">
            <name>const BitAnd&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BitAnd_T_AC930DBF44CAD4AF5C16EEB91A5A85BD51AA5A95"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700882">
            <name>const BitAnd&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BitAnd_T_AC930DBF44CAD4AF5C16EEB91A5A85BD51AA5A95"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700911">
            <name>const BitNot&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BitNot_T_763DFD1FCEE6B8C85B9786C16ED6A1B26736DFDF"/>
            </content>
        </type>
        <type derived="true" id="type.8700913">
            <name>const BitNot&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BitNot_T_763DFD1FCEE6B8C85B9786C16ED6A1B26736DFDF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700912">
            <name>const BitNot&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BitNot_T_763DFD1FCEE6B8C85B9786C16ED6A1B26736DFDF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700891">
            <name>const BitOr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BitOr_T_4DDB2A2A49411F9C36A78E9B3E3C41E218EA45E5"/>
            </content>
        </type>
        <type derived="true" id="type.8700893">
            <name>const BitOr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BitOr_T_4DDB2A2A49411F9C36A78E9B3E3C41E218EA45E5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700892">
            <name>const BitOr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BitOr_T_4DDB2A2A49411F9C36A78E9B3E3C41E218EA45E5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700901">
            <name>const BitXor&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BitXor_T_11BFC9FE73C9D8A61487930E54FA072FAFE53DA6"/>
            </content>
        </type>
        <type derived="true" id="type.8700903">
            <name>const BitXor&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BitXor_T_11BFC9FE73C9D8A61487930E54FA072FAFE53DA6"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700902">
            <name>const BitXor&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_BitXor_T_11BFC9FE73C9D8A61487930E54FA072FAFE53DA6"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699401">
            <name>const Bitset</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Bitset_BA1EE2E68426C5445CB6CAF7F957084ADAFD19CA"/>
            </content>
        </type>
        <type derived="true" id="type.8699403">
            <name>const Bitset&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Bitset_BA1EE2E68426C5445CB6CAF7F957084ADAFD19CA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699402">
            <name>const Bitset*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Bitset_BA1EE2E68426C5445CB6CAF7F957084ADAFD19CA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703269">
            <name>const Block</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Block_0DB05901DEB40B5847F018F2B06585EA00CE386B"/>
            </content>
        </type>
        <type derived="true" id="type.8703270">
            <name>const Block&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Block_0DB05901DEB40B5847F018F2B06585EA00CE386B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703268">
            <name>const Block*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Block_0DB05901DEB40B5847F018F2B06585EA00CE386B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703302">
            <name>const Block*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Block_0DB05901DEB40B5847F018F2B06585EA00CE386B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703458">
            <name>const Block**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Block_0DB05901DEB40B5847F018F2B06585EA00CE386B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703277">
            <name>const BlockId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="enumerated_type_BlockId_7C540667B9A009CF472637A71AD10DCF9581C370"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699971">
            <name>const BlockTable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BlockTable_6443121076F39E567B3BAACE0620D0ABC989F5D7"/>
            </content>
        </type>
        <type derived="true" id="type.8699973">
            <name>const BlockTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BlockTable_6443121076F39E567B3BAACE0620D0ABC989F5D7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699972">
            <name>const BlockTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BlockTable_6443121076F39E567B3BAACE0620D0ABC989F5D7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705441">
            <name>const BlockTable*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BlockTable_6443121076F39E567B3BAACE0620D0ABC989F5D7"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705440">
            <name>const BlockTable**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BlockTable_6443121076F39E567B3BAACE0620D0ABC989F5D7"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700976">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700973"/>
            </content>
        </type>
        <type derived="true" id="type.8701055">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701052"/>
            </content>
        </type>
        <type derived="true" id="type.8700976">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700973"/>
            </content>
        </type>
        <type derived="true" id="type.8701057">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701052"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700978">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700973"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701056">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701052"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700977">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700973"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701056">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701052"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700998">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700973"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701076">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701052"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701077">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701052"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700999">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700973"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703823">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Age*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703820"/>
            </content>
        </type>
        <type derived="true" id="type.8703825">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Age*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703820"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703824">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703820"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703844">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703820"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703845">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703820"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704863">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704860"/>
            </content>
        </type>
        <type derived="true" id="type.8704865">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704860"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704864">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704860"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704884">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704860"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704885">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704860"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704447">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704444"/>
            </content>
        </type>
        <type derived="true" id="type.8704449">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704444"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704448">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704444"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704468">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704444"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704469">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704444"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704655">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704652"/>
            </content>
        </type>
        <type derived="true" id="type.8704657">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704656">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704652"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704676">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704652"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704677">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704652"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703193">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703190"/>
            </content>
        </type>
        <type derived="true" id="type.8703195">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703190"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703194">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703190"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703214">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703190"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703215">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703190"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703404">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Block*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703401"/>
            </content>
        </type>
        <type derived="true" id="type.8703406">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Block*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703401"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703405">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703401"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703425">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703401"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703426">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703401"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703615">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703612"/>
            </content>
        </type>
        <type derived="true" id="type.8703617">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703612"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703616">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703612"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703636">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703612"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703637">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703612"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704239">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704236"/>
            </content>
        </type>
        <type derived="true" id="type.8704241">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704236"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704240">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704236"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704260">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704236"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704261">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704236"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704031">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Script*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704028"/>
            </content>
        </type>
        <type derived="true" id="type.8704033">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Script*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704028"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704032">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704028"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704052">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704028"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704053">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704028"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703747">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703744"/>
            </content>
        </type>
        <type derived="true" id="type.8703749">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703744"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703748">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703744"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703768">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703744"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703769">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703744"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704787">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704784"/>
            </content>
        </type>
        <type derived="true" id="type.8704789">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704784"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704788">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704784"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704808">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704784"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704809">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704784"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704371">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704368"/>
            </content>
        </type>
        <type derived="true" id="type.8704373">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704368"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704372">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704368"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704392">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704368"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704393">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704368"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704579">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704576"/>
            </content>
        </type>
        <type derived="true" id="type.8704581">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704576"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704580">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704576"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704600">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704576"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704601">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704576"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703096">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703093"/>
            </content>
        </type>
        <type derived="true" id="type.8703098">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703093"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703097">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703093"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703117">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703093"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703118">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703093"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703328">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703325"/>
            </content>
        </type>
        <type derived="true" id="type.8703330">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703325"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703329">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703325"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703349">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703325"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703350">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703325"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703539">
            <name>const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703536"/>
            </content>
        </type>
        <type derived="true" id="type.8703541">
            <name>const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703536"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703540">
            <name>const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703536"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703560">
            <name>const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703536"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703561">
            <name>const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703536"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704163">
            <name>const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704160"/>
            </content>
        </type>
        <type derived="true" id="type.8704165">
            <name>const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704160"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704164">
            <name>const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704160"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704184">
            <name>const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704160"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704185">
            <name>const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704160"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703955">
            <name>const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703952"/>
            </content>
        </type>
        <type derived="true" id="type.8703957">
            <name>const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703952"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703956">
            <name>const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703952"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703976">
            <name>const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703952"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703977">
            <name>const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703952"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701130">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
            </content>
        </type>
        <type derived="true" id="type.8701275">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
            </content>
        </type>
        <type derived="true" id="type.8701291">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
            </content>
        </type>
        <type derived="true" id="type.8701204">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
            </content>
        </type>
        <type derived="true" id="type.8701259">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
            </content>
        </type>
        <type derived="true" id="type.8701130">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
            </content>
        </type>
        <type derived="true" id="type.8701132">
            <name>const Bucket&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701277">
            <name>const Bucket&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701261">
            <name>const Bucket&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701277">
            <name>const Bucket&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701206">
            <name>const Bucket&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701293">
            <name>const Bucket&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701292">
            <name>const Bucket&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701260">
            <name>const Bucket&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701205">
            <name>const Bucket&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701131">
            <name>const Bucket&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701276">
            <name>const Bucket&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701205">
            <name>const Bucket&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701151">
            <name>const Bucket&lt;T>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701225">
            <name>const Bucket&lt;T>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701152">
            <name>const Bucket&lt;T>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701226">
            <name>const Bucket&lt;T>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701152">
            <name>const Bucket&lt;T>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701313">
            <name>const Bucket&lt;ValueType></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
            </content>
        </type>
        <type derived="true" id="type.8701315">
            <name>const Bucket&lt;ValueType>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701314">
            <name>const Bucket&lt;ValueType>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701336">
            <name>const Bucket&lt;ValueType>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701337">
            <name>const Bucket&lt;ValueType>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.381">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573"/>
            </content>
        </type>
        <type derived="true" id="type.8700372">
            <name>const BufferedByteStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.382">
            <name>const ByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.8700368">
            <name>const ByteStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700165">
            <name>const CharClass</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="enumerated_type_CharClass_825BD0E92E069CC6BC59D5D117AD06076A653B4D"/>
            </content>
        </type>
        <type derived="true" id="type.8700167">
            <name>const CharClass&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="enumerated_type_CharClass_825BD0E92E069CC6BC59D5D117AD06076A653B4D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700166">
            <name>const CharClass*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="enumerated_type_CharClass_825BD0E92E069CC6BC59D5D117AD06076A653B4D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700162">
            <name>const CharClassTable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharClassTable_B24A43EB28B26916FCA6AA24AA09EDB0A1923A1A"/>
            </content>
        </type>
        <type derived="true" id="type.8700163">
            <name>const CharClassTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharClassTable_B24A43EB28B26916FCA6AA24AA09EDB0A1923A1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700161">
            <name>const CharClassTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharClassTable_B24A43EB28B26916FCA6AA24AA09EDB0A1923A1A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702818">
            <name>const CharT</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699899"/>
            </content>
        </type>
        <type derived="true" id="type.8702959">
            <name>const CharT</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699902"/>
            </content>
        </type>
        <type derived="true" id="type.8702724">
            <name>const CharT</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699897"/>
            </content>
        </type>
        <type derived="true" id="type.8702905">
            <name>const CharT</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699901"/>
            </content>
        </type>
        <type derived="true" id="type.8702865">
            <name>const CharT</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699900"/>
            </content>
        </type>
        <type derived="true" id="type.8702771">
            <name>const CharT</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699898"/>
            </content>
        </type>
        <type derived="true" id="type.8702677">
            <name>const CharT</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699896"/>
            </content>
        </type>
        <type derived="true" id="type.8702863">
            <name>const CharT&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699900"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702675">
            <name>const CharT&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699896"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702816">
            <name>const CharT&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699899"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702906">
            <name>const CharT&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699901"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702722">
            <name>const CharT&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699897"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702957">
            <name>const CharT&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699902"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702906">
            <name>const CharT&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699901"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702769">
            <name>const CharT&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699898"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702864">
            <name>const CharT*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699900"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702676">
            <name>const CharT*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699896"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702817">
            <name>const CharT*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699899"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702958">
            <name>const CharT*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699902"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702904">
            <name>const CharT*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699901"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702770">
            <name>const CharT*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699898"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702723">
            <name>const CharT*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699897"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700015">
            <name>const CharacterInfo</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharacterInfo_E7387AE78EC58246E84889A73F5B953D7D1E7336"/>
            </content>
        </type>
        <type derived="true" id="type.8700017">
            <name>const CharacterInfo&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharacterInfo_E7387AE78EC58246E84889A73F5B953D7D1E7336"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700016">
            <name>const CharacterInfo*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharacterInfo_E7387AE78EC58246E84889A73F5B953D7D1E7336"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700085">
            <name>const CharacterInfoPage</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharacterInfoPage_69DB089EE4A51A51BA9C5A5F28F2606E5F0A871D"/>
            </content>
        </type>
        <type derived="true" id="type.8700087">
            <name>const CharacterInfoPage&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharacterInfoPage_69DB089EE4A51A51BA9C5A5F28F2606E5F0A871D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700086">
            <name>const CharacterInfoPage*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharacterInfoPage_69DB089EE4A51A51BA9C5A5F28F2606E5F0A871D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705051">
            <name>const CharacterTable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharacterTable_0A8C28D5AD9E5EB7406E88B0F6CD21F3D0C1F854"/>
            </content>
        </type>
        <type derived="true" id="type.8705052">
            <name>const CharacterTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharacterTable_0A8C28D5AD9E5EB7406E88B0F6CD21F3D0C1F854"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705050">
            <name>const CharacterTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharacterTable_0A8C28D5AD9E5EB7406E88B0F6CD21F3D0C1F854"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699414">
            <name>const CodeFormatter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
            </content>
        </type>
        <type derived="true" id="type.8699416">
            <name>const CodeFormatter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699415">
            <name>const CodeFormatter*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.391">
            <name>const ConditionVariable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26"/>
            </content>
        </type>
        <type derived="true" id="type.8700392">
            <name>const ConditionVariable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.396">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
            </content>
        </type>
        <type derived="true" id="type.397">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.38">
            <name>const Counter&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700180"/>
            </content>
        </type>
        <type derived="true" id="type.8700185">
            <name>const Counter&lt;System.IO.ByteStream>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700180"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.260">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.267">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.268">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.229">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.228">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.227">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.247">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.231">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.222">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.219">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.236">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.249">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.253">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.237">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.238">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.245">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.8702281">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702417">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702193">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.239">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.220">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.223">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702595">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.232">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702381">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.254">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702171">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702345">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702561">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.261">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702259">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702149">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702595">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.230">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.270">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.251">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.8702215">
            <name>const Counter&lt;U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702625">
            <name>const Counter&lt;U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702453">
            <name>const Counter&lt;U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702625">
            <name>const Counter&lt;U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699844">
            <name>const CounterBase</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CounterBase_10B5255B4C6CEAF6663DDD03CCD6EFED9BFD9254"/>
            </content>
        </type>
        <type derived="true" id="type.8699846">
            <name>const CounterBase&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CounterBase_10B5255B4C6CEAF6663DDD03CCD6EFED9BFD9254"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699845">
            <name>const CounterBase*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CounterBase_10B5255B4C6CEAF6663DDD03CCD6EFED9BFD9254"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699944">
            <name>const Date</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Date_351EEEABF504E83A9336BC83CE10D3450072F1E8"/>
            </content>
        </type>
        <type derived="true" id="type.8699946">
            <name>const Date&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Date_351EEEABF504E83A9336BC83CE10D3450072F1E8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699945">
            <name>const Date*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Date_351EEEABF504E83A9336BC83CE10D3450072F1E8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705245">
            <name>const Date*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Date_351EEEABF504E83A9336BC83CE10D3450072F1E8"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705244">
            <name>const Date**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Date_351EEEABF504E83A9336BC83CE10D3450072F1E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699950">
            <name>const DateTime</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DateTime_1CCCF400289F734AAAB9BC0562E46C77468B398E"/>
            </content>
        </type>
        <type derived="true" id="type.8699952">
            <name>const DateTime&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DateTime_1CCCF400289F734AAAB9BC0562E46C77468B398E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699951">
            <name>const DateTime*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DateTime_1CCCF400289F734AAAB9BC0562E46C77468B398E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705251">
            <name>const DateTime*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DateTime_1CCCF400289F734AAAB9BC0562E46C77468B398E"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705250">
            <name>const DateTime**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DateTime_1CCCF400289F734AAAB9BC0562E46C77468B398E"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700620">
            <name>const Divides&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Divides_T_492CA08096256C1214EEE93541699563D4718ED6"/>
            </content>
        </type>
        <type derived="true" id="type.8700622">
            <name>const Divides&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Divides_T_492CA08096256C1214EEE93541699563D4718ED6"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700621">
            <name>const Divides&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Divides_T_492CA08096256C1214EEE93541699563D4718ED6"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699937">
            <name>const Duration</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
            </content>
        </type>
        <type derived="true" id="type.8699939">
            <name>const Duration&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699938">
            <name>const Duration*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Duration_78813FE475939D533DB7A63066BE3D8FEB436151"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702668">
            <name>const Endl&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Endl_8E2537FC3949E4C290D6CAA3B15C71D5697AC895"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703145">
            <name>const EqualTo&lt;String&lt;char>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703144"/>
            </content>
        </type>
        <type derived="true" id="type.8703147">
            <name>const EqualTo&lt;String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703144"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703146">
            <name>const EqualTo&lt;String&lt;char>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703144"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703698">
            <name>const EqualTo&lt;System.Unicode.AgeId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703697"/>
            </content>
        </type>
        <type derived="true" id="type.8703700">
            <name>const EqualTo&lt;System.Unicode.AgeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703697"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703699">
            <name>const EqualTo&lt;System.Unicode.AgeId>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703697"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704738">
            <name>const EqualTo&lt;System.Unicode.AliasTypeId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704737"/>
            </content>
        </type>
        <type derived="true" id="type.8704740">
            <name>const EqualTo&lt;System.Unicode.AliasTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704739">
            <name>const EqualTo&lt;System.Unicode.AliasTypeId>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704737"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704322">
            <name>const EqualTo&lt;System.Unicode.BidiClassId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704321"/>
            </content>
        </type>
        <type derived="true" id="type.8704324">
            <name>const EqualTo&lt;System.Unicode.BidiClassId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704321"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704323">
            <name>const EqualTo&lt;System.Unicode.BidiClassId>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704321"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704530">
            <name>const EqualTo&lt;System.Unicode.BidiPairedBracketTypeId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704529"/>
            </content>
        </type>
        <type derived="true" id="type.8704532">
            <name>const EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704529"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704531">
            <name>const EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704529"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703047">
            <name>const EqualTo&lt;System.Unicode.BinaryPropertyId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703046"/>
            </content>
        </type>
        <type derived="true" id="type.8703049">
            <name>const EqualTo&lt;System.Unicode.BinaryPropertyId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703046"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703048">
            <name>const EqualTo&lt;System.Unicode.BinaryPropertyId>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703046"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703279">
            <name>const EqualTo&lt;System.Unicode.BlockId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703278"/>
            </content>
        </type>
        <type derived="true" id="type.8703281">
            <name>const EqualTo&lt;System.Unicode.BlockId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703278"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703280">
            <name>const EqualTo&lt;System.Unicode.BlockId>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703278"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703490">
            <name>const EqualTo&lt;System.Unicode.GeneralCategoryId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703489"/>
            </content>
        </type>
        <type derived="true" id="type.8703492">
            <name>const EqualTo&lt;System.Unicode.GeneralCategoryId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703489"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703491">
            <name>const EqualTo&lt;System.Unicode.GeneralCategoryId>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703489"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704114">
            <name>const EqualTo&lt;System.Unicode.NumericTypeId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704113"/>
            </content>
        </type>
        <type derived="true" id="type.8704116">
            <name>const EqualTo&lt;System.Unicode.NumericTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704113"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704115">
            <name>const EqualTo&lt;System.Unicode.NumericTypeId>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704113"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703906">
            <name>const EqualTo&lt;System.Unicode.ScriptId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703905"/>
            </content>
        </type>
        <type derived="true" id="type.8703908">
            <name>const EqualTo&lt;System.Unicode.ScriptId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703905"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703907">
            <name>const EqualTo&lt;System.Unicode.ScriptId>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703905"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700687">
            <name>const EqualTo&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_EqualTo_T_U_14A2E50AADEF78C814505DAF8677BBAB6EA3F9EA"/>
            </content>
        </type>
        <type derived="true" id="type.8700689">
            <name>const EqualTo&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_EqualTo_T_U_14A2E50AADEF78C814505DAF8677BBAB6EA3F9EA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700688">
            <name>const EqualTo&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_EqualTo_T_U_14A2E50AADEF78C814505DAF8677BBAB6EA3F9EA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700671">
            <name>const EqualTo&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
            </content>
        </type>
        <type derived="true" id="type.8700673">
            <name>const EqualTo&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700672">
            <name>const EqualTo&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699563">
            <name>const Exception</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
            </content>
        </type>
        <type derived="true" id="type.8699565">
            <name>const Exception&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699564">
            <name>const Exception*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699569">
            <name>const ExceptionPtr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExceptionPtr_3E313CB08B225E0124692C11F3BF8F26E971600C"/>
            </content>
        </type>
        <type derived="true" id="type.8699571">
            <name>const ExceptionPtr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExceptionPtr_3E313CB08B225E0124692C11F3BF8F26E971600C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699570">
            <name>const ExceptionPtr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExceptionPtr_3E313CB08B225E0124692C11F3BF8F26E971600C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700079">
            <name>const ExtendedCharacterInfo</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExtendedCharacterInfo_16A04F00C660DF07340D57AC4BB8303B8A7CBAD5"/>
            </content>
        </type>
        <type derived="true" id="type.8700081">
            <name>const ExtendedCharacterInfo&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExtendedCharacterInfo_16A04F00C660DF07340D57AC4BB8303B8A7CBAD5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700080">
            <name>const ExtendedCharacterInfo*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExtendedCharacterInfo_16A04F00C660DF07340D57AC4BB8303B8A7CBAD5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700097">
            <name>const ExtendedCharacterInfoHeader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExtendedCharacterInfoHeader_576C0EF15E9D47D0C66368F00AC7DC7E893196EA"/>
            </content>
        </type>
        <type derived="true" id="type.8700099">
            <name>const ExtendedCharacterInfoHeader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExtendedCharacterInfoHeader_576C0EF15E9D47D0C66368F00AC7DC7E893196EA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700098">
            <name>const ExtendedCharacterInfoHeader*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExtendedCharacterInfoHeader_576C0EF15E9D47D0C66368F00AC7DC7E893196EA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700091">
            <name>const ExtendedCharacterInfoPage</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExtendedCharacterInfoPage_0C6801CB06DC546FE37445397210DCBF2F411EC7"/>
            </content>
        </type>
        <type derived="true" id="type.8700093">
            <name>const ExtendedCharacterInfoPage&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExtendedCharacterInfoPage_0C6801CB06DC546FE37445397210DCBF2F411EC7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700092">
            <name>const ExtendedCharacterInfoPage*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExtendedCharacterInfoPage_0C6801CB06DC546FE37445397210DCBF2F411EC7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699576">
            <name>const FileByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileByteStream_B5032C95DE0C760ED2354356BEFFAFF5F1422919"/>
            </content>
        </type>
        <type derived="true" id="type.8699578">
            <name>const FileByteStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileByteStream_B5032C95DE0C760ED2354356BEFFAFF5F1422919"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699577">
            <name>const FileByteStream*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileByteStream_B5032C95DE0C760ED2354356BEFFAFF5F1422919"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.383">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
            </content>
        </type>
        <type derived="true" id="type.384">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700492">
            <name>const ForwardList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
            </content>
        </type>
        <type derived="true" id="type.8700460">
            <name>const ForwardList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
            </content>
        </type>
        <type derived="true" id="type.8700492">
            <name>const ForwardList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
            </content>
        </type>
        <type derived="true" id="type.8700524">
            <name>const ForwardList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
            </content>
        </type>
        <type derived="true" id="type.8700494">
            <name>const ForwardList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700526">
            <name>const ForwardList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700462">
            <name>const ForwardList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700526">
            <name>const ForwardList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700493">
            <name>const ForwardList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700461">
            <name>const ForwardList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700525">
            <name>const ForwardList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700539">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
            </content>
        </type>
        <type derived="true" id="type.8700451">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
            </content>
        </type>
        <type derived="true" id="type.8700475">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
            </content>
        </type>
        <type derived="true" id="type.8700507">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
            </content>
        </type>
        <type derived="true" id="type.8700422">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
            </content>
        </type>
        <type derived="true" id="type.8700539">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
            </content>
        </type>
        <type derived="true" id="type.8700436">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
            </content>
        </type>
        <type derived="true" id="type.8700541">
            <name>const ForwardListNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700424">
            <name>const ForwardListNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700438">
            <name>const ForwardListNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700509">
            <name>const ForwardListNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700453">
            <name>const ForwardListNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700438">
            <name>const ForwardListNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700477">
            <name>const ForwardListNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700508">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700452">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700540">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700437">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700540">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700423">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700476">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNode_T_CFA262036869F0BEC4FC04EC7FF5675FC04811C4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700430">
            <name>const ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
            </content>
        </type>
        <type derived="true" id="type.8700445">
            <name>const ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
            </content>
        </type>
        <type derived="true" id="type.8700432">
            <name>const ForwardListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700447">
            <name>const ForwardListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700431">
            <name>const ForwardListNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700446">
            <name>const ForwardListNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700484">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
            </content>
        </type>
        <type derived="true" id="type.8700516">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
            </content>
        </type>
        <type derived="true" id="type.8700548">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
            </content>
        </type>
        <type derived="true" id="type.8700516">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
            </content>
        </type>
        <type derived="true" id="type.8700550">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700486">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700518">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700550">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700485">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700549">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700517">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700469">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
            </content>
        </type>
        <type derived="true" id="type.8700533">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
            </content>
        </type>
        <type derived="true" id="type.8700501">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
            </content>
        </type>
        <type derived="true" id="type.8700503">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700535">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700471">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700535">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700534">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700502">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700470">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700502">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703480">
            <name>const GeneralCategory</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GeneralCategory_86A96836F81F142768F75E4C134A416E3DB84E08"/>
            </content>
        </type>
        <type derived="true" id="type.8703481">
            <name>const GeneralCategory&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GeneralCategory_86A96836F81F142768F75E4C134A416E3DB84E08"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703479">
            <name>const GeneralCategory*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GeneralCategory_86A96836F81F142768F75E4C134A416E3DB84E08"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703513">
            <name>const GeneralCategory*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GeneralCategory_86A96836F81F142768F75E4C134A416E3DB84E08"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703669">
            <name>const GeneralCategory**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GeneralCategory_86A96836F81F142768F75E4C134A416E3DB84E08"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703488">
            <name>const GeneralCategoryId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="enumerated_type_GeneralCategoryId_24A6E0593487E0B8B5A9FD0D887B84C754C89A1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699981">
            <name>const GeneralCategoryTable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GeneralCategoryTable_3109B631555A0B27CBC86AC6578E1E5835FD0ADE"/>
            </content>
        </type>
        <type derived="true" id="type.8699983">
            <name>const GeneralCategoryTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GeneralCategoryTable_3109B631555A0B27CBC86AC6578E1E5835FD0ADE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699982">
            <name>const GeneralCategoryTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GeneralCategoryTable_3109B631555A0B27CBC86AC6578E1E5835FD0ADE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705523">
            <name>const GeneralCategoryTable*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GeneralCategoryTable_3109B631555A0B27CBC86AC6578E1E5835FD0ADE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705522">
            <name>const GeneralCategoryTable**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GeneralCategoryTable_3109B631555A0B27CBC86AC6578E1E5835FD0ADE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700777">
            <name>const Greater&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Greater_T_U_8097A7A2BB5CBC62974405469E34F560A2A4561A"/>
            </content>
        </type>
        <type derived="true" id="type.8700779">
            <name>const Greater&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Greater_T_U_8097A7A2BB5CBC62974405469E34F560A2A4561A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700778">
            <name>const Greater&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Greater_T_U_8097A7A2BB5CBC62974405469E34F560A2A4561A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700761">
            <name>const Greater&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Greater_T_56F5515BC602FB40A9BE53A6DC993CBA68A6C7B3"/>
            </content>
        </type>
        <type derived="true" id="type.8700763">
            <name>const Greater&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Greater_T_56F5515BC602FB40A9BE53A6DC993CBA68A6C7B3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700762">
            <name>const Greater&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Greater_T_56F5515BC602FB40A9BE53A6DC993CBA68A6C7B3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700837">
            <name>const GreaterOrEqualTo&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_GreaterOrEqualTo_T_U_14D473CB3BBA1A1EF7E93DE4077EE3698F3D35B2"/>
            </content>
        </type>
        <type derived="true" id="type.8700839">
            <name>const GreaterOrEqualTo&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_GreaterOrEqualTo_T_U_14D473CB3BBA1A1EF7E93DE4077EE3698F3D35B2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700838">
            <name>const GreaterOrEqualTo&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_GreaterOrEqualTo_T_U_14D473CB3BBA1A1EF7E93DE4077EE3698F3D35B2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700821">
            <name>const GreaterOrEqualTo&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_GreaterOrEqualTo_T_D83F542E1B6C6AB124B1053122D7FA664A7A913A"/>
            </content>
        </type>
        <type derived="true" id="type.8700823">
            <name>const GreaterOrEqualTo&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_GreaterOrEqualTo_T_D83F542E1B6C6AB124B1053122D7FA664A7A913A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700822">
            <name>const GreaterOrEqualTo&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_GreaterOrEqualTo_T_D83F542E1B6C6AB124B1053122D7FA664A7A913A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701022">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.8700943">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.8701024">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700945">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701023">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700944">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703792">
            <name>const HashMap&lt;String&lt;char>, Age*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703789"/>
            </content>
        </type>
        <type derived="true" id="type.8703794">
            <name>const HashMap&lt;String&lt;char>, Age*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703789"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703793">
            <name>const HashMap&lt;String&lt;char>, Age*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703789"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704832">
            <name>const HashMap&lt;String&lt;char>, AliasType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704829"/>
            </content>
        </type>
        <type derived="true" id="type.8704834">
            <name>const HashMap&lt;String&lt;char>, AliasType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704829"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704833">
            <name>const HashMap&lt;String&lt;char>, AliasType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704829"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704416">
            <name>const HashMap&lt;String&lt;char>, BidiClass*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704413"/>
            </content>
        </type>
        <type derived="true" id="type.8704418">
            <name>const HashMap&lt;String&lt;char>, BidiClass*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704413"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704417">
            <name>const HashMap&lt;String&lt;char>, BidiClass*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704413"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704624">
            <name>const HashMap&lt;String&lt;char>, BidiPairedBracketType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704621"/>
            </content>
        </type>
        <type derived="true" id="type.8704626">
            <name>const HashMap&lt;String&lt;char>, BidiPairedBracketType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704621"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704625">
            <name>const HashMap&lt;String&lt;char>, BidiPairedBracketType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704621"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703162">
            <name>const HashMap&lt;String&lt;char>, BinaryProperty*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703159"/>
            </content>
        </type>
        <type derived="true" id="type.8703164">
            <name>const HashMap&lt;String&lt;char>, BinaryProperty*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703159"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703163">
            <name>const HashMap&lt;String&lt;char>, BinaryProperty*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703159"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703373">
            <name>const HashMap&lt;String&lt;char>, Block*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703370"/>
            </content>
        </type>
        <type derived="true" id="type.8703375">
            <name>const HashMap&lt;String&lt;char>, Block*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703370"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703374">
            <name>const HashMap&lt;String&lt;char>, Block*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703370"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703584">
            <name>const HashMap&lt;String&lt;char>, GeneralCategory*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703581"/>
            </content>
        </type>
        <type derived="true" id="type.8703586">
            <name>const HashMap&lt;String&lt;char>, GeneralCategory*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703581"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703585">
            <name>const HashMap&lt;String&lt;char>, GeneralCategory*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703581"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704208">
            <name>const HashMap&lt;String&lt;char>, NumericType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704205"/>
            </content>
        </type>
        <type derived="true" id="type.8704210">
            <name>const HashMap&lt;String&lt;char>, NumericType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704205"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704209">
            <name>const HashMap&lt;String&lt;char>, NumericType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704205"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704000">
            <name>const HashMap&lt;String&lt;char>, Script*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703997"/>
            </content>
        </type>
        <type derived="true" id="type.8704002">
            <name>const HashMap&lt;String&lt;char>, Script*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703997"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704001">
            <name>const HashMap&lt;String&lt;char>, Script*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703997"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703715">
            <name>const HashMap&lt;System.Unicode.AgeId, Age*, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703712"/>
            </content>
        </type>
        <type derived="true" id="type.8703717">
            <name>const HashMap&lt;System.Unicode.AgeId, Age*, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703712"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703716">
            <name>const HashMap&lt;System.Unicode.AgeId, Age*, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703712"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704755">
            <name>const HashMap&lt;System.Unicode.AliasTypeId, AliasType*, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704752"/>
            </content>
        </type>
        <type derived="true" id="type.8704757">
            <name>const HashMap&lt;System.Unicode.AliasTypeId, AliasType*, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704752"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704756">
            <name>const HashMap&lt;System.Unicode.AliasTypeId, AliasType*, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704752"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704339">
            <name>const HashMap&lt;System.Unicode.BidiClassId, BidiClass*, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704336"/>
            </content>
        </type>
        <type derived="true" id="type.8704341">
            <name>const HashMap&lt;System.Unicode.BidiClassId, BidiClass*, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704336"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704340">
            <name>const HashMap&lt;System.Unicode.BidiClassId, BidiClass*, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704336"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704547">
            <name>const HashMap&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704544"/>
            </content>
        </type>
        <type derived="true" id="type.8704549">
            <name>const HashMap&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704548">
            <name>const HashMap&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704544"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703064">
            <name>const HashMap&lt;System.Unicode.BinaryPropertyId, BinaryProperty*, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703061"/>
            </content>
        </type>
        <type derived="true" id="type.8703066">
            <name>const HashMap&lt;System.Unicode.BinaryPropertyId, BinaryProperty*, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703061"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703065">
            <name>const HashMap&lt;System.Unicode.BinaryPropertyId, BinaryProperty*, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703061"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703296">
            <name>const HashMap&lt;System.Unicode.BlockId, Block*, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703293"/>
            </content>
        </type>
        <type derived="true" id="type.8703298">
            <name>const HashMap&lt;System.Unicode.BlockId, Block*, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703293"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703297">
            <name>const HashMap&lt;System.Unicode.BlockId, Block*, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703293"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703507">
            <name>const HashMap&lt;System.Unicode.GeneralCategoryId, GeneralCategory*, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703504"/>
            </content>
        </type>
        <type derived="true" id="type.8703509">
            <name>const HashMap&lt;System.Unicode.GeneralCategoryId, GeneralCategory*, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703504"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703508">
            <name>const HashMap&lt;System.Unicode.GeneralCategoryId, GeneralCategory*, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703504"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704131">
            <name>const HashMap&lt;System.Unicode.NumericTypeId, NumericType*, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704128"/>
            </content>
        </type>
        <type derived="true" id="type.8704133">
            <name>const HashMap&lt;System.Unicode.NumericTypeId, NumericType*, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704128"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704132">
            <name>const HashMap&lt;System.Unicode.NumericTypeId, NumericType*, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704128"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703923">
            <name>const HashMap&lt;System.Unicode.ScriptId, Script*, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703920"/>
            </content>
        </type>
        <type derived="true" id="type.8703925">
            <name>const HashMap&lt;System.Unicode.ScriptId, Script*, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703920"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703924">
            <name>const HashMap&lt;System.Unicode.ScriptId, Script*, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703920"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701100">
            <name>const HashSet&lt;T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashSet_T_H_C_6247CEC2AE0E22CFEFEC71837C21FA087B7840DC"/>
            </content>
        </type>
        <type derived="true" id="type.8701174">
            <name>const HashSet&lt;T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashSet_T_H_C_6247CEC2AE0E22CFEFEC71837C21FA087B7840DC"/>
            </content>
        </type>
        <type derived="true" id="type.8701176">
            <name>const HashSet&lt;T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashSet_T_H_C_6247CEC2AE0E22CFEFEC71837C21FA087B7840DC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701102">
            <name>const HashSet&lt;T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashSet_T_H_C_6247CEC2AE0E22CFEFEC71837C21FA087B7840DC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701176">
            <name>const HashSet&lt;T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashSet_T_H_C_6247CEC2AE0E22CFEFEC71837C21FA087B7840DC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701101">
            <name>const HashSet&lt;T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashSet_T_H_C_6247CEC2AE0E22CFEFEC71837C21FA087B7840DC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701175">
            <name>const HashSet&lt;T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashSet_T_H_C_6247CEC2AE0E22CFEFEC71837C21FA087B7840DC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705344">
            <name>const Hasher&lt;String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703138"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705578">
            <name>const Hasher&lt;System.Unicode.AgeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703690"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705988">
            <name>const Hasher&lt;System.Unicode.AliasTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704730"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705824">
            <name>const Hasher&lt;System.Unicode.BidiClassId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704314"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705906">
            <name>const Hasher&lt;System.Unicode.BidiPairedBracketTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704522"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705309">
            <name>const Hasher&lt;System.Unicode.BinaryPropertyId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703039"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705414">
            <name>const Hasher&lt;System.Unicode.BlockId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703271"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705496">
            <name>const Hasher&lt;System.Unicode.GeneralCategoryId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703482"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705742">
            <name>const Hasher&lt;System.Unicode.NumericTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704106"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705660">
            <name>const Hasher&lt;System.Unicode.ScriptId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703898"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700964">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.8701043">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.8700964">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.8701045">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700966">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701044">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700965">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701299">
            <name>const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
            </content>
        </type>
        <type derived="true" id="type.8701301">
            <name>const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701300">
            <name>const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703811">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703808"/>
            </content>
        </type>
        <type derived="true" id="type.8703813">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703808"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703812">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703808"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704851">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704848"/>
            </content>
        </type>
        <type derived="true" id="type.8704853">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704848"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704852">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704848"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704435">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704432"/>
            </content>
        </type>
        <type derived="true" id="type.8704437">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704432"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704436">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704432"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704643">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704640"/>
            </content>
        </type>
        <type derived="true" id="type.8704645">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704640"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704644">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704640"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703181">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703178"/>
            </content>
        </type>
        <type derived="true" id="type.8703183">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703178"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703182">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703178"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703392">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703389"/>
            </content>
        </type>
        <type derived="true" id="type.8703394">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703389"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703393">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703389"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703603">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703600"/>
            </content>
        </type>
        <type derived="true" id="type.8703605">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703600"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703604">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703600"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704227">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704224"/>
            </content>
        </type>
        <type derived="true" id="type.8704229">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704224"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704228">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704224"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704019">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704016"/>
            </content>
        </type>
        <type derived="true" id="type.8704021">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704016"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704020">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704016"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703735">
            <name>const Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703732"/>
            </content>
        </type>
        <type derived="true" id="type.8703737">
            <name>const Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703732"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703736">
            <name>const Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703732"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704775">
            <name>const Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704772"/>
            </content>
        </type>
        <type derived="true" id="type.8704777">
            <name>const Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704772"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704776">
            <name>const Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704772"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704359">
            <name>const Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704356"/>
            </content>
        </type>
        <type derived="true" id="type.8704361">
            <name>const Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704356"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704360">
            <name>const Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704356"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704567">
            <name>const Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704564"/>
            </content>
        </type>
        <type derived="true" id="type.8704569">
            <name>const Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704564"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704568">
            <name>const Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704564"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703084">
            <name>const Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703081"/>
            </content>
        </type>
        <type derived="true" id="type.8703086">
            <name>const Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703081"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703085">
            <name>const Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703081"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703316">
            <name>const Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703313"/>
            </content>
        </type>
        <type derived="true" id="type.8703318">
            <name>const Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703313"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703317">
            <name>const Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703313"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703527">
            <name>const Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703524"/>
            </content>
        </type>
        <type derived="true" id="type.8703529">
            <name>const Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703524"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703528">
            <name>const Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703524"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704151">
            <name>const Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704148"/>
            </content>
        </type>
        <type derived="true" id="type.8704153">
            <name>const Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704148"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704152">
            <name>const Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704148"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703943">
            <name>const Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703940"/>
            </content>
        </type>
        <type derived="true" id="type.8703945">
            <name>const Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703940"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703944">
            <name>const Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703940"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701116">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
            </content>
        </type>
        <type derived="true" id="type.8701190">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
            </content>
        </type>
        <type derived="true" id="type.8701192">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701118">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701192">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701191">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701117">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701191">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700970">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700967"/>
            </content>
        </type>
        <type derived="true" id="type.8701049">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701046"/>
            </content>
        </type>
        <type derived="true" id="type.8700972">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700967"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701051">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701046"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700971">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700967"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701050">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701046"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700984">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700981"/>
            </content>
        </type>
        <type derived="true" id="type.8701063">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701060"/>
            </content>
        </type>
        <type derived="true" id="type.8701065">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701060"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700986">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700985">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700981"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701064">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701060"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703817">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703814"/>
            </content>
        </type>
        <type derived="true" id="type.8703819">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703814"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703818">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703814"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703831">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, const Pair&lt;String&lt;char>, Age*>&amp;, const Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703828"/>
            </content>
        </type>
        <type derived="true" id="type.8703833">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, const Pair&lt;String&lt;char>, Age*>&amp;, const Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703828"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703832">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, const Pair&lt;String&lt;char>, Age*>&amp;, const Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703828"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704857">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704854"/>
            </content>
        </type>
        <type derived="true" id="type.8704859">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704854"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704858">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704854"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704871">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, const Pair&lt;String&lt;char>, AliasType*>&amp;, const Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704868"/>
            </content>
        </type>
        <type derived="true" id="type.8704873">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, const Pair&lt;String&lt;char>, AliasType*>&amp;, const Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704868"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704872">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, const Pair&lt;String&lt;char>, AliasType*>&amp;, const Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704868"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704441">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704438"/>
            </content>
        </type>
        <type derived="true" id="type.8704443">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704438"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704442">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704438"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704455">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, const Pair&lt;String&lt;char>, BidiClass*>&amp;, const Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704452"/>
            </content>
        </type>
        <type derived="true" id="type.8704457">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, const Pair&lt;String&lt;char>, BidiClass*>&amp;, const Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704456">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, const Pair&lt;String&lt;char>, BidiClass*>&amp;, const Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704452"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704649">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704646"/>
            </content>
        </type>
        <type derived="true" id="type.8704651">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704646"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704650">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704646"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704663">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, const Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704660"/>
            </content>
        </type>
        <type derived="true" id="type.8704665">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, const Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704660"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704664">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, const Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704660"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703187">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703184"/>
            </content>
        </type>
        <type derived="true" id="type.8703189">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703184"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703188">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703184"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703201">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, const Pair&lt;String&lt;char>, BinaryProperty*>&amp;, const Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703198"/>
            </content>
        </type>
        <type derived="true" id="type.8703203">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, const Pair&lt;String&lt;char>, BinaryProperty*>&amp;, const Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703198"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703202">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, const Pair&lt;String&lt;char>, BinaryProperty*>&amp;, const Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703198"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703398">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703395"/>
            </content>
        </type>
        <type derived="true" id="type.8703400">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703395"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703399">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703395"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703412">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, const Pair&lt;String&lt;char>, Block*>&amp;, const Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703409"/>
            </content>
        </type>
        <type derived="true" id="type.8703414">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, const Pair&lt;String&lt;char>, Block*>&amp;, const Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703409"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703413">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, const Pair&lt;String&lt;char>, Block*>&amp;, const Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703409"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703609">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703606"/>
            </content>
        </type>
        <type derived="true" id="type.8703611">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703606"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703610">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703606"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703623">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, const Pair&lt;String&lt;char>, GeneralCategory*>&amp;, const Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703620"/>
            </content>
        </type>
        <type derived="true" id="type.8703625">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, const Pair&lt;String&lt;char>, GeneralCategory*>&amp;, const Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703620"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703624">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, const Pair&lt;String&lt;char>, GeneralCategory*>&amp;, const Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703620"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704233">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704230"/>
            </content>
        </type>
        <type derived="true" id="type.8704235">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704230"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704234">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704230"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704247">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, const Pair&lt;String&lt;char>, NumericType*>&amp;, const Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704244"/>
            </content>
        </type>
        <type derived="true" id="type.8704249">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, const Pair&lt;String&lt;char>, NumericType*>&amp;, const Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704244"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704248">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, const Pair&lt;String&lt;char>, NumericType*>&amp;, const Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704244"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704025">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704022"/>
            </content>
        </type>
        <type derived="true" id="type.8704027">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704022"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704026">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704022"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704039">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, const Pair&lt;String&lt;char>, Script*>&amp;, const Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704036"/>
            </content>
        </type>
        <type derived="true" id="type.8704041">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, const Pair&lt;String&lt;char>, Script*>&amp;, const Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704036"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704040">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, const Pair&lt;String&lt;char>, Script*>&amp;, const Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704036"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703741">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703738"/>
            </content>
        </type>
        <type derived="true" id="type.8703743">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703738"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703742">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703738"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703755">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, const Pair&lt;System.Unicode.AgeId, Age*>&amp;, const Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703752"/>
            </content>
        </type>
        <type derived="true" id="type.8703757">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, const Pair&lt;System.Unicode.AgeId, Age*>&amp;, const Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703752"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703756">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, const Pair&lt;System.Unicode.AgeId, Age*>&amp;, const Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703752"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704781">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704778"/>
            </content>
        </type>
        <type derived="true" id="type.8704783">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704778"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704782">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704778"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704795">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704792"/>
            </content>
        </type>
        <type derived="true" id="type.8704797">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704792"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704796">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704792"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704365">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704362"/>
            </content>
        </type>
        <type derived="true" id="type.8704367">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704362"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704366">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704362"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704379">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704376"/>
            </content>
        </type>
        <type derived="true" id="type.8704381">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704376"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704380">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704376"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704573">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704570"/>
            </content>
        </type>
        <type derived="true" id="type.8704575">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704570"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704574">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704570"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704587">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704584"/>
            </content>
        </type>
        <type derived="true" id="type.8704589">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704584"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704588">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704584"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703090">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703087"/>
            </content>
        </type>
        <type derived="true" id="type.8703092">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703087"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703091">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703087"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703104">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703101"/>
            </content>
        </type>
        <type derived="true" id="type.8703106">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703101"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703105">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703101"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703322">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703319"/>
            </content>
        </type>
        <type derived="true" id="type.8703324">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703319"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703323">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703319"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703336">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, const Pair&lt;System.Unicode.BlockId, Block*>&amp;, const Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703333"/>
            </content>
        </type>
        <type derived="true" id="type.8703338">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, const Pair&lt;System.Unicode.BlockId, Block*>&amp;, const Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703333"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703337">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, const Pair&lt;System.Unicode.BlockId, Block*>&amp;, const Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703333"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703533">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703530"/>
            </content>
        </type>
        <type derived="true" id="type.8703535">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703530"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703534">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703530"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703547">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703544"/>
            </content>
        </type>
        <type derived="true" id="type.8703549">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703548">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703544"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704157">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704154"/>
            </content>
        </type>
        <type derived="true" id="type.8704159">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704154"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704158">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704154"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704171">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704168"/>
            </content>
        </type>
        <type derived="true" id="type.8704173">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704168"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704172">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704168"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703949">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703946"/>
            </content>
        </type>
        <type derived="true" id="type.8703951">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703946"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703950">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703946"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703963">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, const Pair&lt;System.Unicode.ScriptId, Script*>&amp;, const Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703960"/>
            </content>
        </type>
        <type derived="true" id="type.8703965">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, const Pair&lt;System.Unicode.ScriptId, Script*>&amp;, const Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703960"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703964">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, const Pair&lt;System.Unicode.ScriptId, Script*>&amp;, const Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703960"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701267">
            <name>const HashtableIterator&lt;T, R, P, H></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
            </content>
        </type>
        <type derived="true" id="type.8701283">
            <name>const HashtableIterator&lt;T, R, P, H></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
            </content>
        </type>
        <type derived="true" id="type.8701267">
            <name>const HashtableIterator&lt;T, R, P, H></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
            </content>
        </type>
        <type derived="true" id="type.8701285">
            <name>const HashtableIterator&lt;T, R, P, H>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701269">
            <name>const HashtableIterator&lt;T, R, P, H>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701284">
            <name>const HashtableIterator&lt;T, R, P, H>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701268">
            <name>const HashtableIterator&lt;T, R, P, H>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701284">
            <name>const HashtableIterator&lt;T, R, P, H>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701124">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
            </content>
        </type>
        <type derived="true" id="type.8701198">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
            </content>
        </type>
        <type derived="true" id="type.8701200">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701126">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701200">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701199">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701125">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701199">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_T_R_T_P_Hashtable_T_T_Identity_T_H_C_AF026EF237550C35905934BCDB9057106F742028"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701138">
            <name>const HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
            </content>
        </type>
        <type derived="true" id="type.8701212">
            <name>const HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
            </content>
        </type>
        <type derived="true" id="type.8701138">
            <name>const HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
            </content>
        </type>
        <type derived="true" id="type.8701140">
            <name>const HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701214">
            <name>const HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701213">
            <name>const HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701139">
            <name>const HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_T_T_C_R_T_C_P_Hashtable_T_T_Identity_T_H_C_FAD59928F1F25BBD9C358614B80AD10CBEE7424A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701307">
            <name>const HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_ValueType_ValueType_R_ValueType_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A8752F817C504EBDF51FB4440DE5237504D01981"/>
            </content>
        </type>
        <type derived="true" id="type.8701309">
            <name>const HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_ValueType_ValueType_R_ValueType_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A8752F817C504EBDF51FB4440DE5237504D01981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701308">
            <name>const HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_ValueType_ValueType_R_ValueType_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A8752F817C504EBDF51FB4440DE5237504D01981"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701322">
            <name>const HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_ValueType_ValueType_C_R_ValueType_C_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_1FA3480F54A3A001A9D02C46FBC4C609EBAD055C"/>
            </content>
        </type>
        <type derived="true" id="type.8701324">
            <name>const HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_ValueType_ValueType_C_R_ValueType_C_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_1FA3480F54A3A001A9D02C46FBC4C609EBAD055C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701323">
            <name>const HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashtableIterator_ValueType_ValueType_C_R_ValueType_C_P_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_1FA3480F54A3A001A9D02C46FBC4C609EBAD055C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700130">
            <name>const I&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699290"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700116">
            <name>const I&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699264"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700125">
            <name>const I&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699288"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699586">
            <name>const IOBuffer</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_IOBuffer_7AC61842AD3FCA40A4176E0D72E981B672D7E222"/>
            </content>
        </type>
        <type derived="true" id="type.8699588">
            <name>const IOBuffer&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_IOBuffer_7AC61842AD3FCA40A4176E0D72E981B672D7E222"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699587">
            <name>const IOBuffer*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_IOBuffer_7AC61842AD3FCA40A4176E0D72E981B672D7E222"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702000">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
            </content>
        </type>
        <type derived="true" id="type.8702057">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
            </content>
        </type>
        <type derived="true" id="type.8701104">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
            </content>
        </type>
        <type derived="true" id="type.8700661">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
            </content>
        </type>
        <type derived="true" id="type.8702057">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
            </content>
        </type>
        <type derived="true" id="type.8701943">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
            </content>
        </type>
        <type derived="true" id="type.8701178">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
            </content>
        </type>
        <type derived="true" id="type.8702002">
            <name>const Identity&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701945">
            <name>const Identity&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701106">
            <name>const Identity&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700663">
            <name>const Identity&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702059">
            <name>const Identity&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701180">
            <name>const Identity&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702059">
            <name>const Identity&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701944">
            <name>const Identity&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702001">
            <name>const Identity&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700662">
            <name>const Identity&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701105">
            <name>const Identity&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701179">
            <name>const Identity&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702058">
            <name>const Identity&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699592">
            <name>const InputFileStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InputFileStream_D716B24DACCF956B86E85D3953020F7FF92665A3"/>
            </content>
        </type>
        <type derived="true" id="type.8699594">
            <name>const InputFileStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InputFileStream_D716B24DACCF956B86E85D3953020F7FF92665A3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699593">
            <name>const InputFileStream*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InputFileStream_D716B24DACCF956B86E85D3953020F7FF92665A3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699877">
            <name>const InputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InputStream_B895ABA4BFD9E6393A7395627FF850EE42AE55EB"/>
            </content>
        </type>
        <type derived="true" id="type.8699879">
            <name>const InputStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InputStream_B895ABA4BFD9E6393A7395627FF850EE42AE55EB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699878">
            <name>const InputStream*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InputStream_B895ABA4BFD9E6393A7395627FF850EE42AE55EB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699906">
            <name>const InputStringStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InputStringStream_5711AC4066734B8F1EDAE3C055CF6DFF3ED3EF8F"/>
            </content>
        </type>
        <type derived="true" id="type.8699908">
            <name>const InputStringStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InputStringStream_5711AC4066734B8F1EDAE3C055CF6DFF3ED3EF8F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699907">
            <name>const InputStringStream*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InputStringStream_5711AC4066734B8F1EDAE3C055CF6DFF3ED3EF8F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.385">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
            </content>
        </type>
        <type derived="true" id="type.386">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701028">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699697"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.122">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699693"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.162">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.209">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699829"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.145">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699722"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700747">
            <name>const Less&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Less_T_U_22FB6450300AEAA1A9EC326C6610B50C250EE819"/>
            </content>
        </type>
        <type derived="true" id="type.8700749">
            <name>const Less&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Less_T_U_22FB6450300AEAA1A9EC326C6610B50C250EE819"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700748">
            <name>const Less&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Less_T_U_22FB6450300AEAA1A9EC326C6610B50C250EE819"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700731">
            <name>const Less&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Less_T_F840BD6533DFD3706784C819E04FA4FE41C4F3D2"/>
            </content>
        </type>
        <type derived="true" id="type.8700733">
            <name>const Less&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Less_T_F840BD6533DFD3706784C819E04FA4FE41C4F3D2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700732">
            <name>const Less&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Less_T_F840BD6533DFD3706784C819E04FA4FE41C4F3D2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700807">
            <name>const LessOrEqualTo&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LessOrEqualTo_T_U_6A014DB3656C60BE872B2EF7005C7C65535BC3FB"/>
            </content>
        </type>
        <type derived="true" id="type.8700809">
            <name>const LessOrEqualTo&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LessOrEqualTo_T_U_6A014DB3656C60BE872B2EF7005C7C65535BC3FB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700808">
            <name>const LessOrEqualTo&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LessOrEqualTo_T_U_6A014DB3656C60BE872B2EF7005C7C65535BC3FB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700791">
            <name>const LessOrEqualTo&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LessOrEqualTo_T_251E3B4B29A8A84484BDE851F06605C1B3E70332"/>
            </content>
        </type>
        <type derived="true" id="type.8700793">
            <name>const LessOrEqualTo&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LessOrEqualTo_T_251E3B4B29A8A84484BDE851F06605C1B3E70332"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700792">
            <name>const LessOrEqualTo&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LessOrEqualTo_T_251E3B4B29A8A84484BDE851F06605C1B3E70332"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701409">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
            </content>
        </type>
        <type derived="true" id="type.8701439">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
            </content>
        </type>
        <type derived="true" id="type.8701499">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
            </content>
        </type>
        <type derived="true" id="type.8701469">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
            </content>
        </type>
        <type derived="true" id="type.8701373">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
            </content>
        </type>
        <type derived="true" id="type.8701409">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
            </content>
        </type>
        <type derived="true" id="type.8701375">
            <name>const LinkedList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701411">
            <name>const LinkedList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701441">
            <name>const LinkedList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701501">
            <name>const LinkedList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701471">
            <name>const LinkedList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701501">
            <name>const LinkedList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701470">
            <name>const LinkedList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701500">
            <name>const LinkedList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701440">
            <name>const LinkedList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701410">
            <name>const LinkedList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701374">
            <name>const LinkedList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701513">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
            </content>
        </type>
        <type derived="true" id="type.8701453">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
            </content>
        </type>
        <type derived="true" id="type.8701359">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
            </content>
        </type>
        <type derived="true" id="type.8701513">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
            </content>
        </type>
        <type derived="true" id="type.8701483">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
            </content>
        </type>
        <type derived="true" id="type.8701423">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
            </content>
        </type>
        <type derived="true" id="type.8701387">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
            </content>
        </type>
        <type derived="true" id="type.8701361">
            <name>const LinkedListNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701389">
            <name>const LinkedListNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701455">
            <name>const LinkedListNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701485">
            <name>const LinkedListNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701515">
            <name>const LinkedListNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701425">
            <name>const LinkedListNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701484">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701388">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701454">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701360">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701424">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701514">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701424">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNode_T_E984857337D4F8CA3D0E27E987E4446581DF41D5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701403">
            <name>const LinkedListNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_R_P_1B6A4ECB2747EF21647DCDFB3EA5E3CFB23B08EF"/>
            </content>
        </type>
        <type derived="true" id="type.8701367">
            <name>const LinkedListNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_R_P_1B6A4ECB2747EF21647DCDFB3EA5E3CFB23B08EF"/>
            </content>
        </type>
        <type derived="true" id="type.8701405">
            <name>const LinkedListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_R_P_1B6A4ECB2747EF21647DCDFB3EA5E3CFB23B08EF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701369">
            <name>const LinkedListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_R_P_1B6A4ECB2747EF21647DCDFB3EA5E3CFB23B08EF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701405">
            <name>const LinkedListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_R_P_1B6A4ECB2747EF21647DCDFB3EA5E3CFB23B08EF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701368">
            <name>const LinkedListNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_R_P_1B6A4ECB2747EF21647DCDFB3EA5E3CFB23B08EF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701404">
            <name>const LinkedListNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_R_P_1B6A4ECB2747EF21647DCDFB3EA5E3CFB23B08EF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701447">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
            </content>
        </type>
        <type derived="true" id="type.8701477">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
            </content>
        </type>
        <type derived="true" id="type.8701507">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
            </content>
        </type>
        <type derived="true" id="type.8701381">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
            </content>
        </type>
        <type derived="true" id="type.8701417">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
            </content>
        </type>
        <type derived="true" id="type.8701449">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701419">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701479">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701509">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701383">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701479">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701418">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701448">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701382">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701508">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701478">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701382">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_R_T_P_30CDE2D9CDC9CF3F5C5731CE03D4045A46E65F46"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701396">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
            </content>
        </type>
        <type derived="true" id="type.8701432">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
            </content>
        </type>
        <type derived="true" id="type.8701462">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
            </content>
        </type>
        <type derived="true" id="type.8701432">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
            </content>
        </type>
        <type derived="true" id="type.8701492">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
            </content>
        </type>
        <type derived="true" id="type.8701522">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
            </content>
        </type>
        <type derived="true" id="type.8701494">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701464">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701398">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701434">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701464">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701524">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701397">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701433">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701463">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701523">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701493">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LinkedListNodeIterator_T_T_C_R_T_C_P_41C51E4245BFB149D1DB9525BF1292D1687BA1F9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703874">
            <name>const List&lt;Age*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703871"/>
            </content>
        </type>
        <type derived="true" id="type.8703876">
            <name>const List&lt;Age*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703871"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703875">
            <name>const List&lt;Age*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703871"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704914">
            <name>const List&lt;AliasType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704911"/>
            </content>
        </type>
        <type derived="true" id="type.8704916">
            <name>const List&lt;AliasType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704911"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704915">
            <name>const List&lt;AliasType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704911"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704498">
            <name>const List&lt;BidiClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704495"/>
            </content>
        </type>
        <type derived="true" id="type.8704500">
            <name>const List&lt;BidiClass*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704495"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704499">
            <name>const List&lt;BidiClass*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704495"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704706">
            <name>const List&lt;BidiPairedBracketType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704703"/>
            </content>
        </type>
        <type derived="true" id="type.8704708">
            <name>const List&lt;BidiPairedBracketType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704703"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704707">
            <name>const List&lt;BidiPairedBracketType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704703"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703237">
            <name>const List&lt;BinaryProperty*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703234"/>
            </content>
        </type>
        <type derived="true" id="type.8703239">
            <name>const List&lt;BinaryProperty*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703234"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703238">
            <name>const List&lt;BinaryProperty*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703234"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703455">
            <name>const List&lt;Block*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703452"/>
            </content>
        </type>
        <type derived="true" id="type.8703457">
            <name>const List&lt;Block*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703456">
            <name>const List&lt;Block*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703452"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700995">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700992"/>
            </content>
        </type>
        <type derived="true" id="type.8701073">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701070"/>
            </content>
        </type>
        <type derived="true" id="type.8700995">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700992"/>
            </content>
        </type>
        <type derived="true" id="type.8701075">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701070"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700997">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700992"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701075">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701070"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701074">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701070"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700996">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700992"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703841">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703838"/>
            </content>
        </type>
        <type derived="true" id="type.8703843">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703838"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703842">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703838"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704881">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704878"/>
            </content>
        </type>
        <type derived="true" id="type.8704883">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704878"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704882">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704878"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704465">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704462"/>
            </content>
        </type>
        <type derived="true" id="type.8704467">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704462"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704466">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704462"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704673">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704670"/>
            </content>
        </type>
        <type derived="true" id="type.8704675">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704674">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704670"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703211">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703208"/>
            </content>
        </type>
        <type derived="true" id="type.8703213">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703208"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703212">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703208"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703422">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703419"/>
            </content>
        </type>
        <type derived="true" id="type.8703424">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703419"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703423">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703419"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703633">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703630"/>
            </content>
        </type>
        <type derived="true" id="type.8703635">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703630"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703634">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703630"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704257">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704254"/>
            </content>
        </type>
        <type derived="true" id="type.8704259">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704254"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704258">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704254"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704049">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704046"/>
            </content>
        </type>
        <type derived="true" id="type.8704051">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704046"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704050">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704046"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703765">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703762"/>
            </content>
        </type>
        <type derived="true" id="type.8703767">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703762"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703766">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703762"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704805">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704802"/>
            </content>
        </type>
        <type derived="true" id="type.8704807">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704802"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704806">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704802"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704389">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704386"/>
            </content>
        </type>
        <type derived="true" id="type.8704391">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704386"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704390">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704386"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704597">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704594"/>
            </content>
        </type>
        <type derived="true" id="type.8704599">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704598">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704594"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703114">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703111"/>
            </content>
        </type>
        <type derived="true" id="type.8703116">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703111"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703115">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703111"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703346">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703343"/>
            </content>
        </type>
        <type derived="true" id="type.8703348">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703343"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703347">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703343"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703557">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703554"/>
            </content>
        </type>
        <type derived="true" id="type.8703559">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703554"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703558">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703554"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704181">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704178"/>
            </content>
        </type>
        <type derived="true" id="type.8704183">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704178"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704182">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704178"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703973">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703970"/>
            </content>
        </type>
        <type derived="true" id="type.8703975">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703970"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703974">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703970"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701148">
            <name>const List&lt;Bucket&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701145"/>
            </content>
        </type>
        <type derived="true" id="type.8701222">
            <name>const List&lt;Bucket&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701219"/>
            </content>
        </type>
        <type derived="true" id="type.8701148">
            <name>const List&lt;Bucket&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701145"/>
            </content>
        </type>
        <type derived="true" id="type.8701150">
            <name>const List&lt;Bucket&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701145"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701224">
            <name>const List&lt;Bucket&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701219"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701223">
            <name>const List&lt;Bucket&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701219"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701149">
            <name>const List&lt;Bucket&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701145"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701223">
            <name>const List&lt;Bucket&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701219"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701333">
            <name>const List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701330"/>
            </content>
        </type>
        <type derived="true" id="type.8701335">
            <name>const List&lt;Bucket&lt;ValueType>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701330"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701334">
            <name>const List&lt;Bucket&lt;ValueType>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701330"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703666">
            <name>const List&lt;GeneralCategory*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703663"/>
            </content>
        </type>
        <type derived="true" id="type.8703668">
            <name>const List&lt;GeneralCategory*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703663"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703667">
            <name>const List&lt;GeneralCategory*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703663"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704283">
            <name>const List&lt;NumericType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704280"/>
            </content>
        </type>
        <type derived="true" id="type.8704285">
            <name>const List&lt;NumericType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704280"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704284">
            <name>const List&lt;NumericType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704280"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704082">
            <name>const List&lt;Script*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704079"/>
            </content>
        </type>
        <type derived="true" id="type.8704084">
            <name>const List&lt;Script*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704083">
            <name>const List&lt;Script*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704079"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702980">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702977"/>
            </content>
        </type>
        <type derived="true" id="type.8702745">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702742"/>
            </content>
        </type>
        <type derived="true" id="type.8702933">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702930"/>
            </content>
        </type>
        <type derived="true" id="type.8702886">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702883"/>
            </content>
        </type>
        <type derived="true" id="type.8702698">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702695"/>
            </content>
        </type>
        <type derived="true" id="type.8702792">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702789"/>
            </content>
        </type>
        <type derived="true" id="type.8702839">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702836"/>
            </content>
        </type>
        <type derived="true" id="type.8702933">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702930"/>
            </content>
        </type>
        <type derived="true" id="type.8702794">
            <name>const List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702789"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702935">
            <name>const List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702930"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702747">
            <name>const List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702742"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702700">
            <name>const List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702695"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702982">
            <name>const List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702977"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702935">
            <name>const List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702930"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702888">
            <name>const List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702883"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702841">
            <name>const List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702836"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702981">
            <name>const List&lt;String&lt;CharT>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702977"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702934">
            <name>const List&lt;String&lt;CharT>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702930"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702887">
            <name>const List&lt;String&lt;CharT>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702883"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702699">
            <name>const List&lt;String&lt;CharT>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702695"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702746">
            <name>const List&lt;String&lt;CharT>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702742"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702793">
            <name>const List&lt;String&lt;CharT>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702789"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702840">
            <name>const List&lt;String&lt;CharT>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702836"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700231">
            <name>const List&lt;String&lt;char>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700228"/>
            </content>
        </type>
        <type derived="true" id="type.8700233">
            <name>const List&lt;String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700228"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700232">
            <name>const List&lt;String&lt;char>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700228"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700321">
            <name>const List&lt;String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700318"/>
            </content>
        </type>
        <type derived="true" id="type.8700323">
            <name>const List&lt;String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700318"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700322">
            <name>const List&lt;String&lt;uchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700318"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700276">
            <name>const List&lt;String&lt;wchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700273"/>
            </content>
        </type>
        <type derived="true" id="type.8700278">
            <name>const List&lt;String&lt;wchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700273"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700277">
            <name>const List&lt;String&lt;wchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700273"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704938">
            <name>const List&lt;System.Unicode.Alias></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704935"/>
            </content>
        </type>
        <type derived="true" id="type.8704940">
            <name>const List&lt;System.Unicode.Alias>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704935"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704939">
            <name>const List&lt;System.Unicode.Alias>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704935"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701783">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.8701529">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.8701556">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.8702647">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.8701583">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.8702649">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701531">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701785">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701585">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701558">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702649">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701557">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701784">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701584">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702648">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701530">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702648">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704967">
            <name>const List&lt;UniquePtr&lt;System.Unicode.CharacterInfo>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704964"/>
            </content>
        </type>
        <type derived="true" id="type.8704969">
            <name>const List&lt;UniquePtr&lt;System.Unicode.CharacterInfo>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704964"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704968">
            <name>const List&lt;UniquePtr&lt;System.Unicode.CharacterInfo>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704964"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705063">
            <name>const List&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705060"/>
            </content>
        </type>
        <type derived="true" id="type.8705065">
            <name>const List&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705060"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705064">
            <name>const List&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705060"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704995">
            <name>const List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704992"/>
            </content>
        </type>
        <type derived="true" id="type.8704997">
            <name>const List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704992"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704996">
            <name>const List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704992"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705098">
            <name>const List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705095"/>
            </content>
        </type>
        <type derived="true" id="type.8705100">
            <name>const List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705095"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705099">
            <name>const List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705095"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701685">
            <name>const List&lt;byte></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701682"/>
            </content>
        </type>
        <type derived="true" id="type.8701687">
            <name>const List&lt;byte>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701682"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701686">
            <name>const List&lt;byte>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701682"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705016">
            <name>const List&lt;uint></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705013"/>
            </content>
        </type>
        <type derived="true" id="type.8705018">
            <name>const List&lt;uint>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705013"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705017">
            <name>const List&lt;uint>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705013"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700347">
            <name>const List&lt;ulong></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700344"/>
            </content>
        </type>
        <type derived="true" id="type.8700349">
            <name>const List&lt;ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700344"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700348">
            <name>const List&lt;ulong>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700344"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.178">
            <name>const LockGuard&lt;Mtx></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
            </content>
        </type>
        <type derived="true" id="type.179">
            <name>const LockGuard&lt;Mtx>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.365">
            <name>const LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705037"/>
            </content>
        </type>
        <type derived="true" id="type.366">
            <name>const LockGuard&lt;System.Threading.Mutex>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705037"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700851">
            <name>const LogicalAnd&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LogicalAnd_T_E35A5C58E5FFDEFC94BC4F4A396B315039492654"/>
            </content>
        </type>
        <type derived="true" id="type.8700853">
            <name>const LogicalAnd&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LogicalAnd_T_E35A5C58E5FFDEFC94BC4F4A396B315039492654"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700852">
            <name>const LogicalAnd&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LogicalAnd_T_E35A5C58E5FFDEFC94BC4F4A396B315039492654"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700869">
            <name>const LogicalNot&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LogicalNot_T_8969C1691917DD5CA5D11CA01EF0BFCBDC2D486E"/>
            </content>
        </type>
        <type derived="true" id="type.8700871">
            <name>const LogicalNot&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LogicalNot_T_8969C1691917DD5CA5D11CA01EF0BFCBDC2D486E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700870">
            <name>const LogicalNot&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LogicalNot_T_8969C1691917DD5CA5D11CA01EF0BFCBDC2D486E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700863">
            <name>const LogicalOr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LogicalOr_T_7F2F87F001DF8F564ABE5F63CCA120661CE54294"/>
            </content>
        </type>
        <type derived="true" id="type.8700865">
            <name>const LogicalOr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LogicalOr_T_7F2F87F001DF8F564ABE5F63CCA120661CE54294"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700864">
            <name>const LogicalOr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LogicalOr_T_7F2F87F001DF8F564ABE5F63CCA120661CE54294"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701616">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.8701618">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701617">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699756">
            <name>const MemoryByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_MemoryByteStream_4165F89E3A15BB2E93A82F4868A08724955E8045"/>
            </content>
        </type>
        <type derived="true" id="type.8699758">
            <name>const MemoryByteStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_MemoryByteStream_4165F89E3A15BB2E93A82F4868A08724955E8045"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699757">
            <name>const MemoryByteStream*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_MemoryByteStream_4165F89E3A15BB2E93A82F4868A08724955E8045"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700590">
            <name>const Minus&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Minus_T_42FA343108F2183A5C120B0B9F768BE1A4618D2E"/>
            </content>
        </type>
        <type derived="true" id="type.8700592">
            <name>const Minus&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Minus_T_42FA343108F2183A5C120B0B9F768BE1A4618D2E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700591">
            <name>const Minus&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Minus_T_42FA343108F2183A5C120B0B9F768BE1A4618D2E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700600">
            <name>const Multiplies&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Multiplies_T_B10569FE25E0D6EA8440D826A60699DA1E9E1D98"/>
            </content>
        </type>
        <type derived="true" id="type.8700610">
            <name>const Multiplies&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Multiplies_T_B10569FE25E0D6EA8440D826A60699DA1E9E1D98"/>
            </content>
        </type>
        <type derived="true" id="type.8700602">
            <name>const Multiplies&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Multiplies_T_B10569FE25E0D6EA8440D826A60699DA1E9E1D98"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700612">
            <name>const Multiplies&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Multiplies_T_B10569FE25E0D6EA8440D826A60699DA1E9E1D98"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700602">
            <name>const Multiplies&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Multiplies_T_B10569FE25E0D6EA8440D826A60699DA1E9E1D98"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700601">
            <name>const Multiplies&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Multiplies_T_B10569FE25E0D6EA8440D826A60699DA1E9E1D98"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700611">
            <name>const Multiplies&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Multiplies_T_B10569FE25E0D6EA8440D826A60699DA1E9E1D98"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.392">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.8701704">
            <name>const Mutex&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700580">
            <name>const Negate&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Negate_T_2B93AADB99FFFDB5799415B556E03B1B6C1FA625"/>
            </content>
        </type>
        <type derived="true" id="type.8700582">
            <name>const Negate&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Negate_T_2B93AADB99FFFDB5799415B556E03B1B6C1FA625"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700581">
            <name>const Negate&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Negate_T_2B93AADB99FFFDB5799415B556E03B1B6C1FA625"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700717">
            <name>const NotEqualTo&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_NotEqualTo_T_U_5BC868D78BD4259D374B69CB22FA044DD89F0C99"/>
            </content>
        </type>
        <type derived="true" id="type.8700719">
            <name>const NotEqualTo&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_NotEqualTo_T_U_5BC868D78BD4259D374B69CB22FA044DD89F0C99"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700718">
            <name>const NotEqualTo&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_NotEqualTo_T_U_5BC868D78BD4259D374B69CB22FA044DD89F0C99"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700701">
            <name>const NotEqualTo&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_NotEqualTo_T_3EE4DF15E49DBA0F6BBF345CD91378E1CCF64AF5"/>
            </content>
        </type>
        <type derived="true" id="type.8700703">
            <name>const NotEqualTo&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_NotEqualTo_T_3EE4DF15E49DBA0F6BBF345CD91378E1CCF64AF5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700702">
            <name>const NotEqualTo&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_NotEqualTo_T_3EE4DF15E49DBA0F6BBF345CD91378E1CCF64AF5"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700022">
            <name>const NumericType</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NumericType_67577CECB2CE245BF3E658544DD408CD213F0007"/>
            </content>
        </type>
        <type derived="true" id="type.8700024">
            <name>const NumericType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NumericType_67577CECB2CE245BF3E658544DD408CD213F0007"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700023">
            <name>const NumericType*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NumericType_67577CECB2CE245BF3E658544DD408CD213F0007"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704137">
            <name>const NumericType*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NumericType_67577CECB2CE245BF3E658544DD408CD213F0007"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704286">
            <name>const NumericType**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NumericType_67577CECB2CE245BF3E658544DD408CD213F0007"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704112">
            <name>const NumericTypeId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="enumerated_type_NumericTypeId_84C6B7504E5ED4BFF67223319FF8E895DA6F75A5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700026">
            <name>const NumericTypeTable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NumericTypeTable_D5D406F33CCAC2C03087278A817836F0F3A3D92A"/>
            </content>
        </type>
        <type derived="true" id="type.8700028">
            <name>const NumericTypeTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NumericTypeTable_D5D406F33CCAC2C03087278A817836F0F3A3D92A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700027">
            <name>const NumericTypeTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NumericTypeTable_D5D406F33CCAC2C03087278A817836F0F3A3D92A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705769">
            <name>const NumericTypeTable*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NumericTypeTable_D5D406F33CCAC2C03087278A817836F0F3A3D92A"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705768">
            <name>const NumericTypeTable**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NumericTypeTable_D5D406F33CCAC2C03087278A817836F0F3A3D92A"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699598">
            <name>const OutputFileStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputFileStream_329086250911017BCF31063FCD14A24814C228C1"/>
            </content>
        </type>
        <type derived="true" id="type.8699600">
            <name>const OutputFileStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputFileStream_329086250911017BCF31063FCD14A24814C228C1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699599">
            <name>const OutputFileStream*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputFileStream_329086250911017BCF31063FCD14A24814C228C1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.387">
            <name>const OutputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
            </content>
        </type>
        <type derived="true" id="type.8700415">
            <name>const OutputStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699912">
            <name>const OutputStringStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputStringStream_8F218027BFFB6474E691BDF3B8611AF5171C9174"/>
            </content>
        </type>
        <type derived="true" id="type.8699914">
            <name>const OutputStringStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputStringStream_8F218027BFFB6474E691BDF3B8611AF5171C9174"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699913">
            <name>const OutputStringStream*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputStringStream_8F218027BFFB6474E691BDF3B8611AF5171C9174"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700980">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.8701059">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.8700980">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.8701037">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700958">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700979">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701058">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701641">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.8701631">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701640">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703827">
            <name>const Pair&lt;String&lt;char>, Age*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703795"/>
            </content>
        </type>
        <type derived="true" id="type.8703805">
            <name>const Pair&lt;String&lt;char>, Age*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703795"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703826">
            <name>const Pair&lt;String&lt;char>, Age*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703795"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704867">
            <name>const Pair&lt;String&lt;char>, AliasType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704835"/>
            </content>
        </type>
        <type derived="true" id="type.8704845">
            <name>const Pair&lt;String&lt;char>, AliasType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704835"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704866">
            <name>const Pair&lt;String&lt;char>, AliasType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704835"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704451">
            <name>const Pair&lt;String&lt;char>, BidiClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704419"/>
            </content>
        </type>
        <type derived="true" id="type.8704429">
            <name>const Pair&lt;String&lt;char>, BidiClass*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704419"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704450">
            <name>const Pair&lt;String&lt;char>, BidiClass*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704419"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704659">
            <name>const Pair&lt;String&lt;char>, BidiPairedBracketType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704627"/>
            </content>
        </type>
        <type derived="true" id="type.8704637">
            <name>const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704627"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704658">
            <name>const Pair&lt;String&lt;char>, BidiPairedBracketType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704627"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703197">
            <name>const Pair&lt;String&lt;char>, BinaryProperty*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703165"/>
            </content>
        </type>
        <type derived="true" id="type.8703175">
            <name>const Pair&lt;String&lt;char>, BinaryProperty*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703165"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703196">
            <name>const Pair&lt;String&lt;char>, BinaryProperty*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703165"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703408">
            <name>const Pair&lt;String&lt;char>, Block*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703376"/>
            </content>
        </type>
        <type derived="true" id="type.8703386">
            <name>const Pair&lt;String&lt;char>, Block*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703376"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703407">
            <name>const Pair&lt;String&lt;char>, Block*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703376"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703619">
            <name>const Pair&lt;String&lt;char>, GeneralCategory*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703587"/>
            </content>
        </type>
        <type derived="true" id="type.8703597">
            <name>const Pair&lt;String&lt;char>, GeneralCategory*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703587"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703618">
            <name>const Pair&lt;String&lt;char>, GeneralCategory*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703587"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704243">
            <name>const Pair&lt;String&lt;char>, NumericType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704211"/>
            </content>
        </type>
        <type derived="true" id="type.8704221">
            <name>const Pair&lt;String&lt;char>, NumericType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704211"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704242">
            <name>const Pair&lt;String&lt;char>, NumericType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704211"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704035">
            <name>const Pair&lt;String&lt;char>, Script*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704003"/>
            </content>
        </type>
        <type derived="true" id="type.8704013">
            <name>const Pair&lt;String&lt;char>, Script*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704003"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704034">
            <name>const Pair&lt;String&lt;char>, Script*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704003"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703751">
            <name>const Pair&lt;System.Unicode.AgeId, Age*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703718"/>
            </content>
        </type>
        <type derived="true" id="type.8703729">
            <name>const Pair&lt;System.Unicode.AgeId, Age*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703718"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703750">
            <name>const Pair&lt;System.Unicode.AgeId, Age*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703718"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704791">
            <name>const Pair&lt;System.Unicode.AliasTypeId, AliasType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704758"/>
            </content>
        </type>
        <type derived="true" id="type.8704769">
            <name>const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704758"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704790">
            <name>const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704758"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704375">
            <name>const Pair&lt;System.Unicode.BidiClassId, BidiClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704342"/>
            </content>
        </type>
        <type derived="true" id="type.8704353">
            <name>const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704342"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704374">
            <name>const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704342"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704583">
            <name>const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704550"/>
            </content>
        </type>
        <type derived="true" id="type.8704561">
            <name>const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704582">
            <name>const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704550"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703100">
            <name>const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703067"/>
            </content>
        </type>
        <type derived="true" id="type.8703078">
            <name>const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703067"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703099">
            <name>const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703067"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703332">
            <name>const Pair&lt;System.Unicode.BlockId, Block*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703299"/>
            </content>
        </type>
        <type derived="true" id="type.8703310">
            <name>const Pair&lt;System.Unicode.BlockId, Block*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703299"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703331">
            <name>const Pair&lt;System.Unicode.BlockId, Block*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703299"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703543">
            <name>const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703510"/>
            </content>
        </type>
        <type derived="true" id="type.8703521">
            <name>const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703510"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703542">
            <name>const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703510"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704167">
            <name>const Pair&lt;System.Unicode.NumericTypeId, NumericType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704134"/>
            </content>
        </type>
        <type derived="true" id="type.8704145">
            <name>const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704134"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704166">
            <name>const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704134"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703959">
            <name>const Pair&lt;System.Unicode.ScriptId, Script*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703926"/>
            </content>
        </type>
        <type derived="true" id="type.8703937">
            <name>const Pair&lt;System.Unicode.ScriptId, Script*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703926"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703958">
            <name>const Pair&lt;System.Unicode.ScriptId, Script*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703926"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701727">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701733">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.188">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.185">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706099">
            <name>const ParameterizedThreadStartFunction&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699916"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703018">
            <name>const ParameterizedThreadStartMethod&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699918"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700560">
            <name>const Plus&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Plus_T_A04F66A1C888E4BFBAF2F85FF94CD1A38D050A00"/>
            </content>
        </type>
        <type derived="true" id="type.8700570">
            <name>const Plus&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Plus_T_A04F66A1C888E4BFBAF2F85FF94CD1A38D050A00"/>
            </content>
        </type>
        <type derived="true" id="type.8700562">
            <name>const Plus&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Plus_T_A04F66A1C888E4BFBAF2F85FF94CD1A38D050A00"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700572">
            <name>const Plus&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Plus_T_A04F66A1C888E4BFBAF2F85FF94CD1A38D050A00"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700562">
            <name>const Plus&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Plus_T_A04F66A1C888E4BFBAF2F85FF94CD1A38D050A00"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700561">
            <name>const Plus&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Plus_T_A04F66A1C888E4BFBAF2F85FF94CD1A38D050A00"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700571">
            <name>const Plus&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Plus_T_A04F66A1C888E4BFBAF2F85FF94CD1A38D050A00"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706095">
            <name>const Predicate&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699543"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700390">
            <name>const PredicateMethod&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701773">
            <name>const Queue&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Queue_T_1C9B1484040D488EB9F21C531882DC9EB5B8CA02"/>
            </content>
        </type>
        <type derived="true" id="type.8701775">
            <name>const Queue&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Queue_T_1C9B1484040D488EB9F21C531882DC9EB5B8CA02"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701774">
            <name>const Queue&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Queue_T_1C9B1484040D488EB9F21C531882DC9EB5B8CA02"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703889">
            <name>const RandomAccessIter&lt;Age*, Age*&amp;, Age**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703886"/>
            </content>
        </type>
        <type derived="true" id="type.8703891">
            <name>const RandomAccessIter&lt;Age*, Age*&amp;, Age**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703886"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703890">
            <name>const RandomAccessIter&lt;Age*, Age*&amp;, Age**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703886"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703881">
            <name>const RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703878"/>
            </content>
        </type>
        <type derived="true" id="type.8703883">
            <name>const RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703878"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703882">
            <name>const RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703878"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704929">
            <name>const RandomAccessIter&lt;AliasType*, AliasType*&amp;, AliasType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704926"/>
            </content>
        </type>
        <type derived="true" id="type.8704931">
            <name>const RandomAccessIter&lt;AliasType*, AliasType*&amp;, AliasType**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704926"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704930">
            <name>const RandomAccessIter&lt;AliasType*, AliasType*&amp;, AliasType**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704926"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704921">
            <name>const RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704918"/>
            </content>
        </type>
        <type derived="true" id="type.8704923">
            <name>const RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704918"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704922">
            <name>const RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704918"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704513">
            <name>const RandomAccessIter&lt;BidiClass*, BidiClass*&amp;, BidiClass**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704510"/>
            </content>
        </type>
        <type derived="true" id="type.8704515">
            <name>const RandomAccessIter&lt;BidiClass*, BidiClass*&amp;, BidiClass**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704510"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704514">
            <name>const RandomAccessIter&lt;BidiClass*, BidiClass*&amp;, BidiClass**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704510"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704505">
            <name>const RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704502"/>
            </content>
        </type>
        <type derived="true" id="type.8704507">
            <name>const RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704506">
            <name>const RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704502"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704721">
            <name>const RandomAccessIter&lt;BidiPairedBracketType*, BidiPairedBracketType*&amp;, BidiPairedBracketType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704718"/>
            </content>
        </type>
        <type derived="true" id="type.8704723">
            <name>const RandomAccessIter&lt;BidiPairedBracketType*, BidiPairedBracketType*&amp;, BidiPairedBracketType**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704718"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704722">
            <name>const RandomAccessIter&lt;BidiPairedBracketType*, BidiPairedBracketType*&amp;, BidiPairedBracketType**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704718"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704713">
            <name>const RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704710"/>
            </content>
        </type>
        <type derived="true" id="type.8704715">
            <name>const RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704710"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704714">
            <name>const RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704710"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703252">
            <name>const RandomAccessIter&lt;BinaryProperty*, BinaryProperty*&amp;, BinaryProperty**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703249"/>
            </content>
        </type>
        <type derived="true" id="type.8703254">
            <name>const RandomAccessIter&lt;BinaryProperty*, BinaryProperty*&amp;, BinaryProperty**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703249"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703253">
            <name>const RandomAccessIter&lt;BinaryProperty*, BinaryProperty*&amp;, BinaryProperty**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703249"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703244">
            <name>const RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703241"/>
            </content>
        </type>
        <type derived="true" id="type.8703246">
            <name>const RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703241"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703245">
            <name>const RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703241"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703470">
            <name>const RandomAccessIter&lt;Block*, Block*&amp;, Block**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703467"/>
            </content>
        </type>
        <type derived="true" id="type.8703472">
            <name>const RandomAccessIter&lt;Block*, Block*&amp;, Block**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703467"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703471">
            <name>const RandomAccessIter&lt;Block*, Block*&amp;, Block**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703467"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703462">
            <name>const RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703459"/>
            </content>
        </type>
        <type derived="true" id="type.8703464">
            <name>const RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703459"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703463">
            <name>const RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703459"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701012">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701009"/>
            </content>
        </type>
        <type derived="true" id="type.8701090">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701087"/>
            </content>
        </type>
        <type derived="true" id="type.8701092">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701087"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701014">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701092">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701087"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701091">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701087"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701013">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701081">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701078"/>
            </content>
        </type>
        <type derived="true" id="type.8701003">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701000"/>
            </content>
        </type>
        <type derived="true" id="type.8701005">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701000"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701083">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701078"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701082">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701078"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701004">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701000"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701082">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701078"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703858">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703855"/>
            </content>
        </type>
        <type derived="true" id="type.8703860">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703855"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703859">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703855"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703849">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703846"/>
            </content>
        </type>
        <type derived="true" id="type.8703851">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703846"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703850">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703846"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704898">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704895"/>
            </content>
        </type>
        <type derived="true" id="type.8704900">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704895"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704899">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704895"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704889">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704886"/>
            </content>
        </type>
        <type derived="true" id="type.8704891">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704886"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704890">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704886"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704482">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704479"/>
            </content>
        </type>
        <type derived="true" id="type.8704484">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704479"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704483">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704479"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704473">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704470"/>
            </content>
        </type>
        <type derived="true" id="type.8704475">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704470"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704474">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704470"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704690">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704687"/>
            </content>
        </type>
        <type derived="true" id="type.8704692">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704687"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704691">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704687"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704681">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704678"/>
            </content>
        </type>
        <type derived="true" id="type.8704683">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704678"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704682">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704678"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703228">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703225"/>
            </content>
        </type>
        <type derived="true" id="type.8703230">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703225"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703229">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703225"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703219">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703216"/>
            </content>
        </type>
        <type derived="true" id="type.8703221">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703216"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703220">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703216"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703439">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703436"/>
            </content>
        </type>
        <type derived="true" id="type.8703441">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703436"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703440">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703436"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703430">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703427"/>
            </content>
        </type>
        <type derived="true" id="type.8703432">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703427"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703431">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703427"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703650">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703647"/>
            </content>
        </type>
        <type derived="true" id="type.8703652">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703647"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703651">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703647"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703641">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703638"/>
            </content>
        </type>
        <type derived="true" id="type.8703643">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703638"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703642">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703638"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704274">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704271"/>
            </content>
        </type>
        <type derived="true" id="type.8704276">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704271"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704275">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704271"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704265">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704262"/>
            </content>
        </type>
        <type derived="true" id="type.8704267">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704262"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704266">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704262"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704066">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704063"/>
            </content>
        </type>
        <type derived="true" id="type.8704068">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704063"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704067">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704063"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704057">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704054"/>
            </content>
        </type>
        <type derived="true" id="type.8704059">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704054"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704058">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704054"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703782">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703779"/>
            </content>
        </type>
        <type derived="true" id="type.8703784">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703779"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703783">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703779"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703773">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703770"/>
            </content>
        </type>
        <type derived="true" id="type.8703775">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703770"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703774">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703770"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704822">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704819"/>
            </content>
        </type>
        <type derived="true" id="type.8704824">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704819"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704823">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704819"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704813">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704810"/>
            </content>
        </type>
        <type derived="true" id="type.8704815">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704810"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704814">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704810"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704406">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704403"/>
            </content>
        </type>
        <type derived="true" id="type.8704408">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704403"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704407">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704403"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704397">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704394"/>
            </content>
        </type>
        <type derived="true" id="type.8704399">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704394"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704398">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704394"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704614">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704611"/>
            </content>
        </type>
        <type derived="true" id="type.8704616">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704611"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704615">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704611"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704605">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704602"/>
            </content>
        </type>
        <type derived="true" id="type.8704607">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704606">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704602"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703131">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703128"/>
            </content>
        </type>
        <type derived="true" id="type.8703133">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703128"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703132">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703128"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703122">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703119"/>
            </content>
        </type>
        <type derived="true" id="type.8703124">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703119"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703123">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703119"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703363">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703360"/>
            </content>
        </type>
        <type derived="true" id="type.8703365">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703360"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703364">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703360"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703354">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703351"/>
            </content>
        </type>
        <type derived="true" id="type.8703356">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703351"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703355">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703351"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703574">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703571"/>
            </content>
        </type>
        <type derived="true" id="type.8703576">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703571"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703575">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703571"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703565">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703562"/>
            </content>
        </type>
        <type derived="true" id="type.8703567">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703562"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703566">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703562"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704198">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704195"/>
            </content>
        </type>
        <type derived="true" id="type.8704200">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704195"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704199">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704195"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704189">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704186"/>
            </content>
        </type>
        <type derived="true" id="type.8704191">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704186"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704190">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704186"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703990">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703987"/>
            </content>
        </type>
        <type derived="true" id="type.8703992">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703987"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703991">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703987"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703981">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703978"/>
            </content>
        </type>
        <type derived="true" id="type.8703983">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703978"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703982">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703978"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701239">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701236"/>
            </content>
        </type>
        <type derived="true" id="type.8701165">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701162"/>
            </content>
        </type>
        <type derived="true" id="type.8701241">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701236"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701167">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701162"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701240">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701236"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701166">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701162"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701240">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701236"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701230">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701227"/>
            </content>
        </type>
        <type derived="true" id="type.8701156">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701153"/>
            </content>
        </type>
        <type derived="true" id="type.8701232">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701227"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701158">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701153"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701231">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701227"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701157">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701153"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701350">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701347"/>
            </content>
        </type>
        <type derived="true" id="type.8701352">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701347"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701351">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701347"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701341">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701338"/>
            </content>
        </type>
        <type derived="true" id="type.8701343">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701338"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701342">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701338"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702925">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
            </content>
        </type>
        <type derived="true" id="type.8702784">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
            </content>
        </type>
        <type derived="true" id="type.8702878">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
            </content>
        </type>
        <type derived="true" id="type.8702831">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
            </content>
        </type>
        <type derived="true" id="type.8702878">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
            </content>
        </type>
        <type derived="true" id="type.8702690">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
            </content>
        </type>
        <type derived="true" id="type.8702972">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
            </content>
        </type>
        <type derived="true" id="type.8702737">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
            </content>
        </type>
        <type derived="true" id="type.8702692">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702880">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702927">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702974">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702786">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702739">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702974">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702833">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702691">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702926">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702879">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702926">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702738">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702785">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702973">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702832">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702681">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
            </content>
        </type>
        <type derived="true" id="type.8702728">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
            </content>
        </type>
        <type derived="true" id="type.8702963">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
            </content>
        </type>
        <type derived="true" id="type.8702775">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
            </content>
        </type>
        <type derived="true" id="type.8702916">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
            </content>
        </type>
        <type derived="true" id="type.8702869">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
            </content>
        </type>
        <type derived="true" id="type.8702822">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
            </content>
        </type>
        <type derived="true" id="type.8702963">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
            </content>
        </type>
        <type derived="true" id="type.8702918">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702824">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702777">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702730">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702871">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702965">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702918">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702683">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702917">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702964">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702776">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702917">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702729">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702823">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702870">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702682">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703681">
            <name>const RandomAccessIter&lt;GeneralCategory*, GeneralCategory*&amp;, GeneralCategory**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703678"/>
            </content>
        </type>
        <type derived="true" id="type.8703683">
            <name>const RandomAccessIter&lt;GeneralCategory*, GeneralCategory*&amp;, GeneralCategory**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703678"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703682">
            <name>const RandomAccessIter&lt;GeneralCategory*, GeneralCategory*&amp;, GeneralCategory**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703678"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703673">
            <name>const RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703670"/>
            </content>
        </type>
        <type derived="true" id="type.8703675">
            <name>const RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703674">
            <name>const RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703670"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704298">
            <name>const RandomAccessIter&lt;NumericType*, NumericType*&amp;, NumericType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704295"/>
            </content>
        </type>
        <type derived="true" id="type.8704300">
            <name>const RandomAccessIter&lt;NumericType*, NumericType*&amp;, NumericType**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704295"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704299">
            <name>const RandomAccessIter&lt;NumericType*, NumericType*&amp;, NumericType**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704295"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704290">
            <name>const RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704287"/>
            </content>
        </type>
        <type derived="true" id="type.8704292">
            <name>const RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704287"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704291">
            <name>const RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704287"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704097">
            <name>const RandomAccessIter&lt;Script*, Script*&amp;, Script**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704094"/>
            </content>
        </type>
        <type derived="true" id="type.8704099">
            <name>const RandomAccessIter&lt;Script*, Script*&amp;, Script**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704094"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704098">
            <name>const RandomAccessIter&lt;Script*, Script*&amp;, Script**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704094"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704089">
            <name>const RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704086"/>
            </content>
        </type>
        <type derived="true" id="type.8704091">
            <name>const RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704086"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704090">
            <name>const RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704086"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702852">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702849"/>
            </content>
        </type>
        <type derived="true" id="type.8702946">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702943"/>
            </content>
        </type>
        <type derived="true" id="type.8702711">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702708"/>
            </content>
        </type>
        <type derived="true" id="type.8702993">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702990"/>
            </content>
        </type>
        <type derived="true" id="type.8702758">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702755"/>
            </content>
        </type>
        <type derived="true" id="type.8702993">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702990"/>
            </content>
        </type>
        <type derived="true" id="type.8702899">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702896"/>
            </content>
        </type>
        <type derived="true" id="type.8702805">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702802"/>
            </content>
        </type>
        <type derived="true" id="type.8702854">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702849"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702807">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702802"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702760">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702755"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702948">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702943"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702995">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702990"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702901">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702896"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702713">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702708"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702759">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702755"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702806">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702802"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702994">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702990"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702853">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702849"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702900">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702896"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702806">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702802"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702947">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702943"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702712">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702708"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702986">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702983"/>
            </content>
        </type>
        <type derived="true" id="type.8702939">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702936"/>
            </content>
        </type>
        <type derived="true" id="type.8702845">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702842"/>
            </content>
        </type>
        <type derived="true" id="type.8702892">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702889"/>
            </content>
        </type>
        <type derived="true" id="type.8702751">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702748"/>
            </content>
        </type>
        <type derived="true" id="type.8702704">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702701"/>
            </content>
        </type>
        <type derived="true" id="type.8702798">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702795"/>
            </content>
        </type>
        <type derived="true" id="type.8702847">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702842"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702753">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702748"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702941">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702936"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702988">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702983"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702894">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702889"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702706">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702701"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702800">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702795"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702799">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702795"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702893">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702889"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702987">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702983"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702846">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702842"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702987">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702983"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702752">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702748"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702705">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702701"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702940">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702936"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700244">
            <name>const RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700241"/>
            </content>
        </type>
        <type derived="true" id="type.8700246">
            <name>const RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700241"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700245">
            <name>const RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700241"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700237">
            <name>const RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700234"/>
            </content>
        </type>
        <type derived="true" id="type.8700239">
            <name>const RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700234"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700238">
            <name>const RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700234"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700334">
            <name>const RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700331"/>
            </content>
        </type>
        <type derived="true" id="type.8700336">
            <name>const RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700331"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700335">
            <name>const RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700331"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700327">
            <name>const RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700324"/>
            </content>
        </type>
        <type derived="true" id="type.8700329">
            <name>const RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700324"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700328">
            <name>const RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700324"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700289">
            <name>const RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700286"/>
            </content>
        </type>
        <type derived="true" id="type.8700291">
            <name>const RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700286"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700290">
            <name>const RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700286"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700282">
            <name>const RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700279"/>
            </content>
        </type>
        <type derived="true" id="type.8700284">
            <name>const RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700279"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700283">
            <name>const RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700279"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704951">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704948"/>
            </content>
        </type>
        <type derived="true" id="type.8704953">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704952">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704944">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704941"/>
            </content>
        </type>
        <type derived="true" id="type.8704946">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704941"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704945">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704941"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701808">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
            </content>
        </type>
        <type derived="true" id="type.8701850">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
            </content>
        </type>
        <type derived="true" id="type.8701829">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
            </content>
        </type>
        <type derived="true" id="type.8701843">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
            </content>
        </type>
        <type derived="true" id="type.8701822">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
            </content>
        </type>
        <type derived="true" id="type.8701836">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
            </content>
        </type>
        <type derived="true" id="type.8701815">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
            </content>
        </type>
        <type derived="true" id="type.8701843">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
            </content>
        </type>
        <type derived="true" id="type.8701845">
            <name>const RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701831">
            <name>const RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701845">
            <name>const RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701817">
            <name>const RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701810">
            <name>const RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701824">
            <name>const RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701852">
            <name>const RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701838">
            <name>const RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701851">
            <name>const RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701837">
            <name>const RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701844">
            <name>const RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701816">
            <name>const RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701809">
            <name>const RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701823">
            <name>const RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701851">
            <name>const RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701830">
            <name>const RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701601">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.8701547">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.8701574">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.8701800">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.8702663">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.8701800">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.8702665">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701603">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701576">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701802">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701549">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701802">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701602">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701801">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701575">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701548">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702664">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701565">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.8701592">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.8701538">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.8702655">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.8701791">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.8702655">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.8701540">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701567">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701793">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701567">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702657">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701594">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701593">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701539">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701792">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702656">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701792">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701566">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704980">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704977"/>
            </content>
        </type>
        <type derived="true" id="type.8704982">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704977"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704981">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704977"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704973">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704970"/>
            </content>
        </type>
        <type derived="true" id="type.8704975">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704970"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704974">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704970"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705076">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705073"/>
            </content>
        </type>
        <type derived="true" id="type.8705078">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705073"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705077">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705073"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705069">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705066"/>
            </content>
        </type>
        <type derived="true" id="type.8705071">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705066"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705070">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705066"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705008">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705005"/>
            </content>
        </type>
        <type derived="true" id="type.8705010">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705005"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705009">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705005"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705001">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704998"/>
            </content>
        </type>
        <type derived="true" id="type.8705003">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704998"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705002">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704998"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705111">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705108"/>
            </content>
        </type>
        <type derived="true" id="type.8705113">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705108"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705112">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705108"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705104">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705101"/>
            </content>
        </type>
        <type derived="true" id="type.8705106">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705101"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705105">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705101"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701699">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701696"/>
            </content>
        </type>
        <type derived="true" id="type.172">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.169"/>
            </content>
        </type>
        <type derived="true" id="type.8701699">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701696"/>
            </content>
        </type>
        <type derived="true" id="type.8701701">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701696"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.174">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.169"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701700">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701696"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.173">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.169"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701700">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701696"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701692">
            <name>const RandomAccessIter&lt;byte, const byte&amp;, const byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701689"/>
            </content>
        </type>
        <type derived="true" id="type.8701694">
            <name>const RandomAccessIter&lt;byte, const byte&amp;, const byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701689"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701693">
            <name>const RandomAccessIter&lt;byte, const byte&amp;, const byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701689"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700223">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700220"/>
            </content>
        </type>
        <type derived="true" id="type.43">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.40"/>
            </content>
        </type>
        <type derived="true" id="type.8700225">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700220"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.45">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.40"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.44">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.40"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700224">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700220"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700216">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700213"/>
            </content>
        </type>
        <type derived="true" id="type.8700218">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700213"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700217">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700213"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700306">
            <name>const RandomAccessIter&lt;uchar, const uchar&amp;, const uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700303"/>
            </content>
        </type>
        <type derived="true" id="type.8700308">
            <name>const RandomAccessIter&lt;uchar, const uchar&amp;, const uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700303"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700307">
            <name>const RandomAccessIter&lt;uchar, const uchar&amp;, const uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700303"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700313">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700310"/>
            </content>
        </type>
        <type derived="true" id="type.62">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.59"/>
            </content>
        </type>
        <type derived="true" id="type.64">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.59"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700315">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700310"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700314">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700310"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.63">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.59"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705025">
            <name>const RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705022"/>
            </content>
        </type>
        <type derived="true" id="type.8705027">
            <name>const RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705022"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705026">
            <name>const RandomAccessIter&lt;uint, const uint&amp;, const uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705022"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705032">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705029"/>
            </content>
        </type>
        <type derived="true" id="type.360">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.357"/>
            </content>
        </type>
        <type derived="true" id="type.8705032">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705029"/>
            </content>
        </type>
        <type derived="true" id="type.362">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.357"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705034">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705029"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705033">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705029"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.361">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.357"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705033">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705029"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700356">
            <name>const RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700353"/>
            </content>
        </type>
        <type derived="true" id="type.8700358">
            <name>const RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700353"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700357">
            <name>const RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700353"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700363">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700360"/>
            </content>
        </type>
        <type derived="true" id="type.73">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.70"/>
            </content>
        </type>
        <type derived="true" id="type.8700365">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700360"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.75">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.70"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700364">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700360"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.74">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.70"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700261">
            <name>const RandomAccessIter&lt;wchar, const wchar&amp;, const wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700258"/>
            </content>
        </type>
        <type derived="true" id="type.8700263">
            <name>const RandomAccessIter&lt;wchar, const wchar&amp;, const wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700258"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700262">
            <name>const RandomAccessIter&lt;wchar, const wchar&amp;, const wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700258"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700268">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700265"/>
            </content>
        </type>
        <type derived="true" id="type.52">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.49"/>
            </content>
        </type>
        <type derived="true" id="type.8700268">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700265"/>
            </content>
        </type>
        <type derived="true" id="type.8700270">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700265"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.54">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.49"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700269">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700265"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.53">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.49"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700269">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700265"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.393">
            <name>const RecursiveMutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82"/>
            </content>
        </type>
        <type derived="true" id="type.8701707">
            <name>const RecursiveMutex&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701637">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.8701639">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701638">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701895">
            <name>const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
            </content>
        </type>
        <type derived="true" id="type.8701897">
            <name>const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701896">
            <name>const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702069">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
            </content>
        </type>
        <type derived="true" id="type.8702012">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
            </content>
        </type>
        <type derived="true" id="type.8701955">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
            </content>
        </type>
        <type derived="true" id="type.8702012">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
            </content>
        </type>
        <type derived="true" id="type.8702014">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701957">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702071">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702014">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702070">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702013">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701956">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701651">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701648"/>
            </content>
        </type>
        <type derived="true" id="type.8701653">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701648"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701652">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701648"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701857">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.8701969">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.8701871">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.8702026">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.8702083">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.8701886">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.8702083">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.8702028">
            <name>const RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701859">
            <name>const RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701888">
            <name>const RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701971">
            <name>const RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702085">
            <name>const RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702028">
            <name>const RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701873">
            <name>const RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701872">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701887">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701858">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702084">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702027">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701970">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702084">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701910">
            <name>const RedBlackTreeNode&lt;ValueType></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
            </content>
        </type>
        <type derived="true" id="type.8701912">
            <name>const RedBlackTreeNode&lt;ValueType>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701911">
            <name>const RedBlackTreeNode&lt;ValueType>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699816">
            <name>const RedBlackTreeNodeBase</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
            </content>
        </type>
        <type derived="true" id="type.8699818">
            <name>const RedBlackTreeNodeBase&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699817">
            <name>const RedBlackTreeNodeBase*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701663">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701660"/>
            </content>
        </type>
        <type derived="true" id="type.8701665">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701660"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701664">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701660"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701645">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701642"/>
            </content>
        </type>
        <type derived="true" id="type.8701647">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701642"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701646">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701642"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701880">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
            </content>
        </type>
        <type derived="true" id="type.8701865">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
            </content>
        </type>
        <type derived="true" id="type.8701867">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701882">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701866">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701881">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701866">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702092">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
            </content>
        </type>
        <type derived="true" id="type.8701978">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
            </content>
        </type>
        <type derived="true" id="type.8702092">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
            </content>
        </type>
        <type derived="true" id="type.8702035">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
            </content>
        </type>
        <type derived="true" id="type.8702037">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702094">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701980">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702094">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702036">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702093">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701979">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701963">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
            </content>
        </type>
        <type derived="true" id="type.8702020">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
            </content>
        </type>
        <type derived="true" id="type.8702077">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
            </content>
        </type>
        <type derived="true" id="type.8701965">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702079">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702022">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701964">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702078">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702021">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702078">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701919">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
            </content>
        </type>
        <type derived="true" id="type.8701921">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701920">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701904">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
            </content>
        </type>
        <type derived="true" id="type.8701906">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701905">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705351">
            <name>const Rel&lt;String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703148"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705585">
            <name>const Rel&lt;System.Unicode.AgeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703701"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705995">
            <name>const Rel&lt;System.Unicode.AliasTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704741"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705831">
            <name>const Rel&lt;System.Unicode.BidiClassId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704325"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705913">
            <name>const Rel&lt;System.Unicode.BidiPairedBracketTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704533"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705316">
            <name>const Rel&lt;System.Unicode.BinaryPropertyId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703050"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705421">
            <name>const Rel&lt;System.Unicode.BlockId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703282"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705503">
            <name>const Rel&lt;System.Unicode.GeneralCategoryId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703493"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705749">
            <name>const Rel&lt;System.Unicode.NumericTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704117"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705667">
            <name>const Rel&lt;System.Unicode.ScriptId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703909"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700630">
            <name>const Remainder&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Remainder_T_FE01252D1C3D34D2A8358028C0C92616A4A54BE1"/>
            </content>
        </type>
        <type derived="true" id="type.8700632">
            <name>const Remainder&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Remainder_T_FE01252D1C3D34D2A8358028C0C92616A4A54BE1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700631">
            <name>const Remainder&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Remainder_T_FE01252D1C3D34D2A8358028C0C92616A4A54BE1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700003">
            <name>const Script</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Script_B4DC79C213FBE18703FB167088AE40DA330EDFEE"/>
            </content>
        </type>
        <type derived="true" id="type.8700005">
            <name>const Script&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Script_B4DC79C213FBE18703FB167088AE40DA330EDFEE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700004">
            <name>const Script*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Script_B4DC79C213FBE18703FB167088AE40DA330EDFEE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703929">
            <name>const Script*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Script_B4DC79C213FBE18703FB167088AE40DA330EDFEE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704085">
            <name>const Script**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Script_B4DC79C213FBE18703FB167088AE40DA330EDFEE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703904">
            <name>const ScriptId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="enumerated_type_ScriptId_AF95A25CD6A241D8EF03F468A61D6942BF0999C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700007">
            <name>const ScriptTable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ScriptTable_CEB3F0C6961FADA195D3CEC50AC41CB1955D92CF"/>
            </content>
        </type>
        <type derived="true" id="type.8700009">
            <name>const ScriptTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ScriptTable_CEB3F0C6961FADA195D3CEC50AC41CB1955D92CF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700008">
            <name>const ScriptTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ScriptTable_CEB3F0C6961FADA195D3CEC50AC41CB1955D92CF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705687">
            <name>const ScriptTable*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ScriptTable_CEB3F0C6961FADA195D3CEC50AC41CB1955D92CF"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705686">
            <name>const ScriptTable**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ScriptTable_CEB3F0C6961FADA195D3CEC50AC41CB1955D92CF"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700952">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
            </content>
        </type>
        <type derived="true" id="type.8701031">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
            </content>
        </type>
        <type derived="true" id="type.8700954">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701033">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700953">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701032">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701625">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.8701627">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701626">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703799">
            <name>const SelectFirst&lt;String&lt;char>, Age*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703798"/>
            </content>
        </type>
        <type derived="true" id="type.8703801">
            <name>const SelectFirst&lt;String&lt;char>, Age*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703798"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703800">
            <name>const SelectFirst&lt;String&lt;char>, Age*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703798"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705615">
            <name>const SelectFirst&lt;String&lt;char>, Age*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703798"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705614">
            <name>const SelectFirst&lt;String&lt;char>, Age*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703798"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704839">
            <name>const SelectFirst&lt;String&lt;char>, AliasType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704838"/>
            </content>
        </type>
        <type derived="true" id="type.8704841">
            <name>const SelectFirst&lt;String&lt;char>, AliasType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704838"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704840">
            <name>const SelectFirst&lt;String&lt;char>, AliasType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704838"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706025">
            <name>const SelectFirst&lt;String&lt;char>, AliasType*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704838"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706024">
            <name>const SelectFirst&lt;String&lt;char>, AliasType*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704838"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704423">
            <name>const SelectFirst&lt;String&lt;char>, BidiClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704422"/>
            </content>
        </type>
        <type derived="true" id="type.8704425">
            <name>const SelectFirst&lt;String&lt;char>, BidiClass*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704422"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704424">
            <name>const SelectFirst&lt;String&lt;char>, BidiClass*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704422"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705861">
            <name>const SelectFirst&lt;String&lt;char>, BidiClass*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704422"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705860">
            <name>const SelectFirst&lt;String&lt;char>, BidiClass*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704422"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704631">
            <name>const SelectFirst&lt;String&lt;char>, BidiPairedBracketType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704630"/>
            </content>
        </type>
        <type derived="true" id="type.8704633">
            <name>const SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704630"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704632">
            <name>const SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704630"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705943">
            <name>const SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704630"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705942">
            <name>const SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704630"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703169">
            <name>const SelectFirst&lt;String&lt;char>, BinaryProperty*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703168"/>
            </content>
        </type>
        <type derived="true" id="type.8703171">
            <name>const SelectFirst&lt;String&lt;char>, BinaryProperty*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703168"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703170">
            <name>const SelectFirst&lt;String&lt;char>, BinaryProperty*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703168"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705362">
            <name>const SelectFirst&lt;String&lt;char>, BinaryProperty*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703168"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705361">
            <name>const SelectFirst&lt;String&lt;char>, BinaryProperty*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703168"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703380">
            <name>const SelectFirst&lt;String&lt;char>, Block*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703379"/>
            </content>
        </type>
        <type derived="true" id="type.8703382">
            <name>const SelectFirst&lt;String&lt;char>, Block*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703379"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703381">
            <name>const SelectFirst&lt;String&lt;char>, Block*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703379"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705451">
            <name>const SelectFirst&lt;String&lt;char>, Block*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703379"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705450">
            <name>const SelectFirst&lt;String&lt;char>, Block*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703379"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703591">
            <name>const SelectFirst&lt;String&lt;char>, GeneralCategory*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703590"/>
            </content>
        </type>
        <type derived="true" id="type.8703593">
            <name>const SelectFirst&lt;String&lt;char>, GeneralCategory*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703590"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703592">
            <name>const SelectFirst&lt;String&lt;char>, GeneralCategory*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703590"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705533">
            <name>const SelectFirst&lt;String&lt;char>, GeneralCategory*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703590"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705532">
            <name>const SelectFirst&lt;String&lt;char>, GeneralCategory*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703590"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704215">
            <name>const SelectFirst&lt;String&lt;char>, NumericType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704214"/>
            </content>
        </type>
        <type derived="true" id="type.8704217">
            <name>const SelectFirst&lt;String&lt;char>, NumericType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704214"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704216">
            <name>const SelectFirst&lt;String&lt;char>, NumericType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704214"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705779">
            <name>const SelectFirst&lt;String&lt;char>, NumericType*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704214"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705778">
            <name>const SelectFirst&lt;String&lt;char>, NumericType*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704214"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704007">
            <name>const SelectFirst&lt;String&lt;char>, Script*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704006"/>
            </content>
        </type>
        <type derived="true" id="type.8704009">
            <name>const SelectFirst&lt;String&lt;char>, Script*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704006"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704008">
            <name>const SelectFirst&lt;String&lt;char>, Script*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704006"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705697">
            <name>const SelectFirst&lt;String&lt;char>, Script*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704006"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705696">
            <name>const SelectFirst&lt;String&lt;char>, Script*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704006"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703723">
            <name>const SelectFirst&lt;System.Unicode.AgeId, Age*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703722"/>
            </content>
        </type>
        <type derived="true" id="type.8703725">
            <name>const SelectFirst&lt;System.Unicode.AgeId, Age*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703722"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703724">
            <name>const SelectFirst&lt;System.Unicode.AgeId, Age*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703722"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705596">
            <name>const SelectFirst&lt;System.Unicode.AgeId, Age*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703722"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705595">
            <name>const SelectFirst&lt;System.Unicode.AgeId, Age*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703722"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704763">
            <name>const SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704762"/>
            </content>
        </type>
        <type derived="true" id="type.8704765">
            <name>const SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704762"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704764">
            <name>const SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704762"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706006">
            <name>const SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704762"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706005">
            <name>const SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704762"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704347">
            <name>const SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704346"/>
            </content>
        </type>
        <type derived="true" id="type.8704349">
            <name>const SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704346"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704348">
            <name>const SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704346"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705842">
            <name>const SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704346"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705841">
            <name>const SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704346"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704555">
            <name>const SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704554"/>
            </content>
        </type>
        <type derived="true" id="type.8704557">
            <name>const SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704554"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704556">
            <name>const SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704554"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705924">
            <name>const SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704554"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705923">
            <name>const SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704554"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703072">
            <name>const SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703071"/>
            </content>
        </type>
        <type derived="true" id="type.8703074">
            <name>const SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703071"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703073">
            <name>const SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703071"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705327">
            <name>const SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703071"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705326">
            <name>const SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703071"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703304">
            <name>const SelectFirst&lt;System.Unicode.BlockId, Block*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703303"/>
            </content>
        </type>
        <type derived="true" id="type.8703306">
            <name>const SelectFirst&lt;System.Unicode.BlockId, Block*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703303"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703305">
            <name>const SelectFirst&lt;System.Unicode.BlockId, Block*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703303"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705432">
            <name>const SelectFirst&lt;System.Unicode.BlockId, Block*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703303"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705431">
            <name>const SelectFirst&lt;System.Unicode.BlockId, Block*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703303"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703515">
            <name>const SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703514"/>
            </content>
        </type>
        <type derived="true" id="type.8703517">
            <name>const SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703514"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703516">
            <name>const SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703514"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705514">
            <name>const SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703514"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705513">
            <name>const SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703514"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704139">
            <name>const SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704138"/>
            </content>
        </type>
        <type derived="true" id="type.8704141">
            <name>const SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704138"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704140">
            <name>const SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704138"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705760">
            <name>const SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704138"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705759">
            <name>const SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704138"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703931">
            <name>const SelectFirst&lt;System.Unicode.ScriptId, Script*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703930"/>
            </content>
        </type>
        <type derived="true" id="type.8703933">
            <name>const SelectFirst&lt;System.Unicode.ScriptId, Script*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703930"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703932">
            <name>const SelectFirst&lt;System.Unicode.ScriptId, Script*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703930"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705678">
            <name>const SelectFirst&lt;System.Unicode.ScriptId, Script*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703930"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705677">
            <name>const SelectFirst&lt;System.Unicode.ScriptId, Script*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703930"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701740">
            <name>const SelectFirst&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
            </content>
        </type>
        <type derived="true" id="type.8701742">
            <name>const SelectFirst&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701741">
            <name>const SelectFirst&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701755">
            <name>const SelectSecond&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectSecond_T_U_6B42DA73E58D1044102625EF244FA1CB02A13170"/>
            </content>
        </type>
        <type derived="true" id="type.8701757">
            <name>const SelectSecond&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectSecond_T_U_6B42DA73E58D1044102625EF244FA1CB02A13170"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701756">
            <name>const SelectSecond&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectSecond_T_U_6B42DA73E58D1044102625EF244FA1CB02A13170"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702053">
            <name>const Set&lt;T, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
            </content>
        </type>
        <type derived="true" id="type.8701939">
            <name>const Set&lt;T, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
            </content>
        </type>
        <type derived="true" id="type.8702053">
            <name>const Set&lt;T, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
            </content>
        </type>
        <type derived="true" id="type.8701996">
            <name>const Set&lt;T, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
            </content>
        </type>
        <type derived="true" id="type.8702055">
            <name>const Set&lt;T, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701998">
            <name>const Set&lt;T, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701941">
            <name>const Set&lt;T, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702055">
            <name>const Set&lt;T, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702054">
            <name>const Set&lt;T, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701940">
            <name>const Set&lt;T, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701997">
            <name>const Set&lt;T, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702054">
            <name>const Set&lt;T, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Set_T_C_47F8F0E0607A1F93AC7712B5B29065BB126D924F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702572">
            <name>const ShareableFromThis&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ShareableFromThis_T_77C6ADA1F44650830C3217EE01FADA865F0D2818"/>
            </content>
        </type>
        <type derived="true" id="type.8702508">
            <name>const ShareableFromThis&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ShareableFromThis_T_77C6ADA1F44650830C3217EE01FADA865F0D2818"/>
            </content>
        </type>
        <type derived="true" id="type.8702510">
            <name>const ShareableFromThis&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ShareableFromThis_T_77C6ADA1F44650830C3217EE01FADA865F0D2818"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702574">
            <name>const ShareableFromThis&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ShareableFromThis_T_77C6ADA1F44650830C3217EE01FADA865F0D2818"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702509">
            <name>const ShareableFromThis&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ShareableFromThis_T_77C6ADA1F44650830C3217EE01FADA865F0D2818"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702573">
            <name>const ShareableFromThis&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ShareableFromThis_T_77C6ADA1F44650830C3217EE01FADA865F0D2818"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700177">
            <name>const SharedCount&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700174"/>
            </content>
        </type>
        <type derived="true" id="type.8700179">
            <name>const SharedCount&lt;System.IO.ByteStream>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700174"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700178">
            <name>const SharedCount&lt;System.IO.ByteStream>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700174"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702495">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.8702586">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.8702552">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.8702522">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.8702118">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.8702140">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.8702162">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.8702184">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.8702243">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.8702408">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.8702265">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.8702372">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.8702287">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.8702300">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.8702336">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.8702586">
            <name>const SharedCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
            </content>
        </type>
        <type derived="true" id="type.8702289">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702497">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702142">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702588">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702338">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702524">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702164">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702410">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702374">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702120">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702267">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702245">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702186">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702554">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702302">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702588">
            <name>const SharedCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702288">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702119">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702523">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702244">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702587">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702163">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702373">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702141">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702185">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702266">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702553">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702587">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702409">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702496">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702301">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702337">
            <name>const SharedCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702444">
            <name>const SharedCount&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
            </content>
        </type>
        <type derived="true" id="type.8702618">
            <name>const SharedCount&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
            </content>
        </type>
        <type derived="true" id="type.8702206">
            <name>const SharedCount&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
            </content>
        </type>
        <type derived="true" id="type.8702444">
            <name>const SharedCount&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
            </content>
        </type>
        <type derived="true" id="type.8702620">
            <name>const SharedCount&lt;U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702208">
            <name>const SharedCount&lt;U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702446">
            <name>const SharedCount&lt;U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702620">
            <name>const SharedCount&lt;U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702207">
            <name>const SharedCount&lt;U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702445">
            <name>const SharedCount&lt;U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702619">
            <name>const SharedCount&lt;U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702207">
            <name>const SharedCount&lt;U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedCount_U_871DCDED759799C0CF70F3DAE56876F9893BBFC1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700171">
            <name>const SharedPtr&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700168"/>
            </content>
        </type>
        <type derived="true" id="type.8700173">
            <name>const SharedPtr&lt;System.IO.ByteStream>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700168"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700172">
            <name>const SharedPtr&lt;System.IO.ByteStream>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700168"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702580">
            <name>const SharedPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type derived="true" id="type.8702516">
            <name>const SharedPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type derived="true" id="type.8702330">
            <name>const SharedPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type derived="true" id="type.8702502">
            <name>const SharedPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type derived="true" id="type.8702580">
            <name>const SharedPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type derived="true" id="type.8702294">
            <name>const SharedPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type derived="true" id="type.8702402">
            <name>const SharedPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type derived="true" id="type.8702366">
            <name>const SharedPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
            </content>
        </type>
        <type derived="true" id="type.8702582">
            <name>const SharedPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702368">
            <name>const SharedPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702518">
            <name>const SharedPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702504">
            <name>const SharedPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702404">
            <name>const SharedPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702582">
            <name>const SharedPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702332">
            <name>const SharedPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702296">
            <name>const SharedPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702517">
            <name>const SharedPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702295">
            <name>const SharedPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702503">
            <name>const SharedPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702403">
            <name>const SharedPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702331">
            <name>const SharedPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702367">
            <name>const SharedPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702581">
            <name>const SharedPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702403">
            <name>const SharedPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702438">
            <name>const SharedPtr&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_U_19F1777EF4935F63CFF924FFE6F2925770367C61"/>
            </content>
        </type>
        <type derived="true" id="type.8702440">
            <name>const SharedPtr&lt;U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_U_19F1777EF4935F63CFF924FFE6F2925770367C61"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702439">
            <name>const SharedPtr&lt;U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SharedPtr_U_19F1777EF4935F63CFF924FFE6F2925770367C61"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700921">
            <name>const ShiftLeft&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ShiftLeft_T_DAB649CF57196205F80F4D84BB4327636B5ABCF0"/>
            </content>
        </type>
        <type derived="true" id="type.8700923">
            <name>const ShiftLeft&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ShiftLeft_T_DAB649CF57196205F80F4D84BB4327636B5ABCF0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700922">
            <name>const ShiftLeft&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ShiftLeft_T_DAB649CF57196205F80F4D84BB4327636B5ABCF0"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700931">
            <name>const ShiftRight&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ShiftRight_T_1954DF2ABCC6CB200031ECB8BB6DB1F536A47027"/>
            </content>
        </type>
        <type derived="true" id="type.8700933">
            <name>const ShiftRight&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ShiftRight_T_1954DF2ABCC6CB200031ECB8BB6DB1F536A47027"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700932">
            <name>const ShiftRight&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_ShiftRight_T_1954DF2ABCC6CB200031ECB8BB6DB1F536A47027"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702636">
            <name>const Stack&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Stack_T_44313E678C6CD0E8DB3743953B65AA105D55A963"/>
            </content>
        </type>
        <type derived="true" id="type.8702638">
            <name>const Stack&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Stack_T_44313E678C6CD0E8DB3743953B65AA105D55A963"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702637">
            <name>const Stack&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Stack_T_44313E678C6CD0E8DB3743953B65AA105D55A963"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.374">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
            </content>
        </type>
        <type derived="true" id="type.375">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699889">
            <name>const StreamReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamReader_8A8267CD81BA8B198AF295474A8CB0B2DFBB7B57"/>
            </content>
        </type>
        <type derived="true" id="type.8699891">
            <name>const StreamReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamReader_8A8267CD81BA8B198AF295474A8CB0B2DFBB7B57"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699890">
            <name>const StreamReader*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamReader_8A8267CD81BA8B198AF295474A8CB0B2DFBB7B57"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.388">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
            </content>
        </type>
        <type derived="true" id="type.8700398">
            <name>const StreamWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702860">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.8702954">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.8702910">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.8702813">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.8702954">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.8702719">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.8702766">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.8702672">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.8702912">
            <name>const String&lt;CharT>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702815">
            <name>const String&lt;CharT>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702674">
            <name>const String&lt;CharT>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702721">
            <name>const String&lt;CharT>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702768">
            <name>const String&lt;CharT>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702956">
            <name>const String&lt;CharT>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702862">
            <name>const String&lt;CharT>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702673">
            <name>const String&lt;CharT>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702767">
            <name>const String&lt;CharT>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702814">
            <name>const String&lt;CharT>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702911">
            <name>const String&lt;CharT>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702955">
            <name>const String&lt;CharT>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702720">
            <name>const String&lt;CharT>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702861">
            <name>const String&lt;CharT>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700209">
            <name>const String&lt;char></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700206"/>
            </content>
        </type>
        <type derived="true" id="type.8700211">
            <name>const String&lt;char>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700206"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700210">
            <name>const String&lt;char>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700206"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700297">
            <name>const String&lt;uchar></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700294"/>
            </content>
        </type>
        <type derived="true" id="type.8700299">
            <name>const String&lt;uchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700294"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700298">
            <name>const String&lt;uchar>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700294"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700252">
            <name>const String&lt;wchar></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700249"/>
            </content>
        </type>
        <type derived="true" id="type.8700254">
            <name>const String&lt;wchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700249"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700253">
            <name>const String&lt;wchar>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700249"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701208">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699705"/>
            </content>
        </type>
        <type derived="true" id="type.8702651">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699873"/>
            </content>
        </type>
        <type derived="true" id="type.8701488">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699740"/>
            </content>
        </type>
        <type derived="true" id="type.8705138">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8700105"/>
            </content>
        </type>
        <type derived="true" id="type.8701458">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699739"/>
            </content>
        </type>
        <type derived="true" id="type.8705150">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8700106"/>
            </content>
        </type>
        <type derived="true" id="type.8701588">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699745"/>
            </content>
        </type>
        <type derived="true" id="type.8701518">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699741"/>
            </content>
        </type>
        <type derived="true" id="type.8705126">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8700104"/>
            </content>
        </type>
        <type derived="true" id="type.8700465">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699611"/>
            </content>
        </type>
        <type derived="true" id="type.8702073">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699839"/>
            </content>
        </type>
        <type derived="true" id="type.8701134">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699702"/>
            </content>
        </type>
        <type derived="true" id="type.8701787">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699789"/>
            </content>
        </type>
        <type derived="true" id="type.8702016">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699837"/>
            </content>
        </type>
        <type derived="true" id="type.8700497">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699612"/>
            </content>
        </type>
        <type derived="true" id="type.8700529">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699613"/>
            </content>
        </type>
        <type derived="true" id="type.8701428">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699735"/>
            </content>
        </type>
        <type derived="true" id="type.8701561">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699744"/>
            </content>
        </type>
        <type derived="true" id="type.8701959">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699835"/>
            </content>
        </type>
        <type derived="true" id="type.8701392">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699732"/>
            </content>
        </type>
        <type derived="true" id="type.8705138">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8700105"/>
            </content>
        </type>
        <type derived="true" id="type.8701534">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699743"/>
            </content>
        </type>
        <type derived="true" id="type.8700576">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699623"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705127">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8700104"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700143">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699339"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.102">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700144">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699341"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700527">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699613"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702063">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699839"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700137">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699327"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700145">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699344"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701294">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699717"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701586">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699745"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700136">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699325"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700150">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699378"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701029">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699698"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702641">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699873"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700135">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699312"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.104">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699655"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.105">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699657"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700134">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699310"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700111">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699260"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.107">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699660"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701559">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699744"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.108">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699662"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.110">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699665"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700142">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699337"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700133">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699308"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700110">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699259"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700132">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699298"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700141">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699335"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.111">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699667"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702006">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699837"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.113">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.114">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699672"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700140">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699333"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700131">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699294"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.116">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699681"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.117">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699683"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701184">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699705"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.118">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699685"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.119">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699687"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.78">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700126">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699291"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.80">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699604"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701778">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699789"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701532">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699743"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.120">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699689"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.121">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699691"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.123">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699694"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.91">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699622"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700616">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699630"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705151">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8700106"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701516">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699741"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.139">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699709"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.140">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699711"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.142">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699713"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701486">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699740"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.202">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699822"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700138">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699329"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.150">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699730"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701456">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699739"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.200">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699820"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.92">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699625"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.93">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699627"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.94">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700121">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699289"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705127">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8700104"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700454">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699607"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.95">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699632"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.186">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699782"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700120">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699286"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701734">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699776"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701731">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699774"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700463">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699611"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700119">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.183">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699779"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701725">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699772"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.181">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699770"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701426">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699735"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701390">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699732"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700495">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699612"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700139">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699331"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700118">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699281"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.96">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699634"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.97">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699643"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.98">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699645"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701110">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699702"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.99">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699647"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701889">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699825"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700117">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699279"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.101">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699650"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701949">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699835"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705139">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8700105"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700528">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699613"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702650">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699873"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702015">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699837"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700464">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699611"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701457">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699739"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701587">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699745"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701487">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699740"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701517">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699741"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705137">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8700105"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702072">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699839"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701533">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699743"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701958">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699835"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705125">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8700104"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705149">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8700106"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701391">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699732"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701560">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699744"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705149">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8700106"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701133">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699702"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701207">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699705"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701786">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699789"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701427">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699735"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700496">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699612"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699925">
            <name>const Thread</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Thread_805238682CDC09B4D1BB5C11ACA935F47C73BA4F"/>
            </content>
        </type>
        <type derived="true" id="type.8699927">
            <name>const Thread&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Thread_805238682CDC09B4D1BB5C11ACA935F47C73BA4F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699926">
            <name>const Thread*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Thread_805238682CDC09B4D1BB5C11ACA935F47C73BA4F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706097">
            <name>const ThreadStartFunction&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699915"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703011">
            <name>const ThreadStartMethod&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699917"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.394">
            <name>const ThreadingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
            </content>
        </type>
        <type derived="true" id="type.395">
            <name>const ThreadingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699931">
            <name>const TimePoint</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TimePoint_BE09785FA47D4049B051C2D868BEEED92062875C"/>
            </content>
        </type>
        <type derived="true" id="type.8699933">
            <name>const TimePoint&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TimePoint_BE09785FA47D4049B051C2D868BEEED92062875C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699932">
            <name>const TimePoint*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TimePoint_BE09785FA47D4049B051C2D868BEEED92062875C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701735">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699777"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701732">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699775"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.182">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699771"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.184">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699780"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.187">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699783"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.112">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699668"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701726">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699773"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.109">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699663"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.106">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699658"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.103">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699653"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701735">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699777"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.100">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699648"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.115">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699673"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705610">
            <name>const UnaryFun&lt;Pair&lt;String&lt;char>, Age*>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703802"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706020">
            <name>const UnaryFun&lt;Pair&lt;String&lt;char>, AliasType*>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704842"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705856">
            <name>const UnaryFun&lt;Pair&lt;String&lt;char>, BidiClass*>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704426"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705938">
            <name>const UnaryFun&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704634"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705341">
            <name>const UnaryFun&lt;Pair&lt;String&lt;char>, BinaryProperty*>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703172"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705446">
            <name>const UnaryFun&lt;Pair&lt;String&lt;char>, Block*>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703383"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705528">
            <name>const UnaryFun&lt;Pair&lt;String&lt;char>, GeneralCategory*>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705774">
            <name>const UnaryFun&lt;Pair&lt;String&lt;char>, NumericType*>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704218"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705692">
            <name>const UnaryFun&lt;Pair&lt;String&lt;char>, Script*>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704010"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705575">
            <name>const UnaryFun&lt;Pair&lt;System.Unicode.AgeId, Age*>, System.Unicode.AgeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703726"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705985">
            <name>const UnaryFun&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, System.Unicode.AliasTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704766"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705821">
            <name>const UnaryFun&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, System.Unicode.BidiClassId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704350"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705903">
            <name>const UnaryFun&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, System.Unicode.BidiPairedBracketTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704558"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705306">
            <name>const UnaryFun&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, System.Unicode.BinaryPropertyId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703075"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705411">
            <name>const UnaryFun&lt;Pair&lt;System.Unicode.BlockId, Block*>, System.Unicode.BlockId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703307"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705493">
            <name>const UnaryFun&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, System.Unicode.GeneralCategoryId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703518"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705739">
            <name>const UnaryFun&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, System.Unicode.NumericTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704142"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705657">
            <name>const UnaryFun&lt;Pair&lt;System.Unicode.ScriptId, Script*>, System.Unicode.ScriptId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703934"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705347">
            <name>const UnaryFun&lt;String&lt;char>, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703141"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705581">
            <name>const UnaryFun&lt;System.Unicode.AgeId, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703693"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705991">
            <name>const UnaryFun&lt;System.Unicode.AliasTypeId, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704733"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705827">
            <name>const UnaryFun&lt;System.Unicode.BidiClassId, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704317"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705909">
            <name>const UnaryFun&lt;System.Unicode.BidiPairedBracketTypeId, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704525"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705312">
            <name>const UnaryFun&lt;System.Unicode.BinaryPropertyId, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703042"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705417">
            <name>const UnaryFun&lt;System.Unicode.BlockId, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703274"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705499">
            <name>const UnaryFun&lt;System.Unicode.GeneralCategoryId, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703485"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705745">
            <name>const UnaryFun&lt;System.Unicode.NumericTypeId, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704109"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705663">
            <name>const UnaryFun&lt;System.Unicode.ScriptId, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703901"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.398">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
            </content>
        </type>
        <type derived="true" id="type.399">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701674">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701671"/>
            </content>
        </type>
        <type derived="true" id="type.8701676">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701671"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701675">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701671"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702103">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702100"/>
            </content>
        </type>
        <type derived="true" id="type.8701989">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701986"/>
            </content>
        </type>
        <type derived="true" id="type.8702103">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702100"/>
            </content>
        </type>
        <type derived="true" id="type.8702046">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702043"/>
            </content>
        </type>
        <type derived="true" id="type.8702105">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702100"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701991">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701986"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702048">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702043"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702105">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702100"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701990">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701986"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702104">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702100"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702047">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702043"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702104">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702100"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701931">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701928"/>
            </content>
        </type>
        <type derived="true" id="type.8701933">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701928"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701932">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8701928"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700157">
            <name>const UniquePtr&lt;System.Ascii.CharClassTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700154"/>
            </content>
        </type>
        <type derived="true" id="type.8700159">
            <name>const UniquePtr&lt;System.Ascii.CharClassTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700154"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700158">
            <name>const UniquePtr&lt;System.Ascii.CharClassTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700154"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705185">
            <name>const UniquePtr&lt;System.Exception></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705182"/>
            </content>
        </type>
        <type derived="true" id="type.8705187">
            <name>const UniquePtr&lt;System.Exception>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705182"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705186">
            <name>const UniquePtr&lt;System.Exception>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705182"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703867">
            <name>const UniquePtr&lt;System.Unicode.AgeTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703864"/>
            </content>
        </type>
        <type derived="true" id="type.8703869">
            <name>const UniquePtr&lt;System.Unicode.AgeTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703864"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703868">
            <name>const UniquePtr&lt;System.Unicode.AgeTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703864"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704907">
            <name>const UniquePtr&lt;System.Unicode.AliasTypeTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704904"/>
            </content>
        </type>
        <type derived="true" id="type.8704909">
            <name>const UniquePtr&lt;System.Unicode.AliasTypeTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704904"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704908">
            <name>const UniquePtr&lt;System.Unicode.AliasTypeTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704904"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704491">
            <name>const UniquePtr&lt;System.Unicode.BidiClassTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704488"/>
            </content>
        </type>
        <type derived="true" id="type.8704493">
            <name>const UniquePtr&lt;System.Unicode.BidiClassTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704488"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704492">
            <name>const UniquePtr&lt;System.Unicode.BidiClassTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704488"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704699">
            <name>const UniquePtr&lt;System.Unicode.BidiPairedBracketTypeTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704696"/>
            </content>
        </type>
        <type derived="true" id="type.8704701">
            <name>const UniquePtr&lt;System.Unicode.BidiPairedBracketTypeTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704696"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704700">
            <name>const UniquePtr&lt;System.Unicode.BidiPairedBracketTypeTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704696"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703261">
            <name>const UniquePtr&lt;System.Unicode.BinaryPropertyTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703258"/>
            </content>
        </type>
        <type derived="true" id="type.8703263">
            <name>const UniquePtr&lt;System.Unicode.BinaryPropertyTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703258"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703262">
            <name>const UniquePtr&lt;System.Unicode.BinaryPropertyTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703258"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703448">
            <name>const UniquePtr&lt;System.Unicode.BlockTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703445"/>
            </content>
        </type>
        <type derived="true" id="type.8703450">
            <name>const UniquePtr&lt;System.Unicode.BlockTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703445"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703449">
            <name>const UniquePtr&lt;System.Unicode.BlockTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703445"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704960">
            <name>const UniquePtr&lt;System.Unicode.CharacterInfo></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704957"/>
            </content>
        </type>
        <type derived="true" id="type.8704962">
            <name>const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704957"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704961">
            <name>const UniquePtr&lt;System.Unicode.CharacterInfo>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704957"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705056">
            <name>const UniquePtr&lt;System.Unicode.CharacterInfoPage></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705053"/>
            </content>
        </type>
        <type derived="true" id="type.8705058">
            <name>const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705053"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705057">
            <name>const UniquePtr&lt;System.Unicode.CharacterInfoPage>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705053"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705046">
            <name>const UniquePtr&lt;System.Unicode.CharacterTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705043"/>
            </content>
        </type>
        <type derived="true" id="type.8705048">
            <name>const UniquePtr&lt;System.Unicode.CharacterTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705043"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705047">
            <name>const UniquePtr&lt;System.Unicode.CharacterTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705043"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704988">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704985"/>
            </content>
        </type>
        <type derived="true" id="type.8704990">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704985"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704989">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704985"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705084">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoHeader></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705081"/>
            </content>
        </type>
        <type derived="true" id="type.8705086">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoHeader>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705081"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705085">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoHeader>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705081"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705091">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705088"/>
            </content>
        </type>
        <type derived="true" id="type.8705093">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705088"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705092">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705088"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703659">
            <name>const UniquePtr&lt;System.Unicode.GeneralCategoryTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703656"/>
            </content>
        </type>
        <type derived="true" id="type.8703661">
            <name>const UniquePtr&lt;System.Unicode.GeneralCategoryTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703656"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703660">
            <name>const UniquePtr&lt;System.Unicode.GeneralCategoryTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8703656"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704307">
            <name>const UniquePtr&lt;System.Unicode.NumericTypeTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704304"/>
            </content>
        </type>
        <type derived="true" id="type.8704309">
            <name>const UniquePtr&lt;System.Unicode.NumericTypeTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704304"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704308">
            <name>const UniquePtr&lt;System.Unicode.NumericTypeTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704304"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704075">
            <name>const UniquePtr&lt;System.Unicode.ScriptTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704072"/>
            </content>
        </type>
        <type derived="true" id="type.8704077">
            <name>const UniquePtr&lt;System.Unicode.ScriptTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704072"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8704076">
            <name>const UniquePtr&lt;System.Unicode.ScriptTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8704072"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705119">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
            </content>
        </type>
        <type derived="true" id="type.8705143">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
            </content>
        </type>
        <type derived="true" id="type.8705131">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
            </content>
        </type>
        <type derived="true" id="type.8705143">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
            </content>
        </type>
        <type derived="true" id="type.8705121">
            <name>const UniquePtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705145">
            <name>const UniquePtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705133">
            <name>const UniquePtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705145">
            <name>const UniquePtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705132">
            <name>const UniquePtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705144">
            <name>const UniquePtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705120">
            <name>const UniquePtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705144">
            <name>const UniquePtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.163">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699751"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701318">
            <name>const ValueType</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699723"/>
            </content>
        </type>
        <type derived="true" id="type.8701900">
            <name>const ValueType</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699830"/>
            </content>
        </type>
        <type derived="true" id="type.8701898">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699830"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701316">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699723"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701317">
            <name>const ValueType*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699723"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701899">
            <name>const ValueType*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699830"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700191">
            <name>const WeakCount&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700188"/>
            </content>
        </type>
        <type derived="true" id="type.8700193">
            <name>const WeakCount&lt;System.IO.ByteStream>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700188"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700192">
            <name>const WeakCount&lt;System.IO.ByteStream>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700188"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702480">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.8702199">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.8702567">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.8702272">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.8702155">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.8702601">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.8702133">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.8702601">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.8702351">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.8702250">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.8702387">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.8702537">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.8702315">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.8702423">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.8702228">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.8702177">
            <name>const WeakCount&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
            </content>
        </type>
        <type derived="true" id="type.8702230">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702539">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702317">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702135">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702179">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702425">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702482">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702157">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702603">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702353">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702252">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702389">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702274">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702569">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702201">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702603">
            <name>const WeakCount&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702200">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702424">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702602">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702352">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702229">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702134">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702251">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702481">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702156">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702388">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702273">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702316">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702178">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702568">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702602">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702538">
            <name>const WeakCount&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702221">
            <name>const WeakCount&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
            </content>
        </type>
        <type derived="true" id="type.8702631">
            <name>const WeakCount&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
            </content>
        </type>
        <type derived="true" id="type.8702459">
            <name>const WeakCount&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
            </content>
        </type>
        <type derived="true" id="type.8702633">
            <name>const WeakCount&lt;U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702223">
            <name>const WeakCount&lt;U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702633">
            <name>const WeakCount&lt;U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702461">
            <name>const WeakCount&lt;U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702632">
            <name>const WeakCount&lt;U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702460">
            <name>const WeakCount&lt;U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702222">
            <name>const WeakCount&lt;U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702460">
            <name>const WeakCount&lt;U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakCount_U_BCDC36699F39B370B2803231E72CE9C4FE867557"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700199">
            <name>const WeakPtr&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700196"/>
            </content>
        </type>
        <type derived="true" id="type.8700201">
            <name>const WeakPtr&lt;System.IO.ByteStream>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700196"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700200">
            <name>const WeakPtr&lt;System.IO.ByteStream>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700196"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702474">
            <name>const WeakPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
            </content>
        </type>
        <type derived="true" id="type.8702323">
            <name>const WeakPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
            </content>
        </type>
        <type derived="true" id="type.8702545">
            <name>const WeakPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
            </content>
        </type>
        <type derived="true" id="type.8702609">
            <name>const WeakPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
            </content>
        </type>
        <type derived="true" id="type.8702431">
            <name>const WeakPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
            </content>
        </type>
        <type derived="true" id="type.8702395">
            <name>const WeakPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
            </content>
        </type>
        <type derived="true" id="type.8702359">
            <name>const WeakPtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
            </content>
        </type>
        <type derived="true" id="type.8702611">
            <name>const WeakPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702476">
            <name>const WeakPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702611">
            <name>const WeakPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702547">
            <name>const WeakPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702433">
            <name>const WeakPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702361">
            <name>const WeakPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702325">
            <name>const WeakPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702397">
            <name>const WeakPtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702475">
            <name>const WeakPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702396">
            <name>const WeakPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702432">
            <name>const WeakPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702610">
            <name>const WeakPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702324">
            <name>const WeakPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702360">
            <name>const WeakPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702610">
            <name>const WeakPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702546">
            <name>const WeakPtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702467">
            <name>const WeakPtr&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
            </content>
        </type>
        <type derived="true" id="type.8702469">
            <name>const WeakPtr&lt;U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8702468">
            <name>const WeakPtr&lt;U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700991">
            <name>const bool&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699065"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701688">
            <name>const byte&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699067"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701680">
            <name>const byte*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699067"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705285">
            <name>const byte*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699067"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705286">
            <name>const byte*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699067"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705284">
            <name>const byte**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699067"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700212">
            <name>const char&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699214">
            <name>const char*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705181">
            <name>const char*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699076"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705196">
            <name>const long&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699072"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701247">
            <name>const long*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699072"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705257">
            <name>const long*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699072"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705256">
            <name>const long**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699072"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700300">
            <name>const uchar&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699078"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700301">
            <name>const uchar*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699078"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705272">
            <name>const uchar*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699078"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705273">
            <name>const uchar*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699078"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705271">
            <name>const uchar**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699078"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705019">
            <name>const uint&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699071"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705020">
            <name>const uint*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699071"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700352">
            <name>const ulong</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699073"/>
            </content>
        </type>
        <type derived="true" id="type.8700350">
            <name>const ulong&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699073"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700351">
            <name>const ulong*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699073"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700255">
            <name>const wchar&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699077"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700256">
            <name>const wchar*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699077"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705265">
            <name>const wchar*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699077"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705266">
            <name>const wchar*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699077"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705264">
            <name>const wchar**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699077"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699075">
            <name>double</name>
        </type>
        <type derived="true" id="type.8699112">
            <name>double&amp;</name>
            <content>
                <baseType ref="type.8699075"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699074">
            <name>float</name>
        </type>
        <type derived="true" id="type.8699109">
            <name>float&amp;</name>
            <content>
                <baseType ref="type.8699074"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699070">
            <name>int</name>
        </type>
        <type derived="true" id="type.8699097">
            <name>int&amp;</name>
            <content>
                <baseType ref="type.8699070"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699072">
            <name>long</name>
        </type>
        <type derived="true" id="type.8699103">
            <name>long&amp;</name>
            <content>
                <baseType ref="type.8699072"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699102">
            <name>long*</name>
            <content>
                <baseType ref="type.8699072"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705259">
            <name>long*&amp;</name>
            <content>
                <baseType ref="type.8699072"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705258">
            <name>long**</name>
            <content>
                <baseType ref="type.8699072"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="8701245">
            <name>long[-1]</name>
        </type>
        <type id="8701248">
            <name>long[26]</name>
        </type>
        <type basic="true" id="type.8699066">
            <name>sbyte</name>
        </type>
        <type derived="true" id="type.8699085">
            <name>sbyte&amp;</name>
            <content>
                <baseType ref="type.8699066"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699068">
            <name>short</name>
        </type>
        <type derived="true" id="type.8699091">
            <name>short&amp;</name>
            <content>
                <baseType ref="type.8699068"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699078">
            <name>uchar</name>
        </type>
        <type derived="true" id="type.8699121">
            <name>uchar&amp;</name>
            <content>
                <baseType ref="type.8699078"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699120">
            <name>uchar*</name>
            <content>
                <baseType ref="type.8699078"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705173">
            <name>uchar*&amp;</name>
            <content>
                <baseType ref="type.8699078"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705174">
            <name>uchar*&amp;&amp;</name>
            <content>
                <baseType ref="type.8699078"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705172">
            <name>uchar**</name>
            <content>
                <baseType ref="type.8699078"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699071">
            <name>uint</name>
        </type>
        <type derived="true" id="type.8699100">
            <name>uint&amp;</name>
            <content>
                <baseType ref="type.8699071"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699099">
            <name>uint*</name>
            <content>
                <baseType ref="type.8699071"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705176">
            <name>uint*&amp;</name>
            <content>
                <baseType ref="type.8699071"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705175">
            <name>uint**</name>
            <content>
                <baseType ref="type.8699071"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699073">
            <name>ulong</name>
        </type>
        <type derived="true" id="type.8699106">
            <name>ulong&amp;</name>
            <content>
                <baseType ref="type.8699073"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699105">
            <name>ulong*</name>
            <content>
                <baseType ref="type.8699073"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705179">
            <name>ulong*&amp;</name>
            <content>
                <baseType ref="type.8699073"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705180">
            <name>ulong*&amp;&amp;</name>
            <content>
                <baseType ref="type.8699073"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705178">
            <name>ulong**</name>
            <content>
                <baseType ref="type.8699073"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699069">
            <name>ushort</name>
        </type>
        <type derived="true" id="type.8699094">
            <name>ushort&amp;</name>
            <content>
                <baseType ref="type.8699069"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699079">
            <name>void</name>
        </type>
        <type derived="true" id="type.8699217">
            <name>void*</name>
            <content>
                <baseType ref="type.8699079"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705168">
            <name>void*&amp;&amp;</name>
            <content>
                <baseType ref="type.8699079"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699077">
            <name>wchar</name>
        </type>
        <type derived="true" id="type.8699118">
            <name>wchar&amp;</name>
            <content>
                <baseType ref="type.8699077"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699117">
            <name>wchar*</name>
            <content>
                <baseType ref="type.8699077"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705170">
            <name>wchar*&amp;</name>
            <content>
                <baseType ref="type.8699077"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705169">
            <name>wchar**</name>
            <content>
                <baseType ref="type.8699077"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
    </types>
</library>
