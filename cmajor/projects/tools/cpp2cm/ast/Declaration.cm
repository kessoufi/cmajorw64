using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace ast
{
    public enum Specifiers 
    {
        none = 0,
        register = 1 << 0,
        static_ = 1 << 1,
        thread_local = 1 << 2,
        extern_ = 1 << 3,
        mutable = 1 << 4,
        inline_ = 1 << 5,
        virtual_ = 1 << 6,
        explicit_ = 1 << 7,
        friend = 1 << 8,
        constexpr_ = 1 << 9,
        dllimport = 1 << 10,
        dllexport = 1 << 11,
        override_ = 1 << 12,
        final = 1 << 13,
        new_ = 1 << 14,
        pure = 1 << 15,
        public_ = 1 << 16,
        protected_ = 1 << 17,
        private_ = 1 << 18,
        default_ = 1 << 19,
        delete_ = 1 << 20
    }
    
    public class SimpleDeclarationNode : Node
    {
        public nothrow SimpleDeclarationNode(const Span& span_, Specifiers specifiers_, Node* typeExpr_, Node* declarator_) : 
            base(span_), specifiers(specifiers_), typeExpr(typeExpr_), declarator(declarator_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public Specifiers specifiers;
        public UniquePtr<Node> typeExpr;
        public UniquePtr<Node> declarator;
    }
    
    public class UsingTypeDeclarationNode : Node
    {
        public nothrow UsingTypeDeclarationNode(const Span& span_, IdentifierNode* id_, Node* typeExpr_) :
            base(span_), id(id_), typeExpr(typeExpr_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<IdentifierNode> id;
        public UniquePtr<Node> typeExpr;
    }
    
    public class UsingDirectiveNode : UnaryNode
    {
        public nothrow UsingDirectiveNode(const Span& span_, Node* ns_) : base(span_, ns_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class UsingDeclarationNode : UnaryNode
    {
        public nothrow UsingDeclarationNode(const Span& span_, Node* subject_) : base(span_, subject_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class StaticAssertDeclarationNode : BinaryNode
    {
        public nothrow StaticAssertDeclarationNode(const Span& span_, Node* expr_, Node* message_) : base(span_, expr_, message_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class TypedefDeclarationNode : BinaryNode
    {
        public nothrow TypedefDeclarationNode(const Span& span_, Node* typeExpr_, Node* declarator_) : base(span_, typeExpr_, declarator_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class LinkageSpecificationNode : CompositeNode<Node>
    {
        public nothrow LinkageSpecificationNode(const Span& span_, Node* linkage_) : base(span_), linkage(linkage_) 
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<Node> linkage;
    }

    public class NamespaceNode : CompositeNode<Node>
    {
        public nothrow NamespaceNode(const Span& span_, Node* id_) : base(span_), id(id_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<Node> id;
    }
}
