using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace ast
{
    public class IdentifierNode : Node
    {
        public nothrow IdentifierNode(const Span& span_, const ustring& str_) : base(span_), str(str_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public ustring str;
    }
    
    public class ColonColonNode : BinaryNode
    {
        public nothrow ColonColonNode(const Span& span_, Node* left_, Node* right_) : base(span_, left_, right_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class DotNode : BinaryNode
    {
        public nothrow DotNode(const Span& span_, Node* left_, Node* right_) : base(span_, left_, right_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class ArrowNode : BinaryNode
    {
        public nothrow ArrowNode(const Span& span_, Node* left_, Node* right_) : base(span_, left_, right_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class TemplateIdNode : CompositeNode<Node>
    {
        public nothrow TemplateIdNode(const Span& span_, IdentifierNode* id_) : base(span_), id(id_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public UniquePtr<IdentifierNode> id;
    }
    
    public class FunctionPtrIdNode : UnaryNode
    {
        public nothrow FunctionPtrIdNode(const Span& span_, IdentifierNode* id_) : base(span_, id_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class MemberFunctionPtrIdNode : BinaryNode
    {
        public nothrow MemberFunctionPtrIdNode(const Span& span_, Node* nestedNameSpecifier_, IdentifierNode* id_) : base(span_, nestedNameSpecifier_, id_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }

    public class OperatorFunctionIdNode: Node
    {
        public nothrow OperatorFunctionIdNode(const Span& span_, Operator op_) : base(span_), op(op_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public Operator op;
    }
    
    public class ConversionFunctionIdNode : UnaryNode
    {
        public nothrow ConversionFunctionIdNode(const Span& span_, Node* typeExpr_) : base(span_, typeExpr_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class DestructorIdNode : UnaryNode
    {
        public nothrow DestructorIdNode(const Span& span_, IdentifierNode* id_) : base(span_, id_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
}
