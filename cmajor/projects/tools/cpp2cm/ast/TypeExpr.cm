using System;
using Span = System.Text.Parsing.Span;

namespace ast
{
    public enum CVSpecifiers
    {
        none = 0, const_ = 1, volatile = 2
    }
    
    public inline constexpr CVSpecifiers operator|(CVSpecifiers left, CVSpecifiers right)
    {
        return cast<CVSpecifiers>(cast<int>(left) | cast<int>(right)); 
    }
    
    public inline constexpr CVSpecifiers operator&(CVSpecifiers left, CVSpecifiers right)
    {
        return cast<CVSpecifiers>(cast<int>(left) & cast<int>(right));
    }
    
    public class ConstNode : UnaryNode
    {
        public nothrow ConstNode(const Span& span_, Node* child_) : base(span_, child_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class VolatileNode : UnaryNode
    {
        public nothrow VolatileNode(const Span& span_, Node* child_) : base(span_, child_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class PointerNode : UnaryNode
    {
        public nothrow PointerNode(const Span& span_, Node* child_) : base(span_, child_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class RvalueRefNode : UnaryNode
    {
        public nothrow RvalueRefNode(const Span& span_, Node* child_) : base(span_, child_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class LvalueRefNode : UnaryNode
    {
        public nothrow LvalueRefNode(const Span& span_, Node* child_) : base(span_, child_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class ArrayTypeNode : BinaryNode
    {
        public nothrow ArrayTypeNode(const Span& span_, Node* elementTypeExpr_, Node* size_) : base(span_, elementTypeExpr_, size_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
}
