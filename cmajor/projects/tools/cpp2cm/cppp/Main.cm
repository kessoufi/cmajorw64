using System;
using System.IO;
using System.Collections;
using cppparser;

const char* Version()
{
    return "2.5.0";
}

void PrintHelp()
{
    Console.Out() <<
        "C++ parser version " << Version() << endl() <<
        "Usage: cppp [options] { file.hpp | file.cpp }" << endl() <<
        "Parses given C++ source files." << endl() <<
        "Options:" << endl() <<
        "--help (-h)" << endl() <<
        "   Print help" << endl() <<
        "--verbose (-v)" << endl() <<
        "   Be verbose" << endl() <<
        "--debug (-d)" << endl() <<
        "   Debug parsing and generate XML debug output" << endl();
}

int main(int argc, const char** argv)
{
    try
    {
        bool debug = false;
        bool verbose = false;
        List<string> files;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("-"))
            {
                if (arg == "--debug" || arg == "-d")
                {
                    debug = true;
                }
                else if (arg == "--verbose" || arg == "-v")
                {
                    verbose = true;
                }
                else if (arg == "--help" || arg == "-h")
                {
                    PrintHelp();
                    return 0;
                }
                else
                {
                    throw Exception("unknown option '" + arg + "'");
                }
            }
            else
            {
                files.Add(GetFullPath(arg));
            }
        }
        if (files.IsEmpty())
        {
            PrintHelp();
            throw Exception("no input files given");
        }
        SourceFileGrammar* grammar = new SourceFileGrammar();
        if (debug)
        {
            grammar->SetLog(&Console.Out());
        }
        for (const string& file : files)
        {
            if (verbose)
            {
                Console.Out() << "> " << file << endl();
            }            
            ustring content = ToUtf32(File.ReadAllText(file));
            grammar->Parse(content.Chars(), content.Chars() + content.Length(), 0, file);
        }
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.ToString() << endl();
        return 1;
    }
    return 0;
}
