using System;
using System.IO;
using System.Collections;
using System.Net.Http;

int main(int argc, const char** argv)
{
    try
    {
        int lkm = 0;
        string tiedosto;
        bool debug = false;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.Find('=') != -1)
            {
                List<string> components = arg.Split('=');
                if (components.Count() != 2)
                {
                    throw Exception("kelvoton argumentti '" + arg + "'");
                }
                if (components[0] == "--lkm")
                {
                    lkm = ParseInt(components[1]);
                }
                else if (components[0] == "--tiedosto")
                {
                    tiedosto = components[1];
                }
                else
                {
                    throw Exception("kelvoton argumentti '" + arg + "'");
                }
            }
            else if (arg == "--debug")
            {
                debug = true;
            }
            else
            {
                throw Exception("kelvoton argumentti '" + arg + "'");
            }
        }
        HttpClient httpClient(UriReference(u"https://kartta.hel.fi/ws/geoserver/avoindata/"));
        if (debug)
        {
            httpClient.SetLog(&Console.Out());
        }
        HttpHeaderCollection requestHeaders;
        MediaRange mediaRange(MimeType(UniquePtr<MediaType>(new ApplicationMediaType()), UniquePtr<Subtype>(new Subtype(u"gml+xml"))));
        requestHeaders.Add(UniquePtr<HttpHeader>(new HttpAcceptHeader(mediaRange)));
        HttpHeaderCollection responseHeaders;
        SharedPtr<ByteStream> body;
        UriReference uri = u"wfs?request=GetFeature&service=wfs&typenames=(avoindata:Helsinki_osoiteluettelo)";
        if (lkm != 0)
        {
            uri = u"wfs?request=GetFeature&service=wfs&typenames=(avoindata:Helsinki_osoiteluettelo)&count=" + ToUtf32(ToString(lkm));
        }
        HttpStatus status = httpClient.Get(uri, requestHeaders, responseHeaders, body);
        if (status.StatusCode() == statusSuccessOK)
        {
            StreamReader reader(body);
            string sisältö = reader.ReadToEnd();
            if (tiedosto.IsEmpty())
            {
                Console.WriteLine(sisältö);
            }
            else
            {
                StreamWriter writer = File.CreateText(tiedosto);
                writer.WriteLine(sisältö);
            }
        }
        else
        {
            throw Exception(status.ToString());
        }
    }    
    catch (const Exception& ex)
    {
        Console.Error() << ex.ToString() << endl();
        return 1;
    }
    return 0;
}
 