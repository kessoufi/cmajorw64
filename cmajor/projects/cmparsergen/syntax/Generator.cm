using System;
using System.IO;
using System.Collections;
using System.Text.Parsing;
using Code;

namespace Syntax
{
    public string ResolveReferenceFilePath(const string& relativeReferenceFilePath, const string& projectBasePath, const List<string>& libraryDirectories)
    {
        string referenceFilePath = Path.Combine(projectBasePath, relativeReferenceFilePath);
        if (File.Exists(referenceFilePath))
        {
            return referenceFilePath;
        }
        long n = libraryDirectories.Count();
        for (long i = 0; i < n; ++i)
        {
            referenceFilePath = Path.Combine(libraryDirectories[i], relativeReferenceFilePath);
            if (File.Exists(referenceFilePath))
            {
                return referenceFilePath;
            }
        }
        throw Exception("library file path '" + relativeReferenceFilePath + "' not found");
    }
    
    public void Generate(const string& projectFilePath, const List<string>& libraryDirectories)
    {
        bool verbose = Flags.Instance().Verbose();
        if (verbose)
        {
            Console.Out() << "Parsing project file " << projectFilePath << "...\n";
        }
        UniquePtr<ParsingDomain> projectParsingDomain(new ParsingDomain());
        projectParsingDomain->SetOwned();
        ProjectFileGrammar* projectFileGrammar = new ProjectFileGrammar(projectParsingDomain.Get());
        LibraryFileGrammar* libraryFileGrammar = new LibraryFileGrammar(projectParsingDomain.Get());
        ParserFileGrammar* parserFileGrammar = new ParserFileGrammar(projectParsingDomain.Get());
        ustring projectFileContent = ToUtf32(File.ReadAllText(projectFilePath));
        UniquePtr<Project> project = projectFileGrammar->Parse(projectFileContent.Chars(), projectFileContent.Chars() + projectFileContent.Length(), 0, projectFilePath);
        if (verbose)
        {
            Console.Out() << "Compiling project " << project->Name() << "...\n";
        }
        UniquePtr<ParsingDomain> parsingDomain(new ParsingDomain());
        parsingDomain->SetOwned();
        if (verbose)
        {
            Console.Out() << "Parsing library files...\n";
        }
        long nr = project->ReferenceFiles().Count();
        for (long i = 0; i < nr; ++i)
        {
            string relativeReferenceFilePath = project->ReferenceFiles()[i];
            string referenceFilePath = ResolveReferenceFilePath(relativeReferenceFilePath, project->BasePath(), libraryDirectories);
            if (verbose)
            {
                Console.Out() << "> " << referenceFilePath << "\n";
            }
            ustring libraryFileContent = ToUtf32(File.ReadAllText(referenceFilePath));
            ParsingContext parsingContext;
            libraryFileGrammar->Parse(libraryFileContent.Chars(), libraryFileContent.Chars() + libraryFileContent.Length(), cast<int>(i), referenceFilePath, 
                &parsingContext, parsingDomain.Get());
        }
        if (verbose)
        {
            Console.Out() << "Parsing source files...\n";
        }
        List<UniquePtr<ParserFileContent>> parserFiles;
        long ns = project->SourceFiles().Count();
        for (long i = 0; i < ns; ++i)
        {
            string sourceFilePath = project->SourceFiles()[i];
            if (verbose)
            {
                Console.Out() << "> " << sourceFilePath << "\n";
            }
            ustring sourceFileContent = ToUtf32(File.ReadAllText(sourceFilePath));
            ParsingContext parsingContext;
            UniquePtr<ParserFileContent> parserFileContent = parserFileGrammar->Parse(sourceFileContent.Chars(), sourceFileContent.Chars() + sourceFileContent.Length(), cast<int>(i),
                sourceFilePath, &parsingContext, cast<int>(i), parsingDomain.Get());
            parserFiles.Add(Rvalue(parserFileContent));
        }
        if (verbose)
        {
            Console.Out() << "Linking...\n";
        }
        Link(parsingDomain.Get());
        if (verbose)
        {
            Console.Out() << "Expanding code...\n";
        }
        ExpandCode(parsingDomain.Get());
        if (verbose)
        {
            Console.Out() << "Generating source code...\n";
        }
        GenerateCode(parserFiles);
        if (verbose)
        {
            Console.Out() << "Generating library file...\n";
        }
        GenerateLibraryFile(project.Get(), parsingDomain.Get());
    }
}
