// =================================
// Copyright (c) 2017 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <cmajor/ast/Function.hpp>
[hpp]#include <cmajor/parser/ParsingContext.hpp>
[cpp]#include <cmajor/parser/Specifier.hpp>
[cpp]#include <cmajor/parser/TypeExpr.hpp>
[cpp]#include <cmajor/parser/Identifier.hpp>
[cpp]#include <cmajor/parser/Parameter.hpp>
[cpp]#include <cmajor/parser/Statement.hpp>

namespace cmajor.parser
{
    [hpp]using namespace cmajor::ast;

    grammar FunctionGrammar
    {
        using SpecifierGrammar.Specifiers;
        using TypeExprGrammar.TypeExpr;
        using ParameterGrammar.ParameterList;
        using IdentifierGrammar.Identifier;
        using StatementGrammar.CompoundStatement;
        
        Function(ParsingContext* ctx, var std::unique_ptr<FunctionNode> fun, var Span s) : FunctionNode*
            ::= (Specifiers TypeExpr(ctx) FunctionGroupId(ctx){ fun.reset(new FunctionNode(span, Specifiers, TypeExpr, FunctionGroupId)); } ParameterList(ctx, fun.get()){ s = span; }
                (CompoundStatement(ctx){ fun->SetBody(CompoundStatement); fun->GetSpan().SetEnd(s.End()); } | ';')){ value = fun.release(); }
            ;

        FunctionGroupId(ParsingContext* ctx, var std::unique_ptr<IdentifierNode> id) : std::u32string
            ::= Identifier{ id.reset(Identifier); value = std::u32string(matchBegin, matchEnd); }
            |   OperatorFunctionGroupId(ctx){ value = OperatorFunctionGroupId; }
            ;

        OperatorFunctionGroupId(ParsingContext* ctx, var std::unique_ptr<Node> typeExpr) : std::u32string
            ::= keyword("operator")
            (   ("<<" - ('<' '<' (TypeExpr(ctx){ typeExpr.reset(TypeExpr); } % ',') '>')){ value = ToUtf32("operator<<"); }
            |   ">>"{ value = ToUtf32("operator>>"); }
            |   "=="{ value = ToUtf32("operator=="); }
            |   '='{ value = ToUtf32("operator="); }
            |   '<'{ value = ToUtf32("operator<"); }
            |   "->"{ value = ToUtf32("operator->"); }
            |   '+'{ value = ToUtf32("operator+"); }
            |   '-'{ value = ToUtf32("operator-"); }
            |   '*'{ value = ToUtf32("operator*"); }
            |   '/'{ value = ToUtf32("operator/"); }
            |   '%'{ value = ToUtf32("operator%"); }
            |   '&'{ value = ToUtf32("operator&"); }
            |   '|'{ value = ToUtf32("operator|"); }
            |   '^'{ value = ToUtf32("operator^"); }
            |   '!'{ value = ToUtf32("operator!"); }
            |   '~'{ value = ToUtf32("operator~"); }
            |   ('[' ']'){ value = ToUtf32("operator[]"); }
            |   ('(' ')'){ value = ToUtf32("operator()"); }
            )
            ;
    }
}
