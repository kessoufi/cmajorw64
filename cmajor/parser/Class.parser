// =================================
// Copyright (c) 2018 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <cmajor/ast/Class.hpp>
[hpp]#include <cmajor/parser/ParsingContext.hpp>
[cpp]#include <cmajor/parser/Attribute.hpp>
[cpp]#include <cmajor/parser/Specifier.hpp>
[cpp]#include <cmajor/parser/Identifier.hpp>
[cpp]#include <cmajor/parser/TypeExpr.hpp>
[cpp]#include <cmajor/parser/Concept.hpp>
[cpp]#include <cmajor/parser/Expression.hpp>
[cpp]#include <cmajor/parser/Statement.hpp>
[cpp]#include <cmajor/parser/Parameter.hpp>
[cpp]#include <cmajor/parser/Function.hpp>
[cpp]#include <cmajor/parser/Template.hpp>
[cpp]#include <cmajor/parser/Typedef.hpp>
[cpp]#include <cmajor/parser/Enumeration.hpp>
[cpp]#include <cmajor/parser/Constant.hpp>
[cpp]#include <cmajor/parser/Delegate.hpp>

namespace cmajor.parser
{
    [hpp]using namespace cmajor::ast;

    grammar ClassGrammar
    {
        using AttributeGrammar.Attributes;
        using SpecifierGrammar.Specifiers;
        using IdentifierGrammar.Identifier;
        using IdentifierGrammar.QualifiedId;
        using TypeExprGrammar.TypeExpr;
        using ConceptGrammar.WhereConstraint;
        using ExpressionGrammar.ArgumentList;
        using StatementGrammar.CompoundStatement;
        using ParameterGrammar.ParameterList;
        using FunctionGrammar.FunctionGroupId;
        using TemplateGrammar.TemplateId;
        using TemplateGrammar.TemplateParameterList;
        using TypedefGrammar.Typedef;
        using EnumerationGrammar.EnumType;
        using ConstantGrammar.Constant;
        using DelegateGrammar.Delegate;
        using DelegateGrammar.ClassDelegate;

        Class(ParsingContext* ctx, var std::unique_ptr<Attributes> attributes) : ClassNode*
            ::= (Attributes{ attributes.reset(Attributes); })?
                Specifiers keyword("class") Identifier{ value = new ClassNode(span, Specifiers, Identifier, attributes.release()); }
                TemplateParameterList(ctx, value)?
                InheritanceAndInterfaces(ctx, value)? 
                (WhereConstraint(ctx){ value->SetConstraint(WhereConstraint); value->GetSpan().SetEnd(span.End()); })?
                '{'! ClassContent(ctx, value) '}'!
            ;

        InheritanceAndInterfaces(ParsingContext* ctx, ClassNode* classNode)
            ::= ':' 
            (   empty{ ctx->BeginParsingTypeExpr(); } 
                BaseClassOrInterface(ctx){ classNode->AddBaseClassOrInterface(BaseClassOrInterface); ctx->EndParsingTypeExpr(); } / { ctx->EndParsingTypeExpr(); }
            )  % ','
            ;

        BaseClassOrInterface(ParsingContext* ctx) : Node*
            ::= TemplateId(ctx){ value = TemplateId; }
            |   QualifiedId{ value = QualifiedId; }
            ;

        ClassContent(ParsingContext* ctx, ClassNode* classNode)
            ::= (ClassMember(ctx, classNode){ classNode->AddMember(ClassMember); })*
            ;

        ClassMember(ParsingContext* ctx, ClassNode* classNode) : Node*
            ::= StaticConstructor(ctx, classNode){ value = StaticConstructor; }
            |   Constructor(ctx, classNode){ value = Constructor; }
            |   Destructor(ctx, classNode){ value = Destructor; }
            |   MemberFunction(ctx){ value = MemberFunction; }
            |   ConversionFunction(ctx){ value = ConversionFunction; }
            |   MemberVariable(ctx){ value = MemberVariable; }
            |   Typedef(ctx){ value = Typedef; }
            |   Class(ctx){ value = Class; }
            |   EnumType(ctx){ value = EnumType; }
            |   Constant(ctx){ value = Constant; }
            |   Delegate(ctx){ value = Delegate; }
            |   ClassDelegate(ctx){ value = ClassDelegate; }
            ;

        StaticConstructor(ParsingContext* ctx, ClassNode* classNode, var std::unique_ptr<IdentifierNode> id, var std::unique_ptr<Attributes> attributes) : StaticConstructorNode*
            ::= ((Attributes{ attributes.reset(Attributes); })? Specifiers:specifiers Identifier{ id.reset(Identifier); } '(' ')')
                { 
                    if (id->Str() != classNode->Id()->Str()) pass = false; else if (!StaticConstructorSpecifiers(specifiers)) pass = false; 
                    else { value = new StaticConstructorNode(span, specifiers, attributes.release()); }
                }
                (':' (Initializer(ctx){ value->AddInitializer(Initializer); } % ','))?
                (WhereConstraint(ctx){ value->SetConstraint(WhereConstraint); })?
                (CompoundStatement(ctx){ value->SetBody(CompoundStatement); } | ';' )
            ;

        Constructor(ParsingContext* ctx, ClassNode* classNode, var std::unique_ptr<IdentifierNode> id, var std::unique_ptr<ConstructorNode> ctor, var std::unique_ptr<Attributes> attributes) : Node*
            ::= ((Attributes{ attributes.reset(Attributes); })? Specifiers Identifier{ id.reset(Identifier); })
                { if (id->Str() != classNode->Id()->Str()) pass = false; else { ctor.reset(new ConstructorNode(span, Specifiers, attributes.release())); } }
                ParameterList(ctx, ctor.get()) 
                (':' (Initializer(ctx){ ctor->AddInitializer(Initializer); } % ','))?
                (WhereConstraint(ctx){ ctor->SetConstraint(WhereConstraint); })?
                (CompoundStatement(ctx){ ctor->SetBody(CompoundStatement); } | ';' ){ value = ctor.release(); }
            ;

        Destructor(ParsingContext* ctx, ClassNode* classNode, var std::unique_ptr<IdentifierNode> id, var std::unique_ptr<DestructorNode> dtor, var std::unique_ptr<Attributes> attributes) : Node*
            ::= ((Attributes{ attributes.reset(Attributes); })? Specifiers '~' Identifier{ id.reset(Identifier); } '(' ')')
                { if (id->Str() != classNode->Id()->Str()) pass = false; else { dtor.reset(new DestructorNode(span, Specifiers, attributes.release())); } }
                (WhereConstraint(ctx){ dtor->SetConstraint(WhereConstraint); })?
                (CompoundStatement(ctx){ dtor->SetBody(CompoundStatement); } | ';' ){ value = dtor.release(); }
            ;

        Initializer(ParsingContext* ctx) : InitializerNode*
            ::= keyword("this"){ value = new ThisInitializerNode(span); } '('! ArgumentList(ctx, value):thisArgs! ')'!
            |   keyword("base"){ value = new BaseInitializerNode(span); } '('! ArgumentList(ctx, value):baseArgs! ')'!
            |   Identifier{ value = new MemberInitializerNode(span, Identifier); } '('! ArgumentList(ctx, value):memberArgs! ')'!
            ;

        MemberFunction(ParsingContext* ctx, var std::unique_ptr<MemberFunctionNode> memFun, var std::unique_ptr<IdentifierNode> qid, var std::unique_ptr<Attributes> attributes) : Node*
            ::= ((Attributes{ attributes.reset(Attributes); })? Specifiers TypeExpr(ctx) FunctionGroupId(ctx))
                { 
                    memFun.reset(new MemberFunctionNode(span, Specifiers, TypeExpr, FunctionGroupId, attributes.release())); 
                } 
                ParameterList(ctx, memFun.get()) (keyword("const"){ memFun->SetConst(); })?
                (WhereConstraint(ctx){ memFun->SetConstraint(WhereConstraint); })?
                (CompoundStatement(ctx){ memFun->SetBody(CompoundStatement); } | ';' ){ value = memFun.release(); }
            ;

        ConversionFunction(ParsingContext* ctx, var std::unique_ptr<ConversionFunctionNode> conversionFun, var std::unique_ptr<Attributes> attributes) : Node*
            ::= ((Attributes{ attributes.reset(Attributes); })? Specifiers keyword("operator") TypeExpr(ctx) '('! ')'!){ conversionFun.reset(new ConversionFunctionNode(span, Specifiers, TypeExpr, attributes.release())); }
                (keyword("const"){ conversionFun->SetConst(); })? 
                (WhereConstraint(ctx){ conversionFun->SetConstraint(WhereConstraint); })?
                (CompoundStatement(ctx){ conversionFun->SetBody(CompoundStatement); } | ';'){ value = conversionFun.release(); }
            ;

        MemberVariable(ParsingContext* ctx, var std::unique_ptr<Attributes> attributes) : Node*
            ::= ((Attributes{ attributes.reset(Attributes); })? Specifiers TypeExpr(ctx) Identifier ';'){ value = new MemberVariableNode(span, Specifiers, TypeExpr, Identifier, attributes.release()); }
            ;

    }
}
