// =================================
// Copyright (c) 2018 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <cmajor/ast/Template.hpp>
[hpp]#include <cmajor/parser/ParsingContext.hpp>
[cpp]#include <cmajor/parser/Identifier.hpp>
[cpp]#include <cmajor/parser/TypeExpr.hpp>

namespace cmajor.parser
{
    [hpp]using namespace cmajor::ast;

    grammar TemplateGrammar
    {
        using IdentifierGrammar.QualifiedId;
        using IdentifierGrammar.Identifier;
        using TypeExprGrammar.TypeExpr;

        TemplateId(ParsingContext* ctx, var std::unique_ptr<TemplateIdNode> templateId) : Node*
            ::= empty{ ctx->BeginParsingTemplateId(); }
                (QualifiedId:primary{ templateId.reset(new TemplateIdNode(span, primary)); }
                '<' (TypeExpr(ctx):templateArg{ templateId->AddTemplateArgument(templateArg); } % ',') '>')
            {
                ctx->EndParsingTemplateId();
                value = templateId.release();
                value->GetSpan().SetEnd(span.End());
            }
            /
            {
                ctx->EndParsingTemplateId();
            }
            ;

        TemplateParameter(ParsingContext* ctx) : TemplateParameterNode*
            ::= (Identifier ('=' TypeExpr(ctx))?){ value = new TemplateParameterNode(span, Identifier, TypeExpr); } 
            ;

        TemplateParameterList(ParsingContext* ctx, Node* owner)
            ::= '<' (TemplateParameter(ctx){ owner->AddTemplateParameter(TemplateParameter); } % ',') '>'!
            ;
    }
}
