// =================================
// Copyright (c) 2017 Seppo Laakko
// Distributed under the MIT license
// =================================

public extern cdecl nothrow void RtInit();
public extern cdecl nothrow void RtDone();
public extern cdecl nothrow void RtExit(int exitCode);
public extern cdecl nothrow void* RtMemAlloc(long size);
public extern cdecl nothrow void RtMemFree(void* ptr);
public extern cdecl nothrow void RtBeginStaticInitCriticalSection(uint staticClassId);
public extern cdecl nothrow void RtEndStaticInitCriticalSection(uint staticClassId);
public extern cdecl nothrow void RtEnqueueDestruction(void* destructor, void* arg);
public extern cdecl nothrow void RtFailAssertion(const char* assertion, const char* function, const char* sourceFilePath, int lineNumber);
public extern cdecl void RtThrowException(void* exception, uint exceptionTypeId);
public extern cdecl nothrow bool RtHandleException(uint exceptionTypeId);
public extern cdecl nothrow void* RtGetException();
public extern cdecl nothrow const char* RtGetError(int errorId);
public extern cdecl nothrow void RtDisposeError(int errorId);
public extern cdecl nothrow const char* RtGetStackTrace();
public extern cdecl nothrow void RtDisposeStackTrace();
public extern cdecl nothrow int RtOpen(const char* filePath, byte openMode);
public extern cdecl nothrow int RtClose(int fileHandle);
public extern cdecl nothrow int RtWrite(int fileHandle, const void* buffer, long count);
public extern cdecl nothrow int RtWriteByte(int fileHandle, byte x);
public extern cdecl nothrow long RtRead(int fileHandle, void* buffer, long bufferSize);
public extern cdecl nothrow int RtReadByte(int fileHandle);
public extern cdecl nothrow int RtSeek(int fileHandle, long pos, byte origin);
public extern cdecl nothrow long RtTell(int fileHandle);
public extern cdecl nothrow bool RtFileExists(const char* filePath);
public extern cdecl nothrow double RtPow(double x, int exponent);
public extern cdecl nothrow const char* RtGetEnvironmentVariable(const char* environmentVariableName);
public extern cdecl nothrow int RtGetCurrentWorkingDirectoryHandle();
public extern cdecl nothrow const char* RtGetCurrentWorkingDirectory(int currentWorkingDirectoryHandle);
public extern cdecl nothrow void RtFreeCurrentWorkingDirectoryHandle(int currentWorkingDirectoryHandle);
public extern cdecl nothrow int RtAllocateMutex();
public extern cdecl nothrow void RtFreeMutex(int mutexId);
public extern cdecl nothrow void RtLockMutex(int mutexId);
public extern cdecl nothrow void RtUnlockMutex(int mutexId);
