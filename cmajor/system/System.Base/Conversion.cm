// =================================
// Copyright (c) 2017 Seppo Laakko
// Distributed under the MIT license
// =================================

namespace System
{
    void ThrowConversionException(const string& message)
    {
        #assert(false);
    }

    public nothrow string ToStringGeneric<I, U>(I x) where I is SignedInteger and U is UnsignedInteger and ExplicitlyConvertible<I, U> and ExplicitlyConvertible<U, byte>
    {
        string s;
        U u = 0u;
        bool neg = x < 0;
        if (neg)
        {
            u = -cast<U>(x);
        }
        else
        {
            u = cast<U>(x);
        }
        do
        {
            s.Append(cast<char>(cast<byte>('0') + cast<byte>(u % 10u)));
            u = u / 10u;
        }
        while (u != 0u);
        if (neg)
        {
            s.Append('-');
        }
        Reverse(s.Begin(), s.End());
        return s;
    }

    public nothrow string ToStringGeneric<U>(U x, bool) where U is UnsignedInteger and ExplicitlyConvertible<U, byte>
    {
        string s;
        do
        {
            s.Append(cast<char>(cast<byte>('0') + cast<byte>(x % 10u)));
            x = x / 10u;
        }
        while (x != 0u);
        Reverse(s.Begin(), s.End());
        return s;
    }

    public nothrow string ToString(sbyte x)
    {
        return ToString(cast<int>(x));
    }

    public nothrow string ToString(byte x)
    {
        return ToString(cast<uint>(x), true);
    }

    public nothrow string ToString(short x)
    {
        return ToString(cast<int>(x));
    }

    public nothrow string ToString(ushort x)
    {
        return ToString(cast<uint>(x), true);
    }

    public nothrow string ToString(int x)
    {
        return ToStringGeneric<int, uint>(x);
    }

    public nothrow string ToString(uint x)
    {
        return ToStringGeneric<uint>(x, true);
    }

    public nothrow string ToString(long x)
    {
        return ToStringGeneric<long, ulong>(x);
    }

    public nothrow string ToString(ulong x)
    {
        return ToStringGeneric<ulong>(x, true);
    }

    public nothrow string ToString(float f)
    {
        return ToString(cast<double>(f));
    }

    public nothrow string ToString(double x, int maxNumDecimals)
    {
        return ToString(x, 0, maxNumDecimals);
    }    

    public nothrow string ToString(double x)
    {
        return ToString(x, 15);
    }

    public nothrow string ToString(double x, int minNumDecimals, int maxNumDecimals)
    {
        string result;
        if (x < 0)
        {
            x = -x;
            result.Append('-');
        }
        result.Append(ToString(cast<int>(x)));
        double d = x - cast<int>(x);
        if (d > 0 || minNumDecimals > 0)
        {
            result.Append('.');
            for (int i = 0; (d > 0 || i < minNumDecimals) && i < maxNumDecimals; ++i)
            {
                d = 10 * d;
                int digit = cast<int>(d) % 10;
                result.Append(cast<char>(cast<int>('0') + digit));
                d = d - cast<int>(d);
            }
        }
        return result;
    }

    public string ToString(char c)
    {
        return string(c);
    }

    public string ToString(wchar c)
    {
        wstring s(c);
        return System.Unicode.ToUtf8(s);
    }
    
    public string ToString(uchar c)
    {
        ustring s(c);
        return System.Unicode.ToUtf8(s);
    }

    public nothrow string ToString(bool b)
    {
        if (b)
        {
            return "true";
        }
        return "false";
    }
}
