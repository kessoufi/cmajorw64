// =================================
// Copyright (c) 2018 Seppo Laakko
// Distributed under the MIT license
// =================================

namespace System
{
    public class TimePoint
    {
        public nothrow TimePoint() : nanosecs(0)
        {
        }
        public explicit nothrow TimePoint(long nanosecs_) : nanosecs(nanosecs_)
        {
        }
        public nothrow inline long Rep() const
        {
            return nanosecs;
        }
        private long nanosecs;
    }
    
    public class Duration
    {
        public nothrow Duration() : nanosecs(0)
        {
        }
        public explicit nothrow Duration(long nanosecs_) : nanosecs(nanosecs_)
        {
        }
        public nothrow long Hours() const
        {
            return nanosecs / (3600 * long(1000000000));
        }
        public nothrow long Minutes() const
        {
            return nanosecs / (60 * long(1000000000));
        }
        public nothrow long Seconds() const
        {
            return nanosecs / long(1000000000);
        }
        public nothrow long Milliseconds() const
        {
            return nanosecs / long(1000000);
        }
        public nothrow long Microseconds() const
        {
            return nanosecs / long(1000);
        }
        public nothrow long Nanoseconds() const
        {
            return nanosecs;
        }
        public static nothrow Duration FromHours(long hours)
        {
            return Duration(3600 * long(1000000000) * hours);
        }
        public static nothrow Duration FromMinutes(long minutes)
        {
            return Duration(60 * long(1000000000) * minutes);
        }
        public static nothrow Duration FromSeconds(long seconds)
        {
            return Duration(long(1000000000) * seconds);
        }
        public static nothrow Duration FromMilliseconds(long milliseconds)
        {
            return Duration(long(1000000) * milliseconds);
        }
        public static nothrow Duration FromMicroseconds(long microseconds)
        {
            return Duration(long(1000) * microseconds);
        }
        public static nothrow Duration FromNanoseconds(long nanoseconds)
        {
            return Duration(nanoseconds);
        }
        public nothrow inline long Rep() const
        {
            return nanosecs;
        }
        private long nanosecs;
    }

    public nothrow inline bool operator==(const Duration& left, const Duration& right)
    {
        return left.Rep() == right.Rep();
    }

    public nothrow inline bool operator<(const Duration& left, const Duration& right)
    {
        return left.Rep() < right.Rep();
    }

    public nothrow inline bool operator==(const TimePoint& left, const TimePoint& right)
    {
        return left.Rep() == right.Rep();
    }

    public nothrow inline bool operator<(const TimePoint& left, const TimePoint& right)
    {
        return left.Rep() < right.Rep();
    }

    public nothrow inline Duration operator+(const Duration& left, const Duration& right)
    {
        return Duration(left.Rep() + right.Rep());
    }

    public nothrow inline Duration operator-(const Duration& left, const Duration& right)
    {
        return Duration(left.Rep() - right.Rep());
    }

    public nothrow inline Duration operator*(const Duration& left, const Duration& right)
    {
        return Duration(left.Rep() * right.Rep());
    }

    public nothrow inline Duration operator/(const Duration& left, const Duration& right)
    {
        return Duration(left.Rep() / right.Rep());
    }

    public nothrow inline Duration operator%(const Duration& left, const Duration& right)
    {
        return left.Rep() % right.Rep();
    }

    public nothrow inline Duration operator-(const TimePoint& left, const TimePoint& right)
    {
        long diff = left.Rep() - right.Rep();
        return Duration(diff);
    }

    public nothrow inline TimePoint operator+(const TimePoint& tp, const Duration& d)
    {
        return TimePoint(tp.Rep() + d.Rep());
    }

    public nothrow inline TimePoint operator+(const Duration& d, const TimePoint& tp)
    {
        return TimePoint(tp.Rep() + d.Rep());
    }

    public nothrow inline TimePoint operator-(const TimePoint& tp, const Duration& d)
    {
        return TimePoint(tp.Rep() - d.Rep());
    }
    
    public nothrow TimePoint Now()
    {
        return TimePoint(RtNow());
    }
    
    public nothrow void Sleep(const Duration& duration)
    {
        RtSleep(duration.Rep());
    }
}
