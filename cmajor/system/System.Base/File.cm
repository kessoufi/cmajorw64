// =================================
// Copyright (c) 2018 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.IO
{
    public static class File
    {
        public static nothrow bool Exists(const string& filePath)
        {
            return RtFileExists(filePath.Chars());
        }
        public static nothrow bool LastWriteTimeLess(const string& filePath1, const string& filePath2)
        {
            return RtLastWriteTimeLess(filePath1.Chars(), filePath2.Chars());
        }
        public static StreamWriter CreateText(const string& filePath)
        {
            return StreamWriter(SharedPtr<ByteStream>(new BufferedByteStream(SharedPtr<ByteStream>(
                new FileByteStream(filePath, OpenMode.write)))));
        }
        public static BinaryWriter CreateBinary(const string& filePath)
        {
            return BinaryWriter(SharedPtr<ByteStream>(new BufferedByteStream(SharedPtr<ByteStream>(
                new FileByteStream(filePath, cast<OpenMode>(OpenMode.write | OpenMode.binary))))));
        }
        public static StreamWriter AppendText(const string& filePath)
        {
            return StreamWriter(SharedPtr<ByteStream>(new BufferedByteStream(SharedPtr<ByteStream>(
                new FileByteStream(filePath, OpenMode.append)))));
        }
        public static StreamReader OpenRead(const string& filePath)
        {
            return StreamReader(SharedPtr<ByteStream>(new BufferedByteStream(SharedPtr<ByteStream>(
                new FileByteStream(filePath, OpenMode.read)))));
        }
        public static BinaryReader OpenBinary(const string& filePath)
        {
            return BinaryReader(SharedPtr<ByteStream>(new BufferedByteStream(SharedPtr<ByteStream>(
                new FileByteStream(filePath, cast<OpenMode>(OpenMode.read | OpenMode.binary))))));
        }
        public static string ReadAllText(const string& filePath)
        {
            StreamReader reader = OpenRead(filePath);
            string content = reader.ReadToEnd();
            if (content.Length() >= 3 && cast<byte>(content[0]) == 0xEFu && cast<byte>(content[1]) == 0xBBu && cast<byte>(content[2]) == 0xBFu)
            {
                return content.Substring(3);
            }
            else
            {
                return content;
            }
        }
    }
}
