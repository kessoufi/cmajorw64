// =================================
// Copyright (c) 2018 Seppo Laakko
// Distributed under the MIT license
// =================================

using System;

namespace System.IO
{
    public class StreamReader
    {
        public StreamReader(const SharedPtr<ByteStream>& stream_) : stream(stream_), buffered(false)
        {
        }
        public int Read()
        {
            return Get(false);
        }
        public int Peek()
        {
            return Get(true);
        }
        public string ReadLine()
        {
            string result;
            int x = Read();
            while (x != -1)
            {
                if (cast<char>(x) == '\n')
                {
                    return result;
                }
                else
                {
                    result.Append(cast<char>(x));
                }
                x = Read();
            }
            return result;
        }
        public string ReadToEnd()
        {
            string result;
            int x = Read();
            while (x != -1)
            {
                result.Append(cast<char>(x));
                x = Read();
            }
            return result;
        }
        public void PutBack(byte b)
        {
            buffered = true;
            buffer = b;
        }
        private int Get(bool peek)
        {
            if (buffered)
            {
                if (!peek)
                {
                    buffered = false;
                }
                return buffer;
            }
            else
            {
                int x = stream->ReadByte();
                if (peek)
                {
                    buffer = x;
                    buffered = true;
                }
                return x;
            }
        }
        public nothrow const SharedPtr<ByteStream>& ContainedStream() 
        {
            return stream;
        }
        private SharedPtr<ByteStream> stream;
        private bool buffered;
        private int buffer;
    }
}
